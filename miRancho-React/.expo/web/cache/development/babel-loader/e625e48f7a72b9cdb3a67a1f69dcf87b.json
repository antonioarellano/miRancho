{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { Component } from 'react';\nimport { Button, NativeBaseProvider, Box, Input, FormControl, VStack, Checkbox, Link, Slider, Select, Radio, ScrollView, Divider, Center, Text, FlatList, Heading, Icon, KeyboardAvoidingView, Alert, IconButton, CloseIcon, Collapse, HStack, Modal } from 'native-base';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport NetInfo from \"@react-native-community/netinfo\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var LogIn = function LogIn(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState({}),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setData = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      errors = _React$useState4[0],\n      setError = _React$useState4[1];\n\n  var getUser = function getUser() {\n    return _regeneratorRuntime.async(function getUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(data.user, data.pass);\n            return _context.abrupt(\"return\", data.user);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleLogin = function handleLogin() {};\n\n  return _jsxs(Box, {\n    justifyContent: \"center\",\n    flex: 1,\n    children: [_jsx(VStack, {\n      children: _jsxs(FormControl, {\n        isRequired: true,\n        isInvalid: 'user' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Nombre de Usuario\"\n        }), _jsx(Input, {\n          placeholder: \"Usuario\",\n          onChangeText: function onChangeText(value) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              user: value\n            }));\n          }\n        }), 'user' in errors ? _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.user\n        }) : _jsx(FormControl.HelperText, {\n          _text: {\n            fontSize: 'xs'\n          },\n          children: \"Diferenciar MAYUS de MINUS\"\n        })]\n      })\n    }), _jsx(VStack, {\n      children: _jsxs(FormControl, {\n        isRequired: true,\n        isInvalid: 'pass' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Contrase\\xF1a\"\n        }), _jsx(Input, {\n          placeholder: \"Contrase\\xF1a\",\n          type: \"password\",\n          onChangeText: function onChangeText(value) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              pass: value\n            }));\n          }\n        }), 'pass' in errors ? _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.pass\n        }) : _jsx(FormControl.HelperText, {\n          _text: {\n            fontSize: 'xs'\n          },\n          children: \"Diferenciar MAYUS de MINUS\"\n        })]\n      })\n    }), _jsx(Button, {\n      colorScheme: \"success\",\n      onPress: function onPress() {\n        return navigation.navigate('rancho');\n      },\n      children: \"Entrar\"\n    }), _jsx(Divider, {\n      my: 3\n    }), _jsx(Button, {\n      colorScheme: \"teal\",\n      variant: \"outline\",\n      onPress: function onPress() {\n        return navigation.navigate('recPass');\n      },\n      children: \"Olvide mi contrase\\xF1a\"\n    }), _jsx(Button, {\n      colorScheme: \"teal\",\n      variant: \"outline\",\n      onPress: function onPress() {\n        return navigation.navigate('singin');\n      },\n      children: \"No tengo cuenta\"\n    })]\n  });\n};\nexport var SingIn = function SingIn(_ref2) {\n  var navigation = _ref2.navigation;\n\n  var _React$useState5 = React.useState({}),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      data = _React$useState6[0],\n      setData = _React$useState6[1];\n\n  var _React$useState7 = React.useState({}),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      errors = _React$useState8[0],\n      setError = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      terms = _React$useState10[0],\n      setTerms = _React$useState10[1];\n\n  var createUser = function createUser() {\n    var response, json;\n    return _regeneratorRuntime.async(function createUser$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch('https://turancho.com.mx/request/cUser.php', {\n              method: 'POST',\n              body: JSON.stringify({\n                u: data.user,\n                p: data.pass,\n                n: data.name,\n                a: data.address,\n                m: data.mail\n              })\n            }));\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            json = _context2.sent;\n            return _context2.abrupt(\"return\", json.user);\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\", false);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  var verifyUser = function verifyUser() {\n    var response, json;\n    return _regeneratorRuntime.async(function verifyUser$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch('https://turancho.com.mx/request/vUser.php', {\n              method: 'GET',\n              body: JSON.stringify({\n                u: data.user\n              })\n            }));\n\n          case 3:\n            response = _context3.sent;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            json = _context3.sent;\n            return _context3.abrupt(\"return\", json);\n\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3[\"catch\"](0);\n            return _context3.abrupt(\"return\", false);\n\n          case 13:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  var verifyMail = function verifyMail() {\n    return _regeneratorRuntime.async(function verifyMail$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            console.log('Verificando correo');\n            fetch('https://turancho.com.mx/request/vMail.php' + new URLSearchParams({\n              m: data.mail\n            }), {\n              method: 'GET'\n            }).then(function (response) {\n              return response.text();\n            }).then(function (info) {\n              console.log(info);\n            }).catch(function (error) {\n              return console.log(error);\n            });\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  function validForm() {\n    if (data.user === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        user: 'Se necesita usuario'\n      }));\n      return false;\n    } else delete errors.user;\n\n    if (data.pass === undefined || data.cpass === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        pass: 'Se necesita contraseÃ±a'\n      }));\n      return false;\n    } else delete errors.pass;\n\n    if (data.name === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        name: 'Se necesita el nombre'\n      }));\n      return false;\n    } else delete errors.name;\n\n    if (data.address === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        address: 'Se necesita domicilio'\n      }));\n      return false;\n    } else delete errors.address;\n\n    if (data.mail === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        mail: 'Se necesita cuenta de correo electrÃ³nico'\n      }));\n      return false;\n    } else delete errors.mail;\n\n    if (terms === undefined || terms == false) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        terms: 'Necesitas aceptar los tÃ©rminos y condiciones de uso'\n      }));\n      return false;\n    } else delete errors.terms;\n\n    if (data.pass != data.cpass) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        pass: 'Las contraseÃ±as no coinciden'\n      }));\n      return false;\n    } else delete errors.pass;\n\n    return true;\n  }\n\n  var HandleRegister = function HandleRegister() {\n    if (validForm()) {\n      NetInfo.fetch().then(function (isConnected) {\n        if (isConnected) {\n          verifyMail();\n        } else console.log(\"No hay conexion\");\n      });\n    } else console.log(\"no hay conexion\");\n  };\n\n  return _jsx(KeyboardAvoidingView, {\n    behavior: (Platform.OS === \"ios\" ? \"height\" : \"\", Platform.OS === 'web' ? \"padding\" : \"\"),\n    keyboardVerticalOffset: 100,\n    children: _jsx(ScrollView, {\n      children: _jsxs(Box, {\n        justifyContent: \"center\",\n        flex: 1,\n        children: [_jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'user' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Nombre de Usuario (Se sugiere usar la CURP)\"\n            }), _jsx(Input, {\n              placeholder: \"Usuario\",\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  user: value\n                }));\n              },\n              maxLength: 20\n            }), 'user' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.user\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          })\n        }), _jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'pass' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Contrase\\xF1a\"\n            }), _jsx(Input, {\n              p: 2,\n              placeholder: \"Contrase\\xF1a\",\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  pass: value\n                }));\n              },\n              type: \"password\"\n            }), _jsx(Input, {\n              p: 2,\n              placeholder: \"Confirmar contrase\\xF1a\",\n              onChangeText: function onChangeText(value) {\n                setData(_objectSpread(_objectSpread({}, data), {}, {\n                  cpass: value\n                }));\n              },\n              type: \"password\"\n            }), 'pass' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.pass\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          })\n        }), _jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'name' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Nombre Completo\"\n            }), _jsx(Input, {\n              p: 2,\n              placeholder: \"Nombre\",\n              onChangeText: function onChangeText(value) {\n                setData(_objectSpread(_objectSpread({}, data), {}, {\n                  name: value\n                }));\n              }\n            }), 'name' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.name\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Escriba nombre completo\"\n            })]\n          })\n        }), _jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'address' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Domicilio\"\n            }), _jsx(Input, {\n              p: 2,\n              placeholder: \"Domicilio\",\n              onChangeText: function onChangeText(value) {\n                setData(_objectSpread(_objectSpread({}, data), {}, {\n                  address: value\n                }));\n              }\n            }), 'address' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.address\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Agregue un domicilio\"\n            })]\n          })\n        }), _jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'mail' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Correo electr\\xF3nico\"\n            }), _jsx(Input, {\n              p: 2,\n              keyboardType: \"email-address\",\n              placeholder: \"Correo\",\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  mail: value\n                }));\n              }\n            }), 'mail' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.phone\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          })\n        }), _jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'terms' in errors,\n            children: [_jsxs(Checkbox, {\n              onChange: function onChange(value) {\n                return setTerms(value);\n              },\n              children: [\"Aceptar\", _jsx(Link, {\n                onPress: function onPress() {\n                  return navigation.navigate('terms');\n                },\n                children: \" terminos y condiciones de uso\"\n              })]\n            }), 'terms' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.terms\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Es necesario aceptar\"\n            })]\n          })\n        }), _jsx(Divider, {\n          my: 2\n        }), _jsx(Button, {\n          colorScheme: \"success\",\n          onPress: HandleRegister,\n          children: \"Registrar\"\n        })]\n      })\n    })\n  });\n};\nexport var Terms = function Terms(_ref3) {\n  var navigation = _ref3.navigation;\n  return _jsx(NativeBaseProvider, {\n    children: _jsx(Box, {\n      children: \"Aqui estan los terminos y condiciones jeje\"\n    })\n  });\n};\nexport var RecPass = function RecPass(_ref4) {\n  var navigation = _ref4.navigation;\n\n  var _React$useState11 = React.useState(''),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      data = _React$useState12[0],\n      setData = _React$useState12[1];\n\n  return _jsxs(Box, {\n    children: [_jsxs(FormControl, {\n      children: [_jsx(FormControl.Label, {\n        children: \"Ingrese su usuario\"\n      }), _jsx(Input, {\n        placeholder: \"Usuario\",\n        value: data,\n        onChangeText: function onChangeText(value) {\n          return setData(value);\n        }\n      })]\n    }), _jsx(Button, {\n      colorScheme: \"success\",\n      children: \"Restablecer contrase\\xF1a\"\n    })]\n  });\n};\nexport var newPass = function newPass(_ref5) {\n  var navigation = _ref5.navigation;\n\n  var _React$useState13 = React.useState(''),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      pass = _React$useState14[0],\n      setPass = _React$useState14[1];\n\n  var _React$useState15 = React.useState(''),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      cPass = _React$useState16[0],\n      setCpass = _React$useState16[1];\n\n  return _jsx(Box, {});\n};\nexport var verMail = function verMail(_ref6) {\n  var route = _ref6.route,\n      navigation = _ref6.navigation;\n  var mail = route.params;\n\n  var _React$useState17 = React.useState(''),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      key = _React$useState18[0],\n      setKey = _React$useState18[1];\n\n  return _jsxs(Box, {\n    children: [_jsx(Text, {\n      children: \"Ingrese el c\\xF3digo de verificaci\\xF3n enviado a:\"\n    }), _jsxs(Text, {\n      size: \"md\",\n      children: [mail, \" \"]\n    }), _jsx(Input, {\n      keyboardType: \"numeric\",\n      value: key.toString(),\n      onChangeText: function onChangeText(value) {\n        return setKey(value);\n      }\n    }), _jsx(Button, {\n      colorScheme: \"success\",\n      children: \"Enviar\"\n    })]\n  });\n};\nvar animal = {\n  arete: '',\n  nombre: '',\n  sexo: '',\n  fecha: new Date(),\n  raza: '',\n  color: '',\n  predio: ''\n};\n\nvar addAnimal = function addAnimal(animal) {\n  dispatch(createAnimal(animal));\n};\n\nexport var Ganado = function Ganado(_ref7) {\n  var navigation = _ref7.navigation;\n\n  var _React$useState19 = React.useState({\n    type: 'arete',\n    word: ''\n  }),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      key = _React$useState20[0],\n      setKey = _React$useState20[1];\n\n  var _React$useState21 = React.useState(animal),\n      _React$useState22 = _slicedToArray(_React$useState21, 2),\n      data = _React$useState22[0],\n      setData = _React$useState22[1];\n\n  var _React$useState23 = React.useState({}),\n      _React$useState24 = _slicedToArray(_React$useState23, 2),\n      errors = _React$useState24[0],\n      setErrors = _React$useState24[1];\n\n  var user = React.useContext(UserContext);\n  return _jsx(KeyboardAvoidingView, {\n    keyboardVerticalOffset: 100,\n    behavior: Platform.OS === \"ios\" ? \"height\" : \"\",\n    children: _jsxs(ScrollView, {\n      children: [_jsx(Box, {\n        alignItems: \"center\",\n        bg: \"#DEDDDA\",\n        rounded: \"lg\",\n        borderColor: \"#9A9996\",\n        borderWidth: 2,\n        children: _jsxs(FormControl, {\n          isInvalid: 'search' in errors,\n          children: [_jsx(FormControl.Label, {\n            children: \"Busqueda\"\n          }), _jsxs(Select, {\n            selectedValue: key.type,\n            onValueChange: function onValueChange(itemValue) {\n              return setKey(_objectSpread(_objectSpread({}, key), {}, {\n                type: itemValue\n              }));\n            },\n            children: [_jsx(Select.Item, {\n              label: \"Nombre\",\n              value: \"nombre\"\n            }), _jsx(Select.Item, {\n              label: \"Arete\",\n              value: \"arete\"\n            })]\n          }), _jsx(Input, {\n            placeholder: key.type,\n            onChangeText: function onChangeText(value) {\n              return setkey(_objectSpread(_objectSpread({}, key), {}, {\n                word: value\n              }));\n            }\n          }), 'key' in errors ? _jsx(FormControl.ErrorMessage, {\n            _text: {\n              fontSize: 'xs',\n              color: 'error.500',\n              fontWeight: 500\n            },\n            children: errors.key\n          }) : _jsx(FormControl.HelperText, {\n            _text: {\n              fontSize: 'xs'\n            },\n            children: \"Diferenciar MAYUS de MINUS\"\n          }), _jsx(Button, {\n            colorScheme: \"teal\",\n            children: \"Buscar\"\n          })]\n        })\n      }), _jsx(Divider, {\n        my: 1\n      }), _jsxs(Box, {\n        children: [_jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isInvalid: 'arete' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Arete\"\n            }), _jsx(Input, {\n              placeholder: data.arete\n            }), 'arete' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.arete\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          })\n        }), _jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isInvalid: 'nombre' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Nombre\"\n            }), _jsx(Input, {\n              placeholder: data.nombre,\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  nombre: value\n                }));\n              }\n            }), 'nombre' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.nombre\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          })\n        }), _jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isInvalid: 'sexo' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Sexo\"\n            }), _jsxs(Radio.Group, {\n              name: \"sexo\",\n              accessibilityLabel: \"sexo\",\n              value: data.sexo,\n              onChange: function onChange(nextValue) {\n                setData(_objectSpread(_objectSpread({}, data), {}, {\n                  sexo: nextValue\n                }));\n              },\n              children: [_jsx(Radio, {\n                value: \"M\",\n                my: 1,\n                children: \"Masculino\"\n              }), _jsx(Radio, {\n                value: \"F\",\n                my: 1,\n                children: \"Femenino\"\n              })]\n            }), _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.sexo\n            })]\n          })\n        }), _jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isInvalid: 'fecha' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Fecha de nacimiento\"\n            }), _jsx(DateTimePicker, {\n              value: data.fecha,\n              onChange: function onChange(event, selectedDate) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  fecha: selectedDate\n                }));\n              }\n            }), _jsx(FormControl.ErrorMessage, {\n              children: errors.fecha\n            })]\n          })\n        }), _jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isInvalid: 'raza' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Raza\"\n            }), _jsx(Input, {\n              placeholder: data.raza,\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  raza: value\n                }));\n              }\n            }), 'raza' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.raza\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          })\n        }), _jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isInvalid: 'color' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Color\"\n            }), _jsx(Input, {\n              placeholder: data.color,\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  color: value\n                }));\n              }\n            }), 'color' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.color\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          })\n        }), _jsx(VStack, {\n          children: _jsxs(FormControl, {\n            isInvalid: 'predio' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Predio\"\n            }), _jsx(Input, {\n              placeholder: data.predio,\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  predio: value\n                }));\n              }\n            }), 'predio' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.predio\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          })\n        }), _jsxs(Center, {\n          children: [_jsx(Divider, {\n            my: 1\n          }), _jsxs(Button.Group, {\n            children: [_jsx(Button, {\n              colorScheme: \"success\",\n              children: \"Crear\"\n            }), _jsx(Button, {\n              colorScheme: \"warning\",\n              children: \"Actualizar\"\n            }), _jsx(Button, {\n              colorScheme: \"danger\",\n              children: \"Eliminar\"\n            })]\n          })]\n        }), _jsx(Divider, {\n          my: 2\n        }), _jsxs(Button.Group, {\n          colorScheme: \"info\",\n          direction: \"column\",\n          variant: \"outline\",\n          children: [_jsx(Button, {\n            children: \"Registro de vacunaci\\xF3n\"\n          }), _jsx(Button, {\n            children: \"Control Reproductivo\"\n          }), _jsx(Button, {\n            children: \"Historial de pesajes\"\n          }), _jsx(Button, {\n            children: \"Control Sanitario\"\n          })]\n        })]\n      })]\n    })\n  });\n};\nvar vacuna = {\n  codigo: '',\n  nombre: '',\n  fecha: new Date()\n};\nexport var Vacunas = function Vacunas(_ref8) {\n  var navigation = _ref8.navigation;\n\n  var _React$useState25 = React.useState({\n    type: 'nombre',\n    word: ''\n  }),\n      _React$useState26 = _slicedToArray(_React$useState25, 2),\n      key = _React$useState26[0],\n      setKey = _React$useState26[1];\n\n  var _React$useState27 = React.useState(vacuna),\n      _React$useState28 = _slicedToArray(_React$useState27, 2),\n      data = _React$useState28[0],\n      setData = _React$useState28[1];\n\n  var _React$useState29 = React.useState({}),\n      _React$useState30 = _slicedToArray(_React$useState29, 2),\n      errors = _React$useState30[0],\n      setErrors = _React$useState30[1];\n\n  var user = React.useContext(UserContext);\n  return _jsxs(ScrollView, {\n    children: [_jsxs(Box, {\n      bg: \"#DEDDDA\",\n      rounded: \"lg\",\n      borderColor: \"#9A9996\",\n      borderWidth: 2,\n      children: [_jsxs(FormControl, {\n        children: [_jsx(FormControl.Label, {\n          children: \"Busqueda\"\n        }), _jsxs(Select, {\n          selectedValue: key.type,\n          placeholder: key.type,\n          mt: 1,\n          onValueChange: function onValueChange(itemValue) {\n            return setKey(_objectSpread(_objectSpread({}, key), {}, {\n              type: itemValue\n            }));\n          },\n          children: [_jsx(Select.Item, {\n            label: \"Nombre\",\n            value: \"nombre\"\n          }), _jsx(Select.Item, {\n            label: \"Codigo\",\n            value: \"codigo\"\n          })]\n        }), _jsx(Input, {\n          placeholder: key.type,\n          onChangeText: function onChangeText(value) {\n            return setkey(_objectSpread(_objectSpread({}, key), {}, {\n              word: value\n            }));\n          }\n        }), 'key' in errors ? _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.key\n        }) : _jsx(FormControl.HelperText, {\n          _text: {\n            fontSize: 'xs'\n          },\n          children: \"Diferenciar MAYUS de MINUS\"\n        })]\n      }), _jsx(Button, {\n        colorScheme: \"teal\",\n        children: \"Buscar\"\n      })]\n    }), _jsx(VStack, {\n      children: _jsxs(FormControl, {\n        isInvalid: 'codigo' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Codigo\"\n        }), _jsx(Input, {\n          placeholder: \"Codigo\",\n          onChangeText: function onChangeText(value) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              codigo: value\n            }));\n          }\n        })]\n      })\n    }), _jsx(VStack, {\n      children: _jsxs(FormControl, {\n        isInvalid: 'nombre' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Nombre\"\n        }), _jsx(Input, {\n          placeholder: \"Nombre\",\n          onChangeText: function onChangeText(value) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              nombre: value\n            }));\n          }\n        })]\n      })\n    }), _jsx(VStack, {\n      children: _jsxs(FormControl, {\n        isInvalid: 'fecha' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Fecha de aplicaci\\xF3n\"\n        }), _jsx(DateTimePicker, {\n          value: data.fecha,\n          onChange: function onChange(event, currentDate) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              fecha: currentDate\n            }));\n          }\n        }), _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.fecha\n        })]\n      })\n    }), _jsx(Button, {\n      colorScheme: \"info\",\n      variant: \"outline\",\n      children: \"Ver hato vacunado\"\n    }), _jsx(Divider, {\n      my: 1\n    }), _jsx(Center, {\n      children: _jsxs(Button.Group, {\n        children: [_jsx(Button, {\n          colorScheme: \"success\",\n          children: \"Crear\"\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        }), _jsx(Button, {\n          colorScheme: \"danger\",\n          children: \"Borrar\"\n        })]\n      })\n    })]\n  });\n};\nvar ctlSanitario = {\n  codigo: '',\n  nombre: '',\n  fecha: new Date()\n};\nexport var ControlSan = function ControlSan(_ref9) {\n  var navigation = _ref9.navigation;\n\n  var _React$useState31 = React.useState({\n    type: 'nombre',\n    word: ''\n  }),\n      _React$useState32 = _slicedToArray(_React$useState31, 2),\n      key = _React$useState32[0],\n      setKey = _React$useState32[1];\n\n  var _React$useState33 = React.useState(ctlSanitario),\n      _React$useState34 = _slicedToArray(_React$useState33, 2),\n      data = _React$useState34[0],\n      setData = _React$useState34[1];\n\n  var _React$useState35 = React.useState({}),\n      _React$useState36 = _slicedToArray(_React$useState35, 2),\n      errors = _React$useState36[0],\n      setErrors = _React$useState36[1];\n\n  var user = React.useContext(UserContext);\n  return _jsxs(ScrollView, {\n    children: [_jsxs(Box, {\n      bg: \"#DEDDDA\",\n      rounded: \"lg\",\n      borderColor: \"#9A9996\",\n      borderWidth: 2,\n      children: [_jsxs(FormControl, {\n        children: [_jsx(FormControl.Label, {\n          children: \"Busqueda\"\n        }), _jsxs(Select, {\n          selectedValue: key.type,\n          placeholder: key.type,\n          mt: 1,\n          onValueChange: function onValueChange(itemValue) {\n            return setKey(_objectSpread(_objectSpread({}, key), {}, {\n              type: itemValue\n            }));\n          },\n          children: [_jsx(Select.Item, {\n            label: \"Nombre\",\n            value: \"nombre\"\n          }), _jsx(Select.Item, {\n            label: \"Codigo\",\n            value: \"codigo\"\n          })]\n        }), _jsx(Input, {\n          placeholder: key.type,\n          onChangeText: function onChangeText(value) {\n            return setKey(_objectSpread(_objectSpread({}, key), {}, {\n              word: value\n            }));\n          }\n        })]\n      }), _jsx(Button, {\n        colorScheme: \"teal\",\n        children: \"Buscar\"\n      })]\n    }), _jsxs(Box, {\n      children: [_jsx(VStack, {\n        children: _jsxs(FormControl, {\n          isInvalid: 'codigo' in errors,\n          children: [_jsx(FormControl.Label, {\n            children: \"Codigo\"\n          }), _jsx(Input, {\n            placeholder: \"Codigo\",\n            onChangeText: function onChangeText(value) {\n              return setData(_objectSpread(_objectSpread({}, data), {}, {\n                codigo: value\n              }));\n            }\n          })]\n        })\n      }), _jsx(VStack, {\n        children: _jsxs(FormControl, {\n          isInvalid: 'nombre' in errors,\n          children: [_jsx(FormControl.Label, {\n            children: \"Nombre\"\n          }), _jsx(Input, {\n            placeholder: \"Nombre\",\n            onChangeText: function onChangeText(value) {\n              return setData(_objectSpread(_objectSpread({}, data), {}, {\n                nombre: value\n              }));\n            }\n          })]\n        })\n      }), _jsx(VStack, {\n        children: _jsxs(FormControl, {\n          isInvalid: 'fecha' in errors,\n          children: [_jsx(FormControl.Label, {\n            children: \"Fecha de aplicaci\\xF3n\"\n          }), _jsx(DateTimePicker, {\n            value: data.fecha,\n            onChange: function onChange(evente, currentDate) {\n              return setData(_objectSpread(_objectSpread({}, data), {}, {\n                fecha: currentDate\n              }));\n            }\n          }), _jsx(FormControl.ErrorMessage, {\n            _text: {\n              fontSize: 'xs',\n              color: 'error.500',\n              fontWeight: 500\n            },\n            children: errors.fecha\n          })]\n        })\n      }), _jsx(Button, {\n        colorScheme: \"info\",\n        variant: \"outline\",\n        children: \"Listar hato\"\n      }), _jsx(Divider, {\n        my: 1\n      }), _jsx(Center, {\n        children: _jsxs(Button.Group, {\n          children: [_jsx(Button, {\n            colorScheme: \"success\",\n            children: \"Crear\"\n          }), _jsx(Button, {\n            colorScheme: \"warning\",\n            children: \"Actualizar\"\n          }), _jsx(Button, {\n            colorScheme: \"danger\",\n            children: \"Borrar\"\n          })]\n        })\n      })]\n    })]\n  });\n};\nvar embarazo = {\n  codigo: '',\n  inicio: new Date(),\n  fin: new Date()\n};\nexport var ControlRep = function ControlRep(_ref10) {\n  var navigation = _ref10.navigation;\n\n  var _React$useState37 = React.useState({\n    type: 'codigo',\n    word: ''\n  }),\n      _React$useState38 = _slicedToArray(_React$useState37, 2),\n      key = _React$useState38[0],\n      setKey = _React$useState38[1];\n\n  var _React$useState39 = React.useState(embarazo),\n      _React$useState40 = _slicedToArray(_React$useState39, 2),\n      data = _React$useState40[0],\n      setData = _React$useState40[1];\n\n  var _React$useState41 = React.useState({}),\n      _React$useState42 = _slicedToArray(_React$useState41, 2),\n      errors = _React$useState42[0],\n      setErrors = _React$useState42[1];\n\n  var user = React.useContext(UserContext);\n  return _jsxs(ScrollView, {\n    children: [_jsxs(Box, {\n      bg: \"#DEDDDA\",\n      rounded: \"lg\",\n      borderColor: \"#9A9996\",\n      borderWidth: 2,\n      children: [_jsxs(FormControl, {\n        children: [_jsx(FormControl.Label, {\n          children: \"Busqueda\"\n        }), _jsxs(Select, {\n          selectedValue: key.type,\n          placeholder: \"Busqueda\",\n          mt: 1,\n          onValueChange: function onValueChange(itemValue) {\n            return setKey(_objectSpread(_objectSpread({}, key), {}, {\n              type: itemValue\n            }));\n          },\n          children: [_jsx(Select.Item, {\n            label: \"Codigo\",\n            value: \"codigo\"\n          }), _jsx(Select.Item, {\n            label: \"Fecha\",\n            value: \"fecha\"\n          })]\n        }), _jsx(Input, {\n          placeholder: key.type,\n          onChangeText: function onChangeText(value) {\n            return setkey(_objectSpread(_objectSpread({}, key), {}, {\n              word: value\n            }));\n          }\n        }), 'key' in errors ? _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.key\n        }) : _jsx(FormControl.HelperText, {\n          _text: {\n            fontSize: 'xs'\n          },\n          children: \"Diferenciar MAYUS de MINUS\"\n        })]\n      }), _jsx(Button, {\n        colorScheme: \"teal\",\n        children: \"Buscar\"\n      })]\n    }), _jsx(VStack, {\n      children: _jsxs(FormControl, {\n        isInvalid: 'codigo' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Codigo\"\n        }), _jsx(Input, {\n          value: data.codigo,\n          onChangeText: function onChangeText(value) {\n            setData(_objectSpread(_objectSpread({}, data), {}, {\n              codigo: value\n            }));\n          }\n        }), _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.codigo\n        })]\n      })\n    }), _jsx(VStack, {\n      children: _jsxs(FormControl, {\n        isInvalid: 'inicio' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Fecha de inicio\"\n        }), _jsx(DateTimePicker, {\n          value: data.inicio,\n          onChange: function onChange(event, currentDate) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              inicio: currentDate\n            }));\n          }\n        }), _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.inicio\n        })]\n      })\n    }), _jsx(VStack, {\n      children: _jsxs(FormControl, {\n        isInvalid: 'fin' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Fecha de fin\"\n        }), _jsx(DateTimePicker, {\n          value: data.fin,\n          onChange: function onChange(event, currentDate) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              fin: currentDate\n            }));\n          }\n        }), _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.fin\n        })]\n      })\n    }), _jsx(Center, {\n      children: _jsxs(Button.Group, {\n        children: [_jsx(Button, {\n          colorScheme: \"success\",\n          children: \"Crear\"\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        }), _jsx(Button, {\n          colorScheme: \"danger\",\n          children: \"Borrar\"\n        })]\n      })\n    })]\n  });\n};\nvar peso = {\n  codigo: '',\n  arete: '',\n  fecha: new Date(),\n  kg: 0.0\n};\nexport var Pesaje = function Pesaje(_ref11) {\n  var navigation = _ref11.navigation;\n\n  var _React$useState43 = React.useState({\n    type: 'Peso',\n    word: ''\n  }),\n      _React$useState44 = _slicedToArray(_React$useState43, 2),\n      key = _React$useState44[0],\n      setKey = _React$useState44[1];\n\n  var _React$useState45 = React.useState(peso),\n      _React$useState46 = _slicedToArray(_React$useState45, 2),\n      data = _React$useState46[0],\n      setData = _React$useState46[1];\n\n  var _React$useState47 = React.useState({}),\n      _React$useState48 = _slicedToArray(_React$useState47, 2),\n      errors = _React$useState48[0],\n      setErrors = _React$useState48[1];\n\n  var user = React.useContext(UserContext);\n  return _jsx(KeyboardAvoidingView, {\n    keyboardVerticalOffset: 100,\n    behavior: Platform.OS === \"ios\" ? \"height\" : \"\",\n    children: _jsxs(ScrollView, {\n      children: [_jsxs(Box, {\n        bg: \"#DEDDDA\",\n        rounded: \"lg\",\n        borderColor: \"#9A9996\",\n        borderWidth: 2,\n        children: [_jsxs(FormControl, {\n          children: [_jsx(FormControl.Label, {\n            children: \"Busqueda\"\n          }), _jsxs(Select, {\n            selectedValue: key.type,\n            placeholder: key.type,\n            onValueChange: function onValueChange(itemValue) {\n              return setKey(_objectSpread(_objectSpread({}, key), {}, {\n                type: itemValue\n              }));\n            },\n            children: [_jsx(Select.Item, {\n              label: \"Peso\",\n              value: \"peso\"\n            }), _jsx(Select.Item, {\n              label: \"Fecha\",\n              value: \"fecha\"\n            })]\n          }), _jsx(Input, {\n            placeholder: key.type,\n            onChangeText: function onChangeText(value) {\n              return setkey(_objectSpread(_objectSpread({}, key), {}, {\n                word: value\n              }));\n            }\n          }), 'key' in errors ? _jsx(FormControl.ErrorMessage, {\n            _text: {\n              fontSize: 'xs',\n              color: 'error.500',\n              fontWeight: 500\n            },\n            children: errors.key\n          }) : _jsx(FormControl.HelperText, {\n            _text: {\n              fontSize: 'xs'\n            },\n            children: \"Diferenciar MAYUS de MINUS\"\n          })]\n        }), _jsx(Button, {\n          colorScheme: \"teal\",\n          children: \"Buscar\"\n        })]\n      }), _jsx(VStack, {\n        children: _jsxs(FormControl, {\n          isInvalid: 'codigo' in errors,\n          children: [_jsx(FormControl.Label, {\n            children: \"Codigo\"\n          }), _jsx(Input, {\n            value: data.codigo,\n            onChangeText: function onChangeText(value) {\n              return setData(_objectSpread(_objectSpread({}, data), {}, {\n                codigo: value\n              }));\n            }\n          })]\n        })\n      }), _jsx(VStack, {\n        children: _jsxs(FormControl, {\n          isInvalid: 'arete' in errors,\n          children: [_jsx(FormControl.Label, {\n            children: \"Arete\"\n          }), _jsx(Input, {\n            placeholder: \"Arete\",\n            onChangeText: function onChangeText(value) {\n              return setData(_objectSpread(_objectSpread({}, data), {}, {\n                arete: value\n              }));\n            }\n          })]\n        })\n      }), _jsx(VStack, {\n        children: _jsxs(FormControl, {\n          isInvalid: 'fecha' in errors,\n          children: [_jsx(FormControl.Label, {\n            children: \"Fecha\"\n          }), _jsx(DateTimePicker, {\n            value: data.fecha,\n            onChange: function onChange(event, currentDate) {\n              return setData(_objectSpread(_objectSpread({}, data), {}, {\n                fecha: currentDate\n              }));\n            }\n          }), _jsx(FormControl.ErrorMessage, {\n            _text: {\n              fontSize: 'xs',\n              color: 'error.500',\n              fontWeight: 500\n            },\n            children: errors.fecha\n          })]\n        })\n      }), _jsx(VStack, {\n        children: _jsxs(FormControl, {\n          isInvalid: 'peso' in errors,\n          children: [_jsx(FormControl.Label, {\n            children: \"Peso\"\n          }), _jsx(Input, {\n            placeholder: \"Peso\",\n            keyboardType: \"numeric\",\n            onChangeText: function onChangeText(value) {\n              return setData(_objectSpread(_objectSpread({}, data), {}, {\n                peso: value\n              }));\n            }\n          })]\n        })\n      }), _jsx(Center, {\n        children: _jsxs(Button.Group, {\n          children: [_jsx(Button, {\n            colorScheme: \"success\",\n            children: \"Crear\"\n          }), _jsx(Button, {\n            colorScheme: \"warning\",\n            children: \"Actualizar\"\n          }), _jsx(Button, {\n            colorScheme: \"danger\",\n            children: \"Borrar\"\n          })]\n        })\n      })]\n    })\n  });\n};\nvar predio = {\n  nombre: '',\n  extension: 0.0,\n  agua: false,\n  pasto: false\n};\nexport var Predio = function Predio(_ref12) {\n  var navitagion = _ref12.navitagion;\n\n  var _React$useState49 = React.useState({\n    type: 'nombre',\n    word: ''\n  }),\n      _React$useState50 = _slicedToArray(_React$useState49, 2),\n      key = _React$useState50[0],\n      setKey = _React$useState50[1];\n\n  var _React$useState51 = React.useState(predio),\n      _React$useState52 = _slicedToArray(_React$useState51, 2),\n      data = _React$useState52[0],\n      setData = _React$useState52[1];\n\n  var _React$useState53 = React.useState({}),\n      _React$useState54 = _slicedToArray(_React$useState53, 2),\n      errors = _React$useState54[0],\n      setErrors = _React$useState54[1];\n\n  var user = React.useContext(UserContext);\n  return _jsxs(ScrollView, {\n    children: [_jsxs(Box, {\n      bg: \"#DEDDDA\",\n      rounded: \"lg\",\n      borderColor: \"#9A9996\",\n      borderWidth: 2,\n      children: [_jsxs(FormControl, {\n        children: [_jsx(FormControl.Label, {\n          children: \"Busqueda\"\n        }), _jsx(Input, {\n          placeholder: key.type,\n          onChangeText: function onChangeText(value) {\n            return setkey(_objectSpread(_objectSpread({}, key), {}, {\n              word: value\n            }));\n          }\n        }), 'key' in errors ? _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.key\n        }) : _jsx(FormControl.HelperText, {\n          _text: {\n            fontSize: 'xs'\n          },\n          children: \"Diferenciar MAYUS de MINUS\"\n        })]\n      }), _jsx(Button, {\n        colorScheme: \"teal\",\n        children: \"Buscar\"\n      })]\n    }), _jsx(VStack, {\n      children: _jsxs(FormControl, {\n        isInvalid: 'nombre' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Nombre\"\n        }), _jsx(Input, {\n          placeholder: \"Nombre\",\n          onChangeText: function onChangeText(value) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              nombre: value\n            }));\n          }\n        })]\n      })\n    }), _jsx(VStack, {\n      children: _jsxs(FormControl, {\n        isInvalid: 'extension' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Extension \"\n        }), _jsx(Input, {\n          placeholder: \"Extension en hectareas\",\n          onChangeText: function onChangeText(value) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              extension: value\n            }));\n          },\n          keyboardType: \"numeric\"\n        })]\n      })\n    }), _jsx(Divider, {\n      my: 1\n    }), _jsx(Checkbox, {\n      value: data.agua,\n      size: \"md\",\n      onChange: function onChange(value) {\n        return setData(_objectSpread(_objectSpread({}, data), {}, {\n          agua: value\n        }));\n      },\n      children: \"Disponibilidad de agua\"\n    }), _jsx(Divider, {\n      my: 1\n    }), _jsx(Checkbox, {\n      value: data.pasto,\n      size: \"md\",\n      onChange: function onChange(value) {\n        return setData(_objectSpread(_objectSpread({}, data), {}, {\n          pasto: value\n        }));\n      },\n      children: \"Disponibilidad de pasto\"\n    }), _jsx(Divider, {\n      my: 1\n    }), _jsx(Button, {\n      colorScheme: \"info\",\n      variant: \"outline\",\n      children: \"Listar hato en el predio\"\n    }), _jsx(Divider, {\n      my: 1\n    }), _jsx(Center, {\n      children: _jsxs(Button.Group, {\n        children: [_jsx(Button, {\n          colorScheme: \"success\",\n          children: \"Crear\"\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        }), _jsx(Button, {\n          colorScheme: \"danger\",\n          children: \"Borrar\"\n        })]\n      })\n    })]\n  });\n};\nexport var newEmbarque = function newEmbarque(_ref13) {\n  var navigation = _ref13.navigation;\n\n  var _React$useState55 = React.useState({\n    type: 'pesos',\n    vehicles: 0,\n    units: 0\n  }),\n      _React$useState56 = _slicedToArray(_React$useState55, 2),\n      data = _React$useState56[0],\n      setData = _React$useState56[1];\n\n  var _React$useState57 = React.useState(false),\n      _React$useState58 = _slicedToArray(_React$useState57, 2),\n      getUnits = _React$useState58[0],\n      setUnits = _React$useState58[1];\n\n  var handleCrear = function handleCrear() {\n    switch (data.type) {\n      case 'pesos':\n        navigation.navigate('setEmbarque', {\n          nUnits: data.units,\n          nVehicles: data.vehicles\n        });\n        break;\n\n      case 'nombre':\n        navigation.navigate('setEmbarque', {\n          nUnits: 0,\n          nVehicles: data.vehicles\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return _jsxs(Box, {\n    bg: \"#DEDDDA\",\n    rounded: \"lg\",\n    borderColor: \"#9A9996\",\n    borderWidth: 2,\n    children: [_jsxs(FormControl, {\n      children: [_jsx(FormControl.Label, {\n        children: \"Tipo de embarque\"\n      }), _jsxs(Select, {\n        selectedValue: data.type,\n        mt: 1,\n        onValueChange: function onValueChange(itemValue) {\n          setData(_objectSpread(_objectSpread({}, data), {}, {\n            type: itemValue\n          }));\n          if (itemValue == 'nombre') setUnits(true);else setUnits(false);\n        },\n        children: [_jsx(Select.Item, {\n          label: \"Agregar por nombre\",\n          value: \"nombre\"\n        }), _jsx(Select.Item, {\n          label: \"Agregar pesos\",\n          value: \"pesos\"\n        })]\n      })]\n    }), _jsxs(FormControl, {\n      isDisabled: true,\n      children: [_jsx(FormControl.Label, {\n        children: \"Tama\\xF1o de embarque\"\n      }), _jsxs(Center, {\n        children: [_jsx(Text, {\n          children: data.units\n        }), _jsxs(Slider, {\n          defaultValue: data.units,\n          size: \"sm\",\n          colorScheme: \"white\",\n          maxValue: 500,\n          onChange: function onChange(value) {\n            setData(_objectSpread(_objectSpread({}, data), {}, {\n              units: value\n            }));\n          },\n          width: \"85%\",\n          children: [_jsx(Slider.Track, {\n            bg: \"white\",\n            children: _jsx(Slider.FilledTrack, {\n              bg: \"black\"\n            })\n          }), _jsx(Slider.Thumb, {\n            borderWidth: \"0\",\n            bg: \"transparent\",\n            children: _jsx(Icon, {\n              as: MaterialCommunityIcons,\n              name: \"cow\",\n              color: \"black\",\n              size: \"sm\"\n            })\n          })]\n        })]\n      })]\n    }), _jsxs(FormControl, {\n      children: [_jsx(FormControl.Label, {\n        children: \"N\\xFAmero de vehiculos\"\n      }), _jsxs(Center, {\n        children: [_jsx(Text, {\n          children: data.vehicles\n        }), _jsxs(Slider, {\n          defaultValue: data.units,\n          size: \"sm\",\n          colorScheme: \"white\",\n          maxValue: 50,\n          onChange: function onChange(value) {\n            setData(_objectSpread(_objectSpread({}, data), {}, {\n              vehicles: value\n            }));\n          },\n          width: \"85%\",\n          children: [_jsx(Slider.Track, {\n            bg: \"white\",\n            children: _jsx(Slider.FilledTrack, {\n              bg: \"black\"\n            })\n          }), _jsx(Slider.Thumb, {\n            borderWidth: \"0\",\n            bg: \"transparent\",\n            children: _jsx(Icon, {\n              as: MaterialCommunityIcons,\n              name: \"truck\",\n              color: \"black\",\n              size: \"sm\"\n            })\n          })]\n        })]\n      })]\n    }), _jsx(Divider, {\n      my: 2\n    }), _jsx(Button, {\n      colorScheme: \"success\",\n      onPress: handleCrear,\n      children: \"Crear Embarque\"\n    })]\n  });\n};\nexport var setEmbarque = function setEmbarque(_ref14) {\n  var route = _ref14.route,\n      navigation = _ref14.navigation;\n  var _route$params = route.params,\n      nUnits = _route$params.nUnits,\n      nVehicles = _route$params.nVehicles;\n\n  var _React$useState59 = React.useState(true),\n      _React$useState60 = _slicedToArray(_React$useState59, 2),\n      show = _React$useState60[0],\n      setShow = _React$useState60[1];\n\n  var _React$useState61 = React.useState({\n    vehiclesInputs: []\n  }),\n      _React$useState62 = _slicedToArray(_React$useState61, 2),\n      vehicles = _React$useState62[0],\n      setVehicles = _React$useState62[1];\n\n  var _React$useState63 = React.useState({\n    unitInputs: []\n  }),\n      _React$useState64 = _slicedToArray(_React$useState63, 2),\n      units = _React$useState64[0],\n      setUnits = _React$useState64[1];\n\n  var iUnits = [];\n  var iVehicles = [];\n\n  for (var i = 0; i < nVehicles; i++) {\n    iVehicles.push(i);\n  }\n\n  if (nUnits > 0) {\n    for (var i = 0; i < nUnits; i++) {\n      iUnits.push(i);\n    }\n  } else {}\n\n  var setVehiculsInputs = function setVehiculsInputs(value, index) {\n    var vehiclesInputs = vehicles.vehiclesInputs;\n    vehiclesInputs[index] = value;\n    setVehicles({\n      vehiclesInputs: vehiclesInputs\n    });\n  };\n\n  var setUnitsInputs = function setUnitsInputs(value, index) {\n    var unitInputs = vehicles.unitInputs;\n    unitInputs[index] = value;\n    setUnits({\n      unitInputs: unitInputs\n    });\n  };\n\n  return _jsx(KeyboardAvoidingView, {\n    keyboardVerticalOffset: 100,\n    behavior: Platform.OS === \"ios\" ? \"height\" : \"\",\n    children: _jsxs(Box, {\n      children: [_jsx(Collapse, {\n        isOpen: show,\n        children: _jsx(Alert, {\n          variant: \"outline\",\n          children: _jsxs(HStack, {\n            alignItems: \"center\",\n            children: [_jsx(Text, {\n              fontSize: \"md\",\n              children: \"Utilizar la misma unidad de medida.\"\n            }), _jsx(IconButton, {\n              icon: _jsx(CloseIcon, {\n                size: \"3\",\n                color: \"coolGray.600\"\n              }),\n              onPress: function onPress() {\n                return setShow(false);\n              }\n            })]\n          })\n        })\n      }), _jsxs(Box, {\n        maxH: \"92%\",\n        children: [_jsx(Heading, {\n          children: \"Vehiculos\"\n        }), _jsx(FlatList, {\n          data: iVehicles,\n          renderItem: function renderItem(_ref15) {\n            var item = _ref15.item,\n                index = _ref15.index;\n            return _jsxs(VStack, {\n              children: [_jsx(Text, {\n                children: index + 1\n              }), _jsx(Input, {\n                placeholder: \"Capacidad\",\n                value: vehicles.vehiclesInputs[index],\n                onChangeText: function onChangeText(value) {\n                  setVehiculsInputs(value, index);\n                }\n              })]\n            });\n          },\n          keyExtractor: function keyExtractor(item) {\n            return item;\n          }\n        }), _jsx(Heading, {\n          children: \"Unidades embarcadas\"\n        }), _jsx(FlatList, {\n          data: iUnits,\n          renderItem: function renderItem(_ref16) {\n            var item = _ref16.item,\n                index = _ref16.index;\n            return _jsxs(VStack, {\n              children: [_jsx(Text, {\n                children: index + 1\n              }), _jsx(Input, {\n                placeholder: \"Peso\",\n                value: units.unitInputs[index],\n                onChangeText: function onChangeText(value) {\n                  setUnitsInputs(value, index);\n                }\n              })]\n            });\n          },\n          keyExtractor: function keyExtractor(item) {\n            return item;\n          }\n        })]\n      }), _jsx(Button, {\n        colorScheme: \"success\",\n        children: \"Optimizar embarque\"\n      })]\n    })\n  });\n};\nexport var getEmbarque = function getEmbarque(_ref17) {\n  var navigation = _ref17.navigation;\n};\nexport var setConfig = function setConfig(_ref18) {\n  var route = _ref18.route,\n      navigation = _ref18.navigation;\n  var _route$params2 = route.params,\n      type = _route$params2.type,\n      data = _route$params2.data;\n\n  var _React$useState65 = React.useState({}),\n      _React$useState66 = _slicedToArray(_React$useState65, 2),\n      ndata = _React$useState66[0],\n      setData = _React$useState66[1];\n\n  switch (type) {\n    case 'Usuario':\n      return _jsxs(Box, {\n        children: [_jsxs(FormControl, {\n          children: [_jsx(FormControl.Label, {\n            children: \"Establecer nuevo\"\n          }), _jsx(Input, {\n            placeholder: type,\n            value: ndata,\n            onChangeText: function onChangeText(value) {\n              return setData(value);\n            }\n          })]\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        })]\n      });\n      break;\n\n    case 'Nombre':\n      return _jsxs(Box, {\n        children: [_jsxs(FormControl, {\n          children: [_jsx(FormControl.Label, {\n            children: \"Establecer nuevo\"\n          }), _jsx(Input, {\n            placeholder: type,\n            value: ndata,\n            onChangeText: function onChangeText(value) {\n              return setData(value);\n            }\n          })]\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        })]\n      });\n      break;\n\n    case 'ContraseÃ±a':\n      var _React$useState67 = React.useState(''),\n          _React$useState68 = _slicedToArray(_React$useState67, 2),\n          cpass = _React$useState68[0],\n          setPass = _React$useState68[1];\n\n      return _jsxs(Box, {\n        children: [_jsxs(FormControl, {\n          children: [_jsx(FormControl.Label, {\n            children: \"Establecer nueva\"\n          }), _jsx(Input, {\n            placeholder: type,\n            type: \"password\",\n            value: ndata,\n            onChangeText: function onChangeText(value) {\n              return setData(value);\n            }\n          }), _jsx(Input, {\n            placeholder: \"Confirmar\",\n            type: \"password\",\n            value: cpass,\n            onChangeText: function onChangeText(value) {\n              return setPass(value);\n            }\n          })]\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        })]\n      });\n      break;\n\n    case 'DirecciÃ³n':\n      return _jsxs(Box, {\n        children: [_jsxs(FormControl, {\n          children: [_jsx(FormControl.Label, {\n            children: \"Establecer nueva\"\n          }), _jsx(Input, {\n            placeholder: type,\n            value: ndata,\n            onChangeText: function onChangeText(value) {\n              return setData(value);\n            }\n          })]\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        })]\n      });\n      break;\n\n    case 'TelÃ©fono':\n      return _jsxs(Box, {\n        children: [_jsxs(FormControl, {\n          children: [_jsx(FormControl.Label, {\n            children: \"Establecer nuevo\"\n          }), _jsx(Input, {\n            placeholder: type,\n            keyboardType: \"numeric\",\n            value: ndata,\n            onChangeText: function onChangeText(value) {\n              return setData(value);\n            }\n          })]\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        })]\n      });\n      break;\n  }\n};\nvar perfil = [{\n  type: 'Usuario',\n  data: 'a'\n}, {\n  type: 'Nombre',\n  data: 'n'\n}, {\n  type: 'ContraseÃ±a',\n  data: ''\n}, {\n  type: 'DirecciÃ³n',\n  data: 's'\n}, {\n  type: 'TelÃ©fono',\n  data: 0\n}];\nexport var Configuracion = function Configuracion(_ref19) {\n  var navigation = _ref19.navigation;\n\n  var _React$useState69 = React.useState(perfil),\n      _React$useState70 = _slicedToArray(_React$useState69, 2),\n      params = _React$useState70[0],\n      setParams = _React$useState70[1];\n\n  var _React$useState71 = React.useState({}),\n      _React$useState72 = _slicedToArray(_React$useState71, 2),\n      errors = _React$useState72[0],\n      setError = _React$useState72[1];\n\n  return _jsxs(Box, {\n    children: [_jsx(Box, {\n      bgColor: \"#DEDDDA\",\n      children: _jsx(Center, {\n        children: _jsx(Heading, {\n          size: \"sm\",\n          children: \"Actualizar datos\"\n        })\n      })\n    }), _jsx(FlatList, {\n      data: params,\n      renderItem: function renderItem(_ref20) {\n        var item = _ref20.item;\n        return _jsxs(VStack, {\n          children: [_jsx(Button, {\n            colorScheme: \"teal\",\n            variant: \"ghost\",\n            onPress: function onPress() {\n              navigation.navigate('setConfig', {\n                type: item.type,\n                data: item.data\n              });\n            },\n            children: item.type\n          }), _jsx(Text, {\n            children: item.data\n          }), _jsx(Divider, {\n            my: 1\n          })]\n        });\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item.type;\n      }\n    })]\n  });\n};","map":{"version":3,"sources":["/home/doncrow/miRancho/miRancho-React/screens.js"],"names":["React","Component","Button","NativeBaseProvider","Box","Input","FormControl","VStack","Checkbox","Link","Slider","Select","Radio","ScrollView","Divider","Center","Text","FlatList","Heading","Icon","KeyboardAvoidingView","Alert","IconButton","CloseIcon","Collapse","HStack","Modal","DateTimePicker","MaterialCommunityIcons","NetInfo","LogIn","navigation","useState","data","setData","errors","setError","getUser","console","log","user","pass","handleLogin","value","fontSize","color","fontWeight","navigate","SingIn","terms","setTerms","createUser","fetch","method","body","JSON","stringify","u","p","n","name","a","address","m","mail","response","json","verifyUser","verifyMail","URLSearchParams","then","text","info","catch","error","validForm","undefined","cpass","HandleRegister","isConnected","Platform","OS","phone","Terms","RecPass","newPass","setPass","cPass","setCpass","verMail","route","params","key","setKey","toString","animal","arete","nombre","sexo","fecha","Date","raza","predio","addAnimal","dispatch","createAnimal","Ganado","type","word","setErrors","useContext","UserContext","itemValue","setkey","nextValue","event","selectedDate","vacuna","codigo","Vacunas","currentDate","ctlSanitario","ControlSan","evente","embarazo","inicio","fin","ControlRep","peso","kg","Pesaje","extension","agua","pasto","Predio","navitagion","newEmbarque","vehicles","units","getUnits","setUnits","handleCrear","nUnits","nVehicles","setEmbarque","show","setShow","vehiclesInputs","setVehicles","unitInputs","iUnits","iVehicles","i","push","setVehiculsInputs","index","setUnitsInputs","item","getEmbarque","setConfig","ndata","perfil","Configuracion","setParams"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, NativeBaseProvider, Box, Input, FormControl, VStack, Checkbox, Link, Slider, Select, Radio, ScrollView, Divider, Center, Text, FlatList,Heading, Icon, KeyboardAvoidingView,Alert, IconButton, CloseIcon, Collapse, HStack, Modal} from 'native-base';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport NetInfo from \"@react-native-community/netinfo\";\nimport { Platform } from 'react-native';\n\n//import { useDispatch, useSelector } from 'react-redux';\n//const dispatch = useDispatch();\n// Navegacion de Inicio //\n\n//Screen LogIn\nexport const LogIn = ({navigation}) => {\n    const [data, setData] = React.useState({});\n    const [errors, setError] = React.useState({});\n    \n    const getUser = async () => {\n        console.log(data.user,data.pass)\n        return data.user;\n    }\n    const handleLogin = () => {\n        \n    }\n   \n    return(\n        < Box justifyContent='center'  flex= {1}>\n            <VStack><FormControl isRequired isInvalid={'user' in errors}>\n                    <FormControl.Label>Nombre de Usuario</FormControl.Label>\n                    <Input \n                        placeholder='Usuario'\n                        onChangeText={(value) => setData({...data, user:value})}\n                    />\n                    {'user' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.user}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                \n            </FormControl></VStack>\n            <VStack>\n                <FormControl isRequired isInvalid={'pass' in errors}>\n                    <FormControl.Label>ContraseÃ±a</FormControl.Label>\n                    <Input \n                        placeholder='ContraseÃ±a'\n                        type = 'password'\n                        onChangeText={(value) => setData({...data, pass:value})}\n                    />\n                    {'pass' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.pass}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl>\n            </VStack>\n            <Button colorScheme='success' onPress={() => navigation.navigate('rancho')}>Entrar</Button>\n            <Divider my={3}/>\n            <Button colorScheme='teal' variant = 'outline' onPress={() => navigation.navigate('recPass')}>Olvide mi contraseÃ±a</Button>\n            <Button colorScheme='teal' variant = 'outline' onPress={() => navigation.navigate('singin')}>No tengo cuenta</Button>\n        </Box>\n    );\n}\n//Screen SignIn\nexport const SingIn = ({navigation}) => {\n    const [data, setData] = React.useState({});\n        // user,name,pass,cpass,address, mail, terms.\n    const [errors, setError] = React.useState({});\n    const [terms, setTerms] = React.useState(false)\n    const createUser = async () => {\n        try {\n            const response = await fetch(\n                'https://turancho.com.mx/request/cUser.php', \n                {\n                    method: 'POST',\n                    body: JSON.stringify(\n                        {\n                            u:data.user,\n                            p:data.pass,\n                            n:data.name,\n                            a:data.address,\n                            m:data.mail\n                        }\n                    )\n                }\n            );\n            const json = await response.json();\n            return json.user;\n        } catch (error) {\n            return false;\n        }\n    };\n    const verifyUser = async () => {\n        try {\n            const response = await fetch(\n                'https://turancho.com.mx/request/vUser.php', \n                {\n                    method: 'GET',\n                    body: JSON.stringify(\n                        {\n                            u:data.user\n                        }\n                    )\n                }\n            );\n            const json = await response.json();\n            return json;\n        } catch (error) {\n            return false;\n        }\n    };\n    const verifyMail = async () => {\n        console.log('Verificando correo')\n        fetch (\n                'https://turancho.com.mx/request/vMail.php'+ new URLSearchParams({m: data.mail}), \n                {\n                    method: 'GET',\n                }    \n            )\n            .then(response => response.text())\n            .then((info) => {\n                console.log(info);\n            })\n            .catch(error=> console.log(error))\n    }\n    function validForm () {\n        if (data.user === undefined) {\n            setError({...errors, user:'Se necesita usuario'})\n            return false;\n        }else\n            delete errors.user;\n        if (data.pass === undefined|| data.cpass === undefined ) {\n            setError({...errors, pass:'Se necesita contraseÃ±a'})\n            return false;\n        }else\n            delete errors.pass;\n        if (data.name === undefined) {\n            setError({...errors, name:'Se necesita el nombre'});\n            return false;\n        }else\n            delete errors.name\n        if (data.address === undefined) {\n            setError({...errors, address:'Se necesita domicilio'});\n            return false;\n        }else\n            delete errors.address\n        if (data.mail === undefined) {\n            setError({...errors, mail:'Se necesita cuenta de correo electrÃ³nico'});\n            return false;\n        }else\n            delete errors.mail\n        if (terms === undefined || terms == false) {\n            setError({...errors, terms:'Necesitas aceptar los tÃ©rminos y condiciones de uso'});\n            return false;\n        }else\n            delete errors.terms\n        if (data.pass != data.cpass){\n            setError({...errors, pass:'Las contraseÃ±as no coinciden'})\n            return false;\n        }else\n            delete errors.pass\n        return true;\n    }\n    const HandleRegister = () => {\n        if(validForm()){\n            NetInfo.fetch().then(isConnected => {\n                if (isConnected) {\n                    verifyMail()\n                           \n                }else\n                    console.log(\"No hay conexion\");\n                \n            }); \n        }else\n            console.log(\"no hay conexion\")\n    }\n    return (\n        <KeyboardAvoidingView behavior={Platform.OS === \"ios\" ? \"height\" : \"\", Platform.OS === 'web'? \"padding\":\"\"} keyboardVerticalOffset={100} >\n        <ScrollView>\n        <Box justifyContent='center'  flex= {1}>\n            <VStack><FormControl isRequired isInvalid={'user' in errors}>\n                <FormControl.Label>Nombre de Usuario (Se sugiere usar la CURP)</FormControl.Label>\n                <Input \n                    placeholder='Usuario'\n                    onChangeText={(value) => setData({...data, user:value})}\n                    maxLength={20}\n                />\n                {'user' in errors ?\n                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.user}</FormControl.ErrorMessage>:\n                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                }\n            </FormControl></VStack>\n\n            <VStack><FormControl isRequired isInvalid={'pass' in errors}>\n                <FormControl.Label>ContraseÃ±a</FormControl.Label>\n                <Input \n                    p={2} \n                    placeholder='ContraseÃ±a'\n                    onChangeText={(value) => setData({...data, pass:value})}\n                    type = 'password'\n                    \n                />\n                <Input\n                    p={2}\n                    placeholder='Confirmar contraseÃ±a'\n                    onChangeText={(value)=> {setData({...data, cpass:value})}}\n                    type = 'password'\n                />\n                {'pass' in errors ?\n                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.pass}</FormControl.ErrorMessage>:\n                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                }\n            </FormControl></VStack>\n            \n            <VStack><FormControl isRequired isInvalid={'name' in errors}>\n                <FormControl.Label>Nombre Completo</FormControl.Label>\n                <Input \n                    p={2} \n                    placeholder='Nombre'\n                    onChangeText={(value) => {setData({...data, name:value})}}\n                />\n                {'name' in errors ?\n                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.name}</FormControl.ErrorMessage>:\n                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Escriba nombre completo</FormControl.HelperText>\n                }\n            </FormControl></VStack>\n\n            <VStack><FormControl isRequired isInvalid={'address' in errors}>\n            <FormControl.Label>Domicilio</FormControl.Label>\n            <Input \n                p={2} \n                placeholder='Domicilio'\n                onChangeText={(value) => {setData( {...data,address:value})}}\n            />\n\n            {'address' in errors ?\n                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.address}</FormControl.ErrorMessage>:\n                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Agregue un domicilio</FormControl.HelperText>\n                }\n            </FormControl></VStack>\n            \n            <VStack><FormControl isRequired isInvalid={'mail' in errors}>\n                <FormControl.Label>Correo electrÃ³nico</FormControl.Label>\n                <Input \n                    p={2} \n                    keyboardType='email-address'\n                    placeholder='Correo'\n                    onChangeText={(value) => setData( {...data,mail:value})}\n                />\n                {'mail' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.phone}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                }\n            </FormControl></VStack>\n\n            <VStack><FormControl isRequired isInvalid={'terms' in errors}>\n                <Checkbox onChange={(value) => setTerms(value)}>\n                    Aceptar  \n                    <Link onPress={()=>navigation.navigate('terms')}> terminos y condiciones de uso</Link>\n                </Checkbox>\n                {'terms' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.terms}</FormControl.ErrorMessage>:\n                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Es necesario aceptar</FormControl.HelperText>\n                } \n            </FormControl></VStack>\n            <Divider my={2}/>\n            <Button colorScheme='success' onPress={HandleRegister}>Registrar</Button>\n        </Box>\n        </ScrollView>\n        </KeyboardAvoidingView>\n    );\n}\n//Screen Terms\nexport const Terms = ({navigation}) => {\n    return(\n        <NativeBaseProvider>\n            <Box>\n                Aqui estan los terminos y condiciones jeje\n            </Box>\n        </NativeBaseProvider>\n    );\n}\n//Screen recoverPass\nexport const RecPass = ({navigation}) => {\n    const [data,setData] = React.useState('');\n    return(\n        <Box>\n            <FormControl>\n                <FormControl.Label>Ingrese su usuario</FormControl.Label>\n                <Input placeholder = 'Usuario' value = {data} onChangeText= {(value)=>setData(value)}/>\n            </FormControl>\n            <Button colorScheme='success'>Restablecer contraseÃ±a</Button>\n        </Box>\n    );\n}\n//Screen newPass\nexport const newPass = ({navigation}) => {\n    const [pass,setPass] = React.useState('');\n    const [cPass,setCpass] = React.useState('');\n    return (\n        <Box>\n            \n        </Box>\n    );\n\n}\n \n//Screen verMail\nexport const verMail = ({route,navigation}) => {\n    const mail = route.params;\n    const [key, setKey] = React.useState('');\n\n    return(\n        <Box>\n            <Text>Ingrese el cÃ³digo de verificaciÃ³n enviado a:</Text>\n            <Text size='md' >{mail} </Text>\n            <Input \n                keyboardType='numeric'\n                value = {key.toString()}\n                onChangeText = {(value) => setKey(value)}\n            />\n            <Button colorScheme='success'>Enviar</Button>\n        </Box>\n    );\n}\n// Navegacion \"Rancho\" //\n\n//Screen Ganado\nvar animal = {\n    arete:'',\n    nombre:'',\n    sexo:'',\n    fecha:new Date(),\n    raza:'',\n    color:'',\n    predio:'',\n}\nconst addAnimal = (animal) => {\n    dispatch(createAnimal(animal))\n}\nexport const Ganado = ({navigation}) => {\n    const [key, setKey] = React.useState({type:'arete',word:''})\n    const [data,setData] = React.useState(animal)\n    const [errors, setErrors] = React.useState({})\n    const user = React.useContext(UserContext)\n    return (\n        <KeyboardAvoidingView keyboardVerticalOffset={100} behavior={Platform.OS === \"ios\" ? \"height\" : \"\"}>\n            <ScrollView >\n                <Box alignItems=\"center\" bg=\"#DEDDDA\" rounded=\"lg\" borderColor=\"#9A9996\" borderWidth={2}>\n                    <FormControl isInvalid={'search' in errors}>\n                        <FormControl.Label>Busqueda</FormControl.Label>\n                            <Select\n                                selectedValue={key.type}\n                                onValueChange={(itemValue) => setKey({...key, type:itemValue})}\n                            >\n                                <Select.Item label=\"Nombre\" value=\"nombre\" />\n                                <Select.Item label=\"Arete\" value=\"arete\" />\n                            </Select>\n                    \n                            <Input \n                                placeholder={key.type}\n                                onChangeText={(value) => setkey({...key, word:value})}\n                            />\n                            {'key' in errors ?\n                            <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.key}</FormControl.ErrorMessage>:\n                                <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                            }\n                            <Button colorScheme=\"teal\" >Buscar</Button>\n                    </FormControl>\n                </Box>\n                <Divider my={1} />\n\n           \n                <Box>\n                <VStack><FormControl isInvalid={'arete' in errors}>\n                    <FormControl.Label>Arete</FormControl.Label>\n                    <Input\n                        placeholder={data.arete}\n                        //onChangeText = {(value) => setData({...data, arete:value})}\n                    />\n                    {'arete' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.arete}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl></VStack>\n\n                <VStack><FormControl isInvalid={'nombre' in errors}>\n                    <FormControl.Label>Nombre</FormControl.Label>\n                    <Input\n                        placeholder={data.nombre}\n                        onChangeText = {(value) => setData({...data, nombre:value})}\n                    />\n                    {'nombre' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.nombre}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl></VStack>\n\n                <VStack><FormControl isInvalid={'sexo' in errors}>\n                    <FormControl.Label>Sexo</FormControl.Label>\n                        <Radio.Group\n\n                        name=\"sexo\"\n                        accessibilityLabel=\"sexo\"\n                        value={data.sexo}\n                        onChange={(nextValue) => {\n                            setData({...data, sexo:nextValue})\n                        }}\n                        >\n                            <Radio value=\"M\" my={1}>\n                                Masculino\n                            </Radio>\n                            <Radio value=\"F\" my={1}>\n                                Femenino\n                            </Radio>\n                        </Radio.Group>\n                        <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.sexo}</FormControl.ErrorMessage>\n                </FormControl></VStack>\n                \n                <VStack><FormControl isInvalid={'fecha' in errors}>\n                    <FormControl.Label>Fecha de nacimiento</FormControl.Label>\n                    <DateTimePicker value={data.fecha} onChange={(event, selectedDate) => setData({...data, fecha:selectedDate})} />\n                    <FormControl.ErrorMessage>{errors.fecha}</FormControl.ErrorMessage>\n                </FormControl></VStack>\n\n                <VStack><FormControl isInvalid={'raza' in errors}>\n                    <FormControl.Label>Raza</FormControl.Label>\n                    <Input\n                        placeholder={data.raza}\n                        onChangeText = {(value) => setData({...data, raza:value})}\n                    />\n                    {'raza' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.raza}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl></VStack>\n\n\n                <VStack><FormControl isInvalid={'color' in errors}>\n                    <FormControl.Label>Color</FormControl.Label>\n                    <Input\n                        placeholder={data.color}\n                        onChangeText = {(value) => setData({...data, color:value})}\n                    />\n                    {'color' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.color}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl></VStack>\n\n\n                <VStack><FormControl isInvalid={'predio' in errors}>\n                    <FormControl.Label>Predio</FormControl.Label>\n                    <Input\n                        placeholder={data.predio}\n                        onChangeText = {(value) => setData({...data, predio:value})}\n                    />\n                    {'predio' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.predio}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl></VStack>\n                \n                <Center>\n                \n                <Divider my={1}/>\n                <Button.Group > \n                    <Button colorScheme=\"success\">Crear</Button>\n                    <Button colorScheme=\"warning\">Actualizar</Button>\n                    <Button colorScheme=\"danger\">Eliminar</Button>\n                </Button.Group>\n                </Center>\n                <Divider my={2}/>\n                <Button.Group colorScheme=\"info\" direction=\"column\" variant=\"outline\">\n                    <Button >Registro de vacunaciÃ³n</Button>\n                    <Button >Control Reproductivo</Button>\n                    <Button >Historial de pesajes</Button>\n                    <Button >Control Sanitario</Button>\n                </Button.Group>\n                </Box>\n            </ScrollView>\n            </KeyboardAvoidingView>\n    );\n}\n//Screen Vacunas\nvar vacuna = {\n    codigo:'',\n    nombre:'',\n    fecha: new Date(),\n}\nexport const Vacunas = ({navigation }) => {\n    const [key, setKey] = React.useState({type:'nombre',word:''})\n    const [data,setData] = React.useState(vacuna)\n    const [errors, setErrors] = React.useState({})\n    const user = React.useContext(UserContext)\n    return (\n        <ScrollView>\n            <Box bg=\"#DEDDDA\" rounded=\"lg\" borderColor=\"#9A9996\" borderWidth={2}>\n                <FormControl>\n                    <FormControl.Label>Busqueda</FormControl.Label>\n                    <Select\n                        selectedValue={key.type}\n                        placeholder={key.type}\n                        mt={1}\n                        onValueChange={(itemValue) => setKey({...key, type:itemValue})}\n                    >   \n                        <Select.Item label=\"Nombre\" value=\"nombre\" />\n                        <Select.Item label=\"Codigo\" value=\"codigo\" />\n                    </Select>\n                \n                    <Input \n                        placeholder={key.type}\n                        onChangeText={(value) => setkey({...key, word:value})}\n                    />\n                    {'key' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.key}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl>\n                <Button colorScheme='teal'>Buscar</Button>\n            </Box>\n\n            <VStack><FormControl isInvalid={'codigo' in errors}>\n                <FormControl.Label>Codigo</FormControl.Label>\n                <Input\n                    placeholder='Codigo'\n                    onChangeText={(value) => setData({...data, codigo:value})}\n                />\n            </FormControl></VStack>\n\n            <VStack><FormControl isInvalid={'nombre' in errors}>\n                <FormControl.Label>Nombre</FormControl.Label>\n                <Input\n                    placeholder='Nombre'\n                    onChangeText={(value) => setData({...data, nombre:value})}\n                />\n            </FormControl></VStack>\n\n            <VStack><FormControl isInvalid={'fecha' in errors}>\n                <FormControl.Label>Fecha de aplicaciÃ³n</FormControl.Label>\n                <DateTimePicker value={data.fecha} onChange={(event,currentDate) => setData({...data, fecha:currentDate})} />\n                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.fecha}</FormControl.ErrorMessage>\n            </FormControl></VStack>\n            <Button colorScheme='info' variant='outline'>Ver hato vacunado</Button>\n            <Divider my={1}/>\n            <Center>\n                <Button.Group>\n                    <Button colorScheme='success'>Crear</Button>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                    <Button colorScheme='danger'>Borrar</Button>\n                </Button.Group>\n            </Center>\n            \n            \n        </ScrollView>\n    );\n\n}\n\n//Screen Sanitario\nvar ctlSanitario = {\n    codigo:'',\n    nombre:'',\n    fecha: new Date(),\n}\nexport const ControlSan = ({navigation}) =>{\n    const [key, setKey] = React.useState({type:'nombre',word:''})\n    const [data,setData] = React.useState(ctlSanitario)\n    const [errors, setErrors] = React.useState({})\n    const user = React.useContext(UserContext)\n    return (\n        <ScrollView>\n            <Box bg=\"#DEDDDA\" rounded=\"lg\" borderColor=\"#9A9996\" borderWidth={2}>\n                <FormControl>\n                    <FormControl.Label>Busqueda</FormControl.Label>\n                    <Select\n                        selectedValue={key.type}\n                        placeholder={key.type}\n                        mt={1}\n                        onValueChange={(itemValue) => setKey({...key, type:itemValue})}\n                    >\n                        <Select.Item label=\"Nombre\" value=\"nombre\" />\n                        <Select.Item label=\"Codigo\" value=\"codigo\" />\n                    </Select>\n                    <Input \n                        placeholder={key.type}\n                        onChangeText={(value) => setKey({...key, word:value})}\n                    />\n                </FormControl>\n                <Button colorScheme='teal'>Buscar</Button>\n            </Box>\n\n            <Box>\n                <VStack><FormControl isInvalid={'codigo' in errors}>\n                    <FormControl.Label>Codigo</FormControl.Label>\n                    <Input\n                        placeholder='Codigo'\n                        onChangeText={(value) => setData({...data, codigo:value})}\n                    />\n                </FormControl></VStack>\n                <VStack><FormControl isInvalid={'nombre' in errors}>\n                    <FormControl.Label>Nombre</FormControl.Label>\n                    <Input\n                        placeholder='Nombre'\n                        onChangeText={(value) => setData({...data, nombre:value})}\n                    />\n                </FormControl></VStack>\n                <VStack><FormControl isInvalid={'fecha' in errors}>\n                    <FormControl.Label>Fecha de aplicaciÃ³n</FormControl.Label>\n                    <DateTimePicker value={data.fecha} onChange={(evente,currentDate) => setData({...data, fecha:currentDate})} />\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.fecha}</FormControl.ErrorMessage>\n                </FormControl></VStack>\n                <Button colorScheme='info' variant='outline'>Listar hato</Button>\n                <Divider my={1}/>\n                <Center>\n                    <Button.Group>  \n                        <Button colorScheme='success'>Crear</Button>\n                        <Button colorScheme='warning'>Actualizar</Button>\n                        <Button colorScheme='danger'>Borrar</Button>\n                    </Button.Group>\n                </Center> \n                \n                \n            </Box>                       \n        </ScrollView>\n    );\n}\n\n//Screen Control Reproductivo\nvar embarazo = {\n    codigo:'',\n    inicio: new Date(),\n    fin: new Date(),\n}\nexport const ControlRep = ({navigation}) => {\n    const [key, setKey] = React.useState({type:'codigo',word:''})\n    const [data,setData] = React.useState(embarazo)\n    const [errors, setErrors] = React.useState({})\n    const user = React.useContext(UserContext)\n    return(\n        <ScrollView>\n            <Box bg=\"#DEDDDA\" rounded=\"lg\" borderColor=\"#9A9996\" borderWidth={2}>\n                <FormControl>\n                    <FormControl.Label>Busqueda</FormControl.Label>\n                    <Select\n                        selectedValue={key.type}\n                        placeholder=\"Busqueda\"\n                        mt={1}\n                        onValueChange={(itemValue) => setKey({...key, type:itemValue})}\n                    >\n                        <Select.Item label=\"Codigo\" value=\"codigo\" />\n                        <Select.Item label=\"Fecha\" value=\"fecha\" />\n                    </Select>\n                \n                    <Input \n                        placeholder={key.type}\n                        onChangeText={(value) => setkey({...key, word:value})}\n                    />\n                    {'key' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.key}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl>\n                <Button colorScheme='teal'>Buscar</Button>\n            </Box>\n\n            <VStack><FormControl isInvalid={'codigo' in errors}>\n                <FormControl.Label>Codigo</FormControl.Label>\n                <Input \n                    value={data.codigo}\n                    onChangeText={(value) => {setData({...data, codigo:value})}}\n        \n                />\n                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.codigo}</FormControl.ErrorMessage>\n            </FormControl></VStack>\n\n            <VStack><FormControl isInvalid={'inicio' in errors}>\n                <FormControl.Label>Fecha de inicio</FormControl.Label>\n                <DateTimePicker value={data.inicio} onChange={(event, currentDate) => setData({...data, inicio:currentDate})} />\n                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.inicio}</FormControl.ErrorMessage>\n            </FormControl></VStack>\n\n            <VStack><FormControl isInvalid={'fin' in errors}>\n                <FormControl.Label>Fecha de fin</FormControl.Label>\n                <DateTimePicker value={data.fin} onChange={(event, currentDate) => setData({...data, fin:currentDate})} />\n                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.fin}</FormControl.ErrorMessage>\n            </FormControl></VStack>\n            <Center>\n                <Button.Group>\n                    <Button colorScheme='success'>Crear</Button>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                    <Button colorScheme='danger'>Borrar</Button>\n                </Button.Group>\n            </Center>\n\n        </ScrollView>\n    );\n}\n\n//Screen Pesajes\n\nvar peso = {\n    codigo:'',\n    arete:'',\n    fecha: new Date(),\n    kg:0.0,\n}\nexport const Pesaje = ({navigation}) => {\n    const [key, setKey] = React.useState({type:'Peso',word:''})\n    const [data,setData] = React.useState(peso)\n    const [errors, setErrors] = React.useState({})\n    const user = React.useContext(UserContext)\n    return (\n        <KeyboardAvoidingView keyboardVerticalOffset={100} behavior={Platform.OS === \"ios\" ? \"height\" : \"\"}>\n        <ScrollView>\n            <Box bg=\"#DEDDDA\" rounded=\"lg\" borderColor=\"#9A9996\" borderWidth={2}>\n                <FormControl>\n                    <FormControl.Label>Busqueda</FormControl.Label>\n                    <Select\n                        selectedValue={key.type}\n                        placeholder={key.type}\n                        onValueChange={(itemValue) => setKey({...key, type:itemValue})}\n                    >\n                        <Select.Item label=\"Peso\" value=\"peso\" />\n                        <Select.Item label=\"Fecha\" value=\"fecha\" />\n                    </Select>\n                    <Input \n                        placeholder={key.type}\n                        onChangeText={(value) => setkey({...key, word:value})}\n                    />\n                    {'key' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.key}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl>\n                <Button colorScheme='teal'>Buscar</Button>\n            </Box>\n\n            <VStack><FormControl isInvalid={'codigo' in errors}>\n                <FormControl.Label>Codigo</FormControl.Label>\n                <Input value={data.codigo} onChangeText={(value)=>setData({...data, codigo:value})}/>\n            </FormControl></VStack>\n            <VStack><FormControl isInvalid={'arete' in errors}>\n                <FormControl.Label>Arete</FormControl.Label>\n                <Input\n                    placeholder='Arete'\n                    onChangeText={(value) => setData({...data, arete:value})}\n                />\n            </FormControl></VStack>\n            <VStack><FormControl isInvalid={'fecha' in errors}>\n                <FormControl.Label>Fecha</FormControl.Label>\n                <DateTimePicker value={data.fecha} onChange={(event,currentDate) => setData({...data, fecha:currentDate})} />\n                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.fecha}</FormControl.ErrorMessage>\n            </FormControl></VStack>\n            <VStack><FormControl isInvalid={'peso' in errors}>\n                <FormControl.Label>Peso</FormControl.Label>\n                <Input\n                    placeholder='Peso'\n                    keyboardType='numeric'\n                    onChangeText={(value) => setData({...data, peso:value})}\n                />\n            </FormControl></VStack>\n            <Center>\n            <Button.Group>\n                    <Button colorScheme='success'>Crear</Button>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                    <Button colorScheme='danger'>Borrar</Button>\n            </Button.Group>\n            </Center>\n\n        </ScrollView>\n        </KeyboardAvoidingView>\n    );\n}\n\n//Screen Predios\nvar predio = {\n    nombre:'',\n    extension: 0.0,\n    agua: false,\n    pasto: false,\n}\nexport const Predio = ( {navitagion}) => {\n    const [key, setKey] = React.useState({type:'nombre',word:''})\n    const [data,setData] = React.useState(predio)\n    const [errors, setErrors] = React.useState({})\n    const user = React.useContext(UserContext)\n    return (\n        <ScrollView>\n            <Box bg=\"#DEDDDA\" rounded=\"lg\" borderColor=\"#9A9996\" borderWidth={2}>\n                <FormControl>\n                    <FormControl.Label>Busqueda</FormControl.Label>\n                        <Input \n                            placeholder={key.type}\n                            onChangeText={(value) => setkey({...key, word:value})}\n                        />\n                        {'key' in errors ?\n                        <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.key}</FormControl.ErrorMessage>:\n                            <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                        }\n                </FormControl>\n                <Button colorScheme='teal'>Buscar</Button>\n            </Box>\n\n            <VStack><FormControl isInvalid={'nombre' in errors}>\n                <FormControl.Label>Nombre</FormControl.Label>\n                <Input\n                    placeholder='Nombre'\n                    onChangeText={(value) => setData({...data, nombre:value})}\n                />\n            </FormControl></VStack>\n            <VStack><FormControl isInvalid={'extension' in errors}>\n                <FormControl.Label>Extension </FormControl.Label>\n                <Input\n                    placeholder='Extension en hectareas'\n                    onChangeText={(value) => setData({...data, extension:value})}\n                    keyboardType='numeric'\n                />\n            </FormControl></VStack>\n            <Divider my={1}/>\n            <Checkbox value={data.agua} size='md' onChange={(value) => setData({...data, agua:value})}>Disponibilidad de agua</Checkbox>\n            <Divider my={1}/>\n            <Checkbox value={data.pasto} size='md' onChange={(value) => setData({...data, pasto:value})}>Disponibilidad de pasto</Checkbox>\n            <Divider my={1}/>\n            <Button colorScheme='info' variant='outline' >Listar hato en el predio</Button>\n            <Divider my={1}/>\n            <Center>\n                <Button.Group>\n                    <Button colorScheme='success'>Crear</Button>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                    <Button colorScheme='danger'>Borrar</Button>\n                </Button.Group>\n            </Center>\n\n        </ScrollView>\n    );\n}\n\n//Screens \"Embarques\"\nexport const newEmbarque = ({navigation}) => {\n    const [data,setData] = React.useState({type:'pesos',vehicles:0, units:0});\n    const [getUnits, setUnits] = React.useState(false);\n    const handleCrear = () => {\n        switch(data.type){\n            case 'pesos':\n                navigation.navigate('setEmbarque',{nUnits:data.units,nVehicles:data.vehicles});\n                break;\n            case 'nombre':\n                navigation.navigate('setEmbarque',{nUnits:0,nVehicles:data.vehicles});\n                break;\n            default:\n                break;\n        }\n    }\n    return(\n        <Box bg=\"#DEDDDA\" rounded=\"lg\" borderColor=\"#9A9996\" borderWidth={2}>\n            <FormControl>\n                <FormControl.Label>Tipo de embarque</FormControl.Label>\n                <Select\n                    selectedValue={data.type}\n                    mt={1}\n                    onValueChange={(itemValue) => {\n                        setData({...data, type:itemValue});\n                        if (itemValue=='nombre')\n                            setUnits(true);\n                        else\n                            setUnits(false);\n                    }}\n                >\n                    <Select.Item label=\"Agregar por nombre\" value=\"nombre\" />\n                    <Select.Item label=\"Agregar pesos\" value=\"pesos\" />\n                </Select>\n            </FormControl>\n            <FormControl isDisabled >\n                <FormControl.Label>TamaÃ±o de embarque</FormControl.Label>\n                <Center>\n                    <Text>{data.units}</Text>\n                    <Slider defaultValue={data.units} size=\"sm\" colorScheme=\"white\" maxValue={500} onChange={(value) => {setData({...data, units:value})}} width=\"85%\">\n                        <Slider.Track bg=\"white\">\n                        <Slider.FilledTrack bg=\"black\" />\n                        </Slider.Track>\n                        <Slider.Thumb borderWidth=\"0\" bg=\"transparent\">\n                        <Icon as={MaterialCommunityIcons} name=\"cow\" color=\"black\" size=\"sm\" />\n                        </Slider.Thumb>\n                    </Slider>\n                </Center>\n            </FormControl>\n\n            <FormControl>\n                <FormControl.Label>NÃºmero de vehiculos</FormControl.Label>\n                <Center>\n                    <Text>{data.vehicles}</Text>\n                    <Slider defaultValue={data.units} size=\"sm\" colorScheme=\"white\" maxValue={50}onChange={(value) => {setData({...data, vehicles:value})}} width=\"85%\">\n                        <Slider.Track bg=\"white\">\n                        <Slider.FilledTrack bg=\"black\" />\n                        </Slider.Track>\n                        <Slider.Thumb borderWidth=\"0\" bg=\"transparent\">\n                        <Icon as={MaterialCommunityIcons} name=\"truck\" color=\"black\" size=\"sm\" />\n                        </Slider.Thumb>\n                    </Slider>\n                </Center>\n            </FormControl>\n            \n            <Divider my={2}/>\n            <Button colorScheme=\"success\" onPress={handleCrear}>Crear Embarque</Button>\n        </Box>\n    );\n}\nexport const setEmbarque = ({route, navigation}) => {\n    const {nUnits, nVehicles} = route.params;\n    const [show, setShow] = React.useState(true)\n    const [vehicles, setVehicles] = React.useState({vehiclesInputs:[]});\n    const [units, setUnits] = React.useState({unitInputs:[]});\n    let  iUnits= [];\n    let iVehicles  = [] ;\n\n    for (var i=0; i<nVehicles; i++){\n        iVehicles.push(i);  \n    }\n\n    if (nUnits > 0){\n        for (var i=0; i<nUnits; i++){\n            iUnits.push(i);\n        }\n    }else{\n        //Cargar hato con su ultimo peso\n        //Seleccionar de lista\n        \n    }\n    const setVehiculsInputs = (value,index) => {\n        let { vehiclesInputs } = vehicles;\n        vehiclesInputs[index] = value;\n        setVehicles({\n            vehiclesInputs,\n        });\n    }\n    const setUnitsInputs = (value,index) => {\n        let { unitInputs } = vehicles;\n        unitInputs[index] = value;\n        setUnits({\n            unitInputs,\n        });\n    }\n    return(\n        <KeyboardAvoidingView keyboardVerticalOffset={100} behavior={Platform.OS === \"ios\" ? \"height\" : \"\"}>\n            <Box> \n                <Collapse isOpen={show}>\n                    <Alert variant='outline'>\n                      \n                        <HStack alignItems=\"center\">\n                        <Text  fontSize=\"md\">Utilizar la misma unidad de medida.</Text>\n\n                        <IconButton\n                            icon={<CloseIcon size='3' color=\"coolGray.600\" />}\n                            onPress={() => setShow(false)}\n                        />\n                        </HStack>\n                    </Alert>\n                </Collapse>\n                <Box maxH=\"92%\">\n                    <Heading>Vehiculos</Heading>\n                    <FlatList\n                        data={iVehicles}\n                        renderItem={({ item, index }) => (\n                            <VStack>\n                                <Text>{index+1}</Text>\n                                <Input placeholder='Capacidad' value={vehicles.vehiclesInputs[index]} onChangeText = {(value)=>{setVehiculsInputs(value,index)}} />\n                            </VStack>\n                        )}\n                        keyExtractor={item => item}\n                    />\n                    <Heading>Unidades embarcadas</Heading>\n                    <FlatList\n                        data={iUnits}\n                        renderItem={({ item, index }) => (\n                            <VStack>\n                                <Text>{index+1}</Text>\n                                <Input placeholder='Peso' value={units.unitInputs[index]} onChangeText = {(value)=>{setUnitsInputs(value,index)}} />\n                            </VStack>\n                        )}\n                        keyExtractor={item => item}\n                    />\n                </Box>\n                <Button colorScheme='success' >Optimizar embarque</Button>\n            </Box>\n        </KeyboardAvoidingView>\n    );\n\n}\n/*\n\n*/\nexport const getEmbarque = ({navigation}) => {\n\n}\n//Screen Configuracion\nexport const setConfig = ({route, navigation}) => {\n    const {type, data} = route.params;\n    const [ndata, setData] = React.useState({})\n    switch(type){\n        case 'Usuario':\n            return(\n                <Box>\n                    <FormControl>\n                        <FormControl.Label>Establecer nuevo</FormControl.Label>\n                        <Input placeholder = {type} value={ndata} onChangeText = {(value) => setData(value)}/>\n                    </FormControl>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                </Box>\n            );\n            break;\n        case 'Nombre':\n            return(\n                <Box>\n                    <FormControl>\n                        <FormControl.Label>Establecer nuevo</FormControl.Label>\n                        <Input placeholder = {type} value={ndata} onChangeText = {(value) => setData(value)}/>\n                    </FormControl>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                </Box>\n            );\n            break;\n        case 'ContraseÃ±a':\n            const [cpass, setPass] = React.useState('')\n            return(\n                <Box>\n                    <FormControl>\n                        <FormControl.Label>Establecer nueva</FormControl.Label>\n                        <Input placeholder = {type} type='password' value={ndata} onChangeText = {(value) => setData(value)}/>\n                        <Input placeholder = 'Confirmar' type='password' value={cpass} onChangeText = {(value) => setPass(value)}/>\n                    </FormControl>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                </Box>\n            );\n            break;\n        case 'DirecciÃ³n':\n            return(\n                <Box>\n                    <FormControl>\n                        <FormControl.Label>Establecer nueva</FormControl.Label>\n                        <Input placeholder = {type} value={ndata} onChangeText = {(value) => setData(value)}/>\n                    </FormControl>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                </Box>\n            );\n            break;\n        case 'TelÃ©fono':\n            return(\n                <Box>\n                    <FormControl>\n                        <FormControl.Label>Establecer nuevo</FormControl.Label>\n                        <Input placeholder = {type} keyboardType='numeric' value={ndata} onChangeText = {(value) => setData(value)}/>\n                    </FormControl>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                </Box>\n            );\n            break;\n    }\n}\nvar perfil = [\n    {type:'Usuario',data:'a'},\n    {type:'Nombre',data:'n'},\n    {type:'ContraseÃ±a',data:''},\n    {type:'DirecciÃ³n',data:'s'},\n    {type:'TelÃ©fono',data:0},\n]\nexport const Configuracion = ({navigation}) => {\n    //cargar perfil\n    const [params, setParams] = React.useState(perfil);\n        // user,name,pass,cpass,address, phone.\n    const [errors, setError] = React.useState({});\n \n    return (\n        <Box >\n            <Box bgColor='#DEDDDA'>\n                <Center>\n                    <Heading size='sm'>Actualizar datos</Heading>\n                </Center>\n            </Box>\n            <FlatList\n                data={params}\n                renderItem={({item}) => (\n                    <VStack>\n                        <Button colorScheme='teal' variant='ghost' onPress = {()=>{navigation.navigate('setConfig',{type:item.type, data:item.data})}}>{item.type}</Button>\n                        <Text>{item.data}</Text>\n                        <Divider my={1}/>\n                    </VStack>\n                    \n                )}\n                keyExtractor={(item) => item.type}\n            />\n        </Box>\n    );\n}"]},"metadata":{},"sourceType":"module"}