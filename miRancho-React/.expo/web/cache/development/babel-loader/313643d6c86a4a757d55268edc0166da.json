{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport { Button, NativeBaseProvider, Box, Input, FormControl, VStack, Checkbox, Link, Slider, Select, Radio, ScrollView, Divider, Center, Text, FlatList, Heading, Icon, KeyboardAvoidingView, Alert, IconButton, CloseIcon, Collapse, HStack, Modal, useToast, Pressable, View, AlertDialog, Spinner, SectionList } from 'native-base';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { MaterialCommunityIcons, Ionicons } from '@expo/vector-icons';\nimport NetInfo from \"@react-native-community/netinfo\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { SafeAreaViewBase } from \"react-native-web/dist/index\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as action from \"./ranchoActions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar api = '192.168.100.99/request/';\nexport var LogIn = function LogIn(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useDispatch();\n  var session = useSelector(function (state) {\n    return state.jwt;\n  });\n  var toast = useToast();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cntLogin = _React$useState2[0],\n      setCounter = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      data = _React$useState4[0],\n      setData = _React$useState4[1];\n\n  var _React$useState5 = React.useState({}),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      errors = _React$useState6[0],\n      setError = _React$useState6[1];\n\n  React.useEffect(function () {\n    if (session != false) {\n      navigation.navigate('getData');\n    }\n  }, []);\n\n  var HandleLogin = function HandleLogin() {\n    if (cntLogin > 10) toast.show({\n      title: 'Intente mas tarde',\n      status: 'error',\n      description: \"Demasiados intentos\"\n    });else NetInfo.fetch().then(function (state) {\n      if (state.isConnected) {\n        setCounter(cntLogin + 1);\n        dispatch(action.getSession(data.user, data.pass)).then(function (s) {\n          if (s) {\n            console.log(s);\n            navigation.navigate('getData');\n          } else toast.show({\n            title: 'Credenciales incorrectas',\n            status: 'warning',\n            description: \"Intente de nuevo\"\n          });\n        });\n      } else toast.show({\n        title: 'No hay conexi√≥n',\n        status: 'warning',\n        description: \"Intente mas tarde\"\n      });\n    });\n  };\n\n  return _jsxs(Box, {\n    justifyContent: \"center\",\n    flex: 1,\n    children: [_jsxs(VStack, {\n      children: [_jsxs(FormControl, {\n        isRequired: true,\n        isInvalid: 'user' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Nombre de Usuario\"\n        }), _jsx(Input, {\n          placeholder: \"Usuario\",\n          onChangeText: function onChangeText(value) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              user: value\n            }));\n          }\n        }), 'user' in errors ? _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.user\n        }) : _jsx(FormControl.HelperText, {\n          _text: {\n            fontSize: 'xs'\n          },\n          children: \"Diferenciar MAYUS de MINUS\"\n        })]\n      }), _jsxs(FormControl, {\n        isRequired: true,\n        isInvalid: 'pass' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Contrase\\xF1a\"\n        }), _jsx(Input, {\n          placeholder: \"Contrase\\xF1a\",\n          type: \"password\",\n          onChangeText: function onChangeText(value) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              pass: value\n            }));\n          }\n        }), 'pass' in errors ? _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.pass\n        }) : _jsx(FormControl.HelperText, {\n          _text: {\n            fontSize: 'xs'\n          },\n          children: \"Diferenciar MAYUS de MINUS\"\n        })]\n      })]\n    }), _jsx(Divider, {\n      my: 1\n    }), _jsx(Button, {\n      colorScheme: \"success\",\n      onPress: HandleLogin,\n      size: \"lg\",\n      children: \"Entrar\"\n    }), _jsx(Divider, {\n      my: 3\n    }), _jsx(Button, {\n      size: \"md\",\n      colorScheme: \"teal\",\n      variant: \"outline\",\n      onPress: function onPress() {\n        return navigation.navigate('recPass');\n      },\n      children: \"Olvide mi contrase\\xF1a\"\n    }), _jsx(Divider, {\n      my: 1\n    }), _jsx(Button, {\n      size: \"md\",\n      colorScheme: \"teal\",\n      variant: \"outline\",\n      onPress: function onPress() {\n        return navigation.navigate('singin');\n      },\n      children: \"No tengo cuenta\"\n    })]\n  });\n};\nexport var SingIn = function SingIn(_ref2) {\n  var navigation = _ref2.navigation;\n  var toast = useToast();\n\n  var _React$useState7 = React.useState({}),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      data = _React$useState8[0],\n      setData = _React$useState8[1];\n\n  var _React$useState9 = React.useState({}),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      errors = _React$useState10[0],\n      setError = _React$useState10[1];\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      terms = _React$useState12[0],\n      setTerms = _React$useState12[1];\n\n  var _React$useState13 = React.useState(false),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      loading = _React$useState14[0],\n      setLoading = _React$useState14[1];\n\n  var createUser = function createUser() {\n    var response, msj;\n    return _regeneratorRuntime.async(function createUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('https://turancho.com.mx/request/cUser.php', {\n              method: 'POST',\n              body: JSON.stringify({\n                u: data.user,\n                p: data.pass,\n                n: data.name,\n                a: data.address,\n                m: data.mail\n              })\n            }));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 6:\n            msj = _context.sent;\n\n            if (!(msj < 1)) {\n              _context.next = 12;\n              break;\n            }\n\n            toast.show({\n              title: 'Exito',\n              status: 'success',\n              description: 'Usuario creado!'\n            });\n            return _context.abrupt(\"return\", true);\n\n          case 12:\n            toast.show({\n              title: 'Error en el registro',\n              status: 'warning',\n              description: 'Intente de nuevo'\n            });\n            return _context.abrupt(\"return\", false);\n\n          case 14:\n            _context.next = 19;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", false);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  };\n\n  var verifyUser = function verifyUser() {\n    var response, responseTxt;\n    return _regeneratorRuntime.async(function verifyUser$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch(api + 'vUser.php?u=' + data.user));\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 6:\n            responseTxt = _context2.sent;\n\n            if (!(responseTxt < 1)) {\n              _context2.next = 13;\n              break;\n            }\n\n            delete errors.user;\n            setError(_objectSpread({}, errors));\n            return _context2.abrupt(\"return\", true);\n\n          case 13:\n            setError(_objectSpread(_objectSpread({}, errors), {}, {\n              user: 'Usuario en uso'\n            }));\n            return _context2.abrupt(\"return\", false);\n\n          case 15:\n            _context2.next = 20;\n            break;\n\n          case 17:\n            _context2.prev = 17;\n            _context2.t0 = _context2[\"catch\"](0);\n            setError(_objectSpread(_objectSpread({}, errors), {}, {\n              user: _context2.t0\n            }));\n\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n\n  var verifyMail = function verifyMail() {\n    var response, responseTxt;\n    return _regeneratorRuntime.async(function verifyMail$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch(api + 'vMail.php?m=' + data.mail));\n\n          case 3:\n            response = _context3.sent;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 6:\n            responseTxt = _context3.sent;\n\n            if (!(responseTxt < 1)) {\n              _context3.next = 13;\n              break;\n            }\n\n            delete errors.mail;\n            setError(_objectSpread({}, errors));\n            return _context3.abrupt(\"return\", true);\n\n          case 13:\n            setError(_objectSpread(_objectSpread({}, errors), {}, {\n              mail: 'Correo electr√≥nico en uso'\n            }));\n            return _context3.abrupt(\"return\", false);\n\n          case 15:\n            _context3.next = 20;\n            break;\n\n          case 17:\n            _context3.prev = 17;\n            _context3.t0 = _context3[\"catch\"](0);\n            setError(_objectSpread(_objectSpread({}, errors), {}, {\n              mail: _context3.t0\n            }));\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n\n  function validForm() {\n    if (data.user === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        user: 'Se necesita usuario'\n      }));\n      return false;\n    } else delete errors.user;\n\n    if (data.pass === undefined || data.cpass === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        pass: 'Se necesita contrase√±a'\n      }));\n      return false;\n    } else delete errors.pass;\n\n    if (data.name === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        name: 'Se necesita el nombre'\n      }));\n      return false;\n    } else delete errors.name;\n\n    if (data.address === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        address: 'Se necesita domicilio'\n      }));\n      return false;\n    } else delete errors.address;\n\n    if (data.mail === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        mail: 'Se necesita cuenta de correo electr√≥nico'\n      }));\n      return false;\n    } else delete errors.mail;\n\n    if (terms === undefined || terms == false) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        terms: 'Necesitas aceptar los t√©rminos y condiciones de uso'\n      }));\n      return false;\n    } else delete errors.terms;\n\n    if (data.pass != data.cpass) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        pass: 'Las contrase√±as no coinciden'\n      }));\n      return false;\n    } else delete errors.pass;\n\n    return true;\n  }\n\n  var HandleRegister = function HandleRegister() {\n    return _regeneratorRuntime.async(function HandleRegister$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (validForm()) {\n              setLoading(true);\n              NetInfo.fetch().then(function (state) {\n                if (state.isConnected) {\n                  verifyUser().then(function (validUser) {\n                    if (validUser) {\n                      verifyMail().then(function (validMail) {\n                        if (validMail) createUser().then(function (regUser) {\n                          navigation.navigate('login');\n                        });\n                      });\n                    }\n                  });\n                } else toast({\n                  title: 'No hay conexi√≥n',\n                  status: 'warning',\n                  description: 'Se necesita conexion'\n                });\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(KeyboardAvoidingView, {\n    behavior: Platform.OS === \"ios\" ? \"height\" : \"\",\n    keyboardVerticalOffset: 100,\n    children: _jsx(ScrollView, {\n      safe: true,\n      children: _jsxs(Box, {\n        justifyContent: \"center\",\n        flex: 1,\n        children: [_jsxs(VStack, {\n          children: [_jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'user' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Nombre de Usuario (Se sugiere usar la CURP)\"\n            }), _jsx(Input, {\n              placeholder: \"Usuario\",\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  user: value\n                }));\n              },\n              maxLength: 20\n            }), 'user' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.user\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          }), _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'pass' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Contrase\\xF1a\"\n            }), _jsx(Input, {\n              p: 2,\n              placeholder: \"Contrase\\xF1a\",\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  pass: value\n                }));\n              },\n              type: \"password\"\n            }), _jsx(Input, {\n              p: 2,\n              placeholder: \"Confirmar contrase\\xF1a\",\n              onChangeText: function onChangeText(value) {\n                setData(_objectSpread(_objectSpread({}, data), {}, {\n                  cpass: value\n                }));\n              },\n              type: \"password\"\n            }), 'pass' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.pass\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          }), _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'name' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Nombre Completo\"\n            }), _jsx(Input, {\n              p: 2,\n              placeholder: \"Nombre\",\n              onChangeText: function onChangeText(value) {\n                setData(_objectSpread(_objectSpread({}, data), {}, {\n                  name: value\n                }));\n              }\n            }), 'name' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.name\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Escriba nombre completo\"\n            })]\n          }), _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'address' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Domicilio\"\n            }), _jsx(Input, {\n              p: 2,\n              placeholder: \"Domicilio\",\n              onChangeText: function onChangeText(value) {\n                setData(_objectSpread(_objectSpread({}, data), {}, {\n                  address: value\n                }));\n              }\n            }), 'address' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.address\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Agregue un domicilio\"\n            })]\n          }), _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'mail' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Correo electr\\xF3nico\"\n            }), _jsx(Input, {\n              p: 2,\n              keyboardType: \"email-address\",\n              placeholder: \"Correo\",\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  mail: value\n                }));\n              }\n            }), 'mail' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.mail\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          }), _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'terms' in errors,\n            children: [_jsxs(Checkbox, {\n              size: \"md\",\n              onChange: function onChange(value) {\n                return setTerms(value);\n              },\n              children: [\"Aceptar\", _jsx(Link, {\n                onPress: function onPress() {\n                  return navigation.navigate('terms');\n                },\n                children: \"  terminos y condiciones de uso\"\n              })]\n            }), 'terms' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.terms\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Es necesario aceptar\"\n            })]\n          }), _jsx(Divider, {\n            my: 2\n          })]\n        }), _jsx(Button.Group, {\n          space: 2,\n          children: _jsx(Button, {\n            isLoading: loading,\n            colorScheme: \"success\",\n            size: \"lg\",\n            onPress: function onPress() {\n              return HandleRegister();\n            },\n            children: \" Registrar \"\n          })\n        })]\n      })\n    })\n  });\n};\nexport var Terms = function Terms(_ref3) {\n  var navigation = _ref3.navigation;\n  return _jsx(NativeBaseProvider, {\n    children: _jsx(Box, {\n      children: \"Aqui estan los terminos y condiciones jeje\"\n    })\n  });\n};\nexport var GetRancho = function GetRancho(_ref4) {\n  var navigation = _ref4.navigation;\n  var tkn = useSelector(function (state) {\n    return state.jwt;\n  });\n  var mtr = useSelector(function (state) {\n    return state.mtr;\n  });\n  var trans = useSelector(function (state) {\n    return state.trans;\n  });\n\n  var _React$useState15 = React.useState(false),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      show = _React$useState16[0],\n      setShow = _React$useState16[1];\n\n  var dispatch = useDispatch();\n  var errors = useSelector(function (state) {\n    return state.errors;\n  });\n  var toast = useToast();\n\n  var getData = function getData() {\n    return _regeneratorRuntime.async(function getData$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            NetInfo.fetch().then(function (state) {\n              if (state.isConnected) {\n                dispatch(action.getRancho(tkn, mtr)).then(function (msj) {\n                  if (msj === false) {\n                    toast.show({\n                      title: 'Error con el servidor',\n                      status: 'warning',\n                      description: 'Intente de nuevo'\n                    });\n                  } else navigation.navigate('rancho');\n                });\n              } else setShow(true);\n            });\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  React.useEffect(function () {\n    getData();\n  }, []);\n  return _jsxs(Box, {\n    justifyContent: \"center\",\n    flex: 1,\n    children: [_jsxs(VStack, {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      space: 2,\n      children: [_jsx(Spinner, {\n        color: \"cyan.500\",\n        size: \"lg\"\n      }), _jsx(Heading, {\n        color: \"primary.500\",\n        fontSize: \"md\",\n        children: \"Cargando...\"\n      })]\n    }), _jsx(Modal, {\n      isOpen: show,\n      onClose: function onClose() {\n        setShow(false);\n      },\n      bgColor: \"red.400\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \" No hay conexion!\"\n        }), _jsx(Modal.Body, {\n          children: \"Porfavor intente de nuevo, hubo un problema con la red.\"\n        })]\n      })\n    })]\n  });\n};\nexport var Hato = function Hato(_ref5) {\n  var navigation = _ref5.navigation;\n  var hato = useSelector(function (state) {\n    return state.hato;\n  });\n  var bkp = useSelector(function (state) {\n    return state.bkpHato;\n  });\n  var mt = useSelector(function (state) {\n    return state.mtr.hato;\n  });\n  var tkn = useSelector(function (state) {\n    return state.jwt;\n  });\n  var vacunas = useSelector(function (state) {\n    return state.vacunas;\n  });\n  var vac_animal = useSelector(function (state) {\n    return state.vac_animal;\n  });\n  var sanitarios = useSelector(function (state) {\n    return state.sanitarios;\n  });\n  var ctl_animal = useSelector(function (state) {\n    return state.ctl_animal;\n  });\n  var pesajes = useSelector(function (state) {\n    return state.pesajes;\n  });\n  var embarazos = useSelector(function (state) {\n    return state.embarazos;\n  });\n  var crias = useSelector(function (state) {\n    return state.crias;\n  });\n  var predios = useSelector(function (state) {\n    return state.predios;\n  });\n  var pre_animal = useSelector(function (state) {\n    return state.pre_animal;\n  });\n  var toast = useToast();\n  var dispatch = useDispatch();\n\n  var _React$useState17 = React.useState([]),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      list = _React$useState18[0],\n      setList = _React$useState18[1];\n\n  var _React$useState19 = React.useState({\n    animal: false,\n    register: false,\n    delete: false,\n    vac: false,\n    pesaje: false,\n    rep: false,\n    san: false,\n    trans: false,\n    predios: false\n  }),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      show = _React$useState20[0],\n      setShow = _React$useState20[1];\n\n  var _React$useState21 = React.useState({\n    name: false,\n    nac: false,\n    date: false,\n    sex: false,\n    race: false,\n    color: false,\n    predio: false\n  }),\n      _React$useState22 = _slicedToArray(_React$useState21, 2),\n      showPop = _React$useState22[0],\n      setPop = _React$useState22[1];\n\n  var _React$useState23 = React.useState(false),\n      _React$useState24 = _slicedToArray(_React$useState23, 2),\n      picker = _React$useState24[0],\n      setPicker = _React$useState24[1];\n\n  var _React$useState25 = React.useState(''),\n      _React$useState26 = _slicedToArray(_React$useState25, 2),\n      search = _React$useState26[0],\n      setSearch = _React$useState26[1];\n\n  var _React$useState27 = React.useState({\n    arete: '',\n    name: '',\n    nac: new Date(),\n    sex: 'M',\n    race: '',\n    color: ''\n  }),\n      _React$useState28 = _slicedToArray(_React$useState27, 2),\n      animal = _React$useState28[0],\n      setAnimal = _React$useState28[1];\n\n  var _React$useState29 = React.useState({\n    show: false,\n    nac: 'YYYY/MM/DD'\n  }),\n      _React$useState30 = _slicedToArray(_React$useState29, 2),\n      form = _React$useState30[0],\n      setForm = _React$useState30[1];\n\n  var _React$useState31 = React.useState({}),\n      _React$useState32 = _slicedToArray(_React$useState31, 2),\n      errors = _React$useState32[0],\n      setError = _React$useState32[1];\n\n  var SexIcon = function SexIcon(props) {\n    var sex = props.sex;\n    if (sex == 'M') return _jsx(Icon, {\n      size: \"xl\",\n      as: MaterialCommunityIcons,\n      name: \"gender-male\",\n      color: \"#62A0EA\",\n      width: \"15%\"\n    });else return _jsx(Icon, {\n      size: \"xl\",\n      as: MaterialCommunityIcons,\n      name: \"gender-female\",\n      color: \"#DC8ADD\",\n      width: \"15%\"\n    });\n  };\n\n  var filtrar = function filtrar(search) {\n    var resultado = bkp.filter(function (animal) {\n      if (animal.arete.toString().toLowerCase().includes(search.toString().toLowerCase()) || animal.name.toString().toLowerCase().includes(search.toString().toLocaleLowerCase())) return animal;\n    });\n    dispatch(action.setHato(resultado));\n  };\n\n  var handleSearch = function handleSearch(txt) {\n    setSearch(txt);\n    filtrar(txt);\n  };\n\n  var handleAnimal = function handleAnimal(item) {\n    setAnimal(item);\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      animal: true\n    }));\n  };\n\n  var handleVacunas = function handleVacunas() {\n    var ids = vac_animal.filter(function (rel) {\n      if (rel.arete == animal.arete) return rel;\n    });\n    console.log(vac_animal);\n    var lista = vacunas.filter(function (vacuna) {\n      for (var _i = 0; _i <= ids.length - 1; _i++) {\n        if (ids[_i].vacuna == vacuna.id) return true;\n      }\n    });\n\n    if (lista.length > 0) {\n      setList(lista);\n      setShow(_objectSpread(_objectSpread({}, show), {}, {\n        vac: true\n      }));\n    } else toast.show({\n      title: 'Vacio',\n      description: 'No hay vacunas',\n      status: 'info',\n      placement: 'top'\n    });\n  };\n\n  var handleSanitarios = function handleSanitarios() {\n    var ids = ctl_animal.filter(function (rel) {\n      if (rel.arete == animal.arete) return rel;\n    });\n    var lista = sanitarios.filter(function (ctl) {\n      for (var _i2 = 0; _i2 <= ids.length - 1; _i2++) {\n        if (ids[_i2].ctl == ctl.id) return true;\n      }\n    });\n\n    if (lista.length > 0) {\n      setList(lista);\n      setShow(_objectSpread(_objectSpread({}, show), {}, {\n        san: true\n      }));\n    } else toast.show({\n      title: 'Vacio',\n      description: 'No hay controles',\n      status: 'info',\n      placement: 'top'\n    });\n  };\n\n  var handleReproductivos = function handleReproductivos() {\n    var cria = crias.filter(function (embarazo) {\n      if (embarazo.arete == animal.arete) return true;\n    });\n    console.log(embarazos);\n    var lista = embarazos.filter(function (embarazo) {\n      for (var i = 0; i < cria.length; i++) {\n        if (embarazo.id == cria[i].embarazo) return true;\n      }\n    });\n    console.log(lista);\n\n    if (lista.length > 0) {\n      setList(lista[0]);\n      setShow(_objectSpread(_objectSpread({}, show), {}, {\n        rep: true\n      }));\n    } else toast.show({\n      title: 'Vacio',\n      description: 'No hay registros',\n      status: 'info',\n      placement: 'top'\n    });\n  };\n\n  var handlePesajes = function handlePesajes() {\n    var lista = pesajes.filter(function (pesaje) {\n      if (pesaje.arete == animal.arete) return true;\n    });\n\n    if (lista.length > 0) {\n      setList(lista);\n      setShow(_objectSpread(_objectSpread({}, show), {}, {\n        pesaje: true\n      }));\n    } else toast.show({\n      title: 'Vacio',\n      description: 'No hay pesajes',\n      status: 'info',\n      placement: 'top'\n    });\n  };\n\n  var handlePredios = function handlePredios() {\n    var transferencias = pre_animal.filter(function (trans) {\n      if (trans.arete == animal.arete) return true;\n    });\n    var ranchos = predios.filter(function (predio) {\n      for (i = 0; i <= transferencias.length - 1; i++) {\n        if (predio.id == transferencias[i].predio) return true;\n      }\n    });\n\n    for (i = 0; i <= transferencias.length - 1; i++) {\n      for (y = 0; y < ranchos.length; y++) {\n        if (ranchos[y].id == transferencias[i].predio) transferencias[i].predio = ranchos[y].name;\n      }\n    }\n\n    if (transferencias.length > 0) {\n      setList(transferencias);\n      setShow(_objectSpread(_objectSpread({}, show), {}, {\n        predios: true\n      }));\n    } else toast.show({\n      title: 'Vacio',\n      description: 'No hay predios',\n      status: 'info',\n      placement: 'top'\n    });\n  };\n\n  var handleRegister = function handleRegister() {\n    var animal;\n    return _regeneratorRuntime.async(function handleRegister$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            animal = {\n              arete: form.arete,\n              name: form.name,\n              sex: form.sex,\n              nac: form.nac,\n              race: form.race,\n              color: form.color\n            };\n            NetInfo.fetch().then(function (state) {\n              if (state.isConnected) {\n                action.createAnimal(tkn, animal).then(function (ins) {\n                  setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    register: false\n                  }));\n\n                  if (ins == true) {\n                    toast.show({\n                      title: 'Exito',\n                      status: 'success',\n                      description: 'Animal creado'\n                    });\n                    dispatch(action.getHato(tkn));\n                  } else toast.show({\n                    title: 'Error al insertar',\n                    status: 'error',\n                    description: 'Intente de nuevo'\n                  });\n                });\n              } else {\n                dispatch(action.addTrans({\n                  type: 'addAnimal',\n                  data: animal\n                }));\n                dispatch(action.addAnimal(animal));\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleDelete = function handleDelete(arete) {\n    return _regeneratorRuntime.async(function handleDelete$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            NetInfo.fetch().then(function (state) {\n              if (state.isConnected) {\n                action.deleteAnimal(tkn, arete).then(function (del) {\n                  setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    delete: false\n                  }));\n\n                  if (del == true) {\n                    toast.show({\n                      title: 'Exito',\n                      status: 'info',\n                      description: 'Animal eliminado'\n                    });\n                    dispatch(action.getHato(tkn));\n                    setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false,\n                      animal: false\n                    }));\n                    setAnimal({});\n                  } else toast.show({\n                    title: 'Error al eliminar',\n                    status: 'error',\n                    description: 'Intente de nuevo'\n                  });\n                });\n              } else {\n                dispatch(action.addTrans({\n                  type: 'delAnimal',\n                  data: arete\n                }));\n                dispatch(action.dropAnimal(arete));\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleUpdate = function handleUpdate(type) {\n    var date,\n        word,\n        upd,\n        _args8 = arguments;\n    return _regeneratorRuntime.async(function handleUpdate$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            date = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : null;\n            word = '';\n            _context8.t0 = type;\n            _context8.next = _context8.t0 === 'name' ? 5 : _context8.t0 === 'nac' ? 8 : _context8.t0 === 'sex' ? 11 : _context8.t0 === 'race' ? 13 : _context8.t0 === 'color' ? 15 : 17;\n            break;\n\n          case 5:\n            word = form.name;\n            setAnimal(_objectSpread(_objectSpread({}, animal), {}, {\n              name: word\n            }));\n            return _context8.abrupt(\"break\", 18);\n\n          case 8:\n            word = date;\n            console.log('es', word);\n            return _context8.abrupt(\"break\", 18);\n\n          case 11:\n            word = form.sex;\n            return _context8.abrupt(\"break\", 18);\n\n          case 13:\n            word = form.race;\n            return _context8.abrupt(\"break\", 18);\n\n          case 15:\n            word = form.color;\n            return _context8.abrupt(\"break\", 18);\n\n          case 17:\n            return _context8.abrupt(\"break\", 18);\n\n          case 18:\n            _context8.next = 20;\n            return _regeneratorRuntime.awrap(action.updateAnimal(tkn, animal.arete, type, word));\n\n          case 20:\n            upd = _context8.sent;\n\n            if (upd == true) {\n              dispatch(action.getHato(tkn));\n              setShow(_objectSpread(_objectSpread({}, show), {}, {\n                animal: false\n              }));\n              toast.show({\n                title: 'Actualizacion exitosa',\n                status: 'success'\n              });\n            } else {\n              setShow(_objectSpread(_objectSpread({}, show), {}, {\n                animal: false\n              }));\n              toast.show({\n                title: 'Error con el servidor',\n                status: 'error',\n                description: 'Intente de nuevo'\n              });\n            }\n\n          case 22:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Box, {\n      padding: \".5em\",\n      children: [_jsxs(HStack, {\n        space: 2,\n        justifyContent: \"center\",\n        padding: \".5em\",\n        children: [_jsx(Input, {\n          onChangeText: handleSearch,\n          value: search,\n          placeholder: \"Buscar\",\n          variant: \"filled\",\n          width: \"80%\",\n          borderRadius: \"10\",\n          borderWidth: \"0\",\n          InputLeftElement: _jsx(Icon, {\n            ml: \"2\",\n            size: \"4\",\n            color: \"gray.400\",\n            as: _jsx(Ionicons, {\n              name: \"ios-search\"\n            })\n          })\n        }), _jsx(IconButton, {\n          width: \"60px\",\n          colorScheme: \"rgb(173, 0, 255)\",\n          borderRadius: \"xl\",\n          variant: \"solid\",\n          size: \"lg\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\"\n          }),\n          onPress: function onPress() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              register: true\n            }));\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: hato,\n        renderItem: function renderItem(_ref6) {\n          var item = _ref6.item;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              return handleAnimal(item);\n            },\n            width: \"100%\",\n            justifyContent: \"center\",\n            children: _jsxs(HStack, {\n              space: \"3\",\n              justifyContent: \"center\",\n              width: \"90%\",\n              children: [_jsx(Icon, {\n                size: \"xl\",\n                as: MaterialCommunityIcons,\n                name: \"cow\",\n                width: \"20%\"\n              }), _jsxs(VStack, {\n                width: \"65%\",\n                children: [_jsx(Heading, {\n                  children: item.arete\n                }), _jsx(Text, {\n                  children: item.name\n                })]\n              }), _jsx(SexIcon, {\n                sex: item.sex,\n                width: \"15%\"\n              })]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.arete;\n        },\n        ItemSeparatorComponent: function ItemSeparatorComponent() {\n          return _jsx(\"hr\", {\n            width: \"90%\"\n          });\n        }\n      }), _jsx(Text, {\n        children: mt\n      })]\n    }), _jsx(Modal, {\n      isOpen: show.animal,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          animal: false\n        }));\n      },\n      size: \"xl\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignSelf: \"center\",\n          _text: {\n            fontSize: 'xl',\n            Overridden: 'bold'\n          },\n          children: animal.arete\n        }), _jsxs(Modal.Body, {\n          children: [_jsxs(VStack, {\n            children: [_jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Nombre\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: animal.name\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.name,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: false\n                }));\n              },\n              size: \"xl\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar nombre\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsx(Input, {\n                      placeholder: \"Nuevo nombre\",\n                      onChangeText: function onChangeText(value) {\n                        setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          name: value\n                        }));\n                      }\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        handleUpdate('name');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                setPicker(true);\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Nacimiento\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: animal.nac\n              }), _jsx(Divider, {})]\n            }), picker && _jsx(DateTimePicker, {\n              value: new Date(animal.nac),\n              mode: \"date\",\n              display: \"default\",\n              onChange: function onChange(event, selectedDate) {\n                var f = selectedDate;\n                var date = f.getFullYear() + '-' + (f.getMonth() + 1) + '-' + f.getDate();\n                setPicker(false);\n                handleUpdate('nac', date);\n              }\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  sex: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Sexo\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: animal.sex\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.sex,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  sex: false\n                }));\n              },\n              size: \"md\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar sexo\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsxs(Select, {\n                      selectedValue: form.sex,\n                      onValueChange: function onValueChange(itemValue) {\n                        setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          sex: itemValue\n                        }));\n                      },\n                      children: [_jsx(Select.Item, {\n                        label: \"Macho\",\n                        value: \"M\"\n                      }), _jsx(Select.Item, {\n                        label: \"Hembra\",\n                        value: \"H\"\n                      })]\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  justifyContent: \"flex-end\",\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          sex: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        handleUpdate('sex');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          sex: false\n                        }));\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  race: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Raza\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: animal.race\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.race,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  race: false\n                }));\n              },\n              size: \"md\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar raza\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsx(Input, {\n                      placeholder: \"Nueva raza\",\n                      onChangeText: function onChangeText(value) {\n                        setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          race: value\n                        }));\n                      }\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  justifyContent: \"flex-end\",\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          race: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        handleUpdate('race');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          race: false\n                        }));\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  color: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Color\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: animal.color\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.color,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  color: false\n                }));\n              },\n              size: \"md\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar color\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsx(Input, {\n                      placeholder: \"Nuevo color\",\n                      onChangeText: function onChangeText(value) {\n                        setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          color: value\n                        }));\n                      }\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  justifyContent: \"flex-end\",\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          color: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        handleUpdate('color');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          color: false\n                        }));\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            })]\n          }), _jsxs(Button.Group, {\n            colorScheme: \"info\",\n            my: 3,\n            direction: \"column\",\n            children: [_jsxs(HStack, {\n              space: \"sm\",\n              children: [_jsx(Button, {\n                colorScheme: \"rgb(0, 154, 159)\",\n                _text: {\n                  color: 'white'\n                },\n                leftIcon: _jsx(Icon, {\n                  size: \"md\",\n                  as: MaterialCommunityIcons,\n                  name: \"dna\"\n                }),\n                onPress: function onPress() {\n                  return handleReproductivos();\n                },\n                children: \"Registros reproductivos\"\n              }), _jsx(Button, {\n                colorScheme: \"rgb(0, 154, 159)\",\n                _text: {\n                  color: 'white'\n                },\n                leftIcon: _jsx(Icon, {\n                  size: \"md\",\n                  as: MaterialCommunityIcons,\n                  name: \"needle\"\n                }),\n                onPress: function onPress() {\n                  return handleVacunas();\n                },\n                children: \"Vacunas\"\n              })]\n            }), _jsxs(HStack, {\n              space: \"sm\",\n              children: [_jsx(Button, {\n                width: \"40%\",\n                colorScheme: \"rgb(0, 154, 159)\",\n                _text: {\n                  color: 'white'\n                },\n                leftIcon: _jsx(Icon, {\n                  size: \"md\",\n                  as: MaterialCommunityIcons,\n                  name: \"weight\"\n                }),\n                onPress: function onPress() {\n                  return handlePesajes();\n                },\n                children: \"Pesajes\"\n              }), _jsx(Button, {\n                colorScheme: \"rgb(0, 154, 159)\",\n                _text: {\n                  color: 'white'\n                },\n                leftIcon: _jsx(Icon, {\n                  size: \"md\",\n                  as: MaterialCommunityIcons,\n                  name: \"virus\"\n                }),\n                onPress: function onPress() {\n                  return handleSanitarios();\n                },\n                children: \"Controles sanitarios\"\n              })]\n            }), _jsx(Button, {\n              colorScheme: \"rgb(0, 154, 159)\",\n              _text: {\n                color: 'white'\n              },\n              leftIcon: _jsx(Icon, {\n                size: \"md\",\n                as: MaterialCommunityIcons,\n                name: \"terrain\"\n              }),\n              onPress: function onPress() {\n                return handlePredios();\n              },\n              children: \"Historial de predios\"\n            })]\n          })]\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 3,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(255, 37, 0)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShow(_objectSpread(_objectSpread({}, show), {}, {\n                  delete: true\n                }));\n              },\n              children: \"Borrar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"orange\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShow(_objectSpread(_objectSpread({}, show), {}, {\n                  trans: true\n                }));\n              },\n              children: \"Transferir\"\n            })]\n          })\n        }), _jsx(AlertDialog, {\n          isOpen: show.delete,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              delete: false\n            }));\n          },\n          children: _jsxs(AlertDialog.Content, {\n            children: [_jsx(AlertDialog.CloseButton, {}), _jsx(AlertDialog.Header, {\n              children: \"Borrar animal\"\n            }), _jsx(AlertDialog.Body, {\n              children: \"Esto borrar\\xE1 todos los datos relacionados con este animal. Esta acci\\xF3n no es reversible. Los datos borrados no podr\\xE1n ser recuperados. \\xBFEst\\xE1 seguro de esta acci\\xF3n?\"\n            }), _jsx(AlertDialog.Footer, {\n              children: _jsxs(Button.Group, {\n                space: 2,\n                children: [_jsx(Button, {\n                  variant: \"unstyled\",\n                  colorScheme: \"coolGray\",\n                  onPress: function onPress() {\n                    return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false\n                    }));\n                  },\n                  children: \"Cancelar\"\n                }), _jsx(Button, {\n                  onPress: function onPress() {\n                    return handleDelete(animal.arete);\n                  },\n                  size: \"lg\",\n                  colorScheme: \"rgb(255, 37, 0)\",\n                  _text: {\n                    color: 'white'\n                  },\n                  children: \"Confirmar\"\n                })]\n              })\n            })]\n          })\n        }), _jsx(Modal, {\n          isOpen: show.vac,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              vac: false\n            }));\n          },\n          size: \"full\",\n          children: _jsxs(Modal.Content, {\n            children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n              children: \"Registros de vacunaci\\xF3n\"\n            }), _jsx(Modal.Body, {}), _jsx(Modal.Footer, {\n              children: _jsx(Button.Group, {\n                space: 2\n              })\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.register,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          register: false\n        }));\n      },\n      size: \"xl\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Registrar animal\"\n        }), _jsx(Modal.Body, {\n          children: _jsxs(VStack, {\n            children: [_jsxs(FormControl, {\n              isInvalid: 'arete' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Arete\"\n              }), _jsx(Input, {\n                placeholder: \"Arete - ID\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    arete: value\n                  }));\n                }\n              }), 'arete' in errors ? _jsx(FormControl.ErrorMessage, {\n                _text: {\n                  fontSize: 'xs',\n                  color: 'error.500',\n                  fontWeight: 500\n                },\n                children: errors.arete\n              }) : _jsx(FormControl.HelperText, {\n                _text: {\n                  fontSize: 'xs'\n                },\n                children: \"Diferenciar MAYUS de MINUS\"\n              })]\n            }), _jsxs(FormControl, {\n              isInvalid: 'nombre' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Nombre\"\n              }), _jsx(Input, {\n                placeholder: \"Nombre\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    name: value\n                  }));\n                }\n              }), 'nombre' in errors ? _jsx(FormControl.ErrorMessage, {\n                _text: {\n                  fontSize: 'xs',\n                  color: 'error.500',\n                  fontWeight: 500\n                },\n                children: errors.nombre\n              }) : _jsx(FormControl.HelperText, {\n                _text: {\n                  fontSize: 'xs'\n                },\n                children: \"Diferenciar MAYUS de MINUS\"\n              })]\n            }), _jsxs(FormControl, {\n              isInvalid: 'sexo' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Sexo\"\n              }), _jsxs(Radio.Group, {\n                name: \"sexo\",\n                accessibilityLabel: \"sexo\",\n                value: form.sex,\n                onChange: function onChange(nextValue) {\n                  setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    sex: nextValue\n                  }));\n                },\n                children: [_jsx(Radio, {\n                  value: \"M\",\n                  my: 1,\n                  children: \"Masculino\"\n                }), _jsx(Radio, {\n                  value: \"F\",\n                  my: 1,\n                  children: \"Femenino\"\n                })]\n              }), _jsx(FormControl.ErrorMessage, {\n                _text: {\n                  fontSize: 'xs',\n                  color: 'error.500',\n                  fontWeight: 500\n                },\n                children: errors.sexo\n              })]\n            }), _jsxs(FormControl, {\n              isInvalid: 'fecha' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Fecha de nacimiento\"\n              }), _jsx(Pressable, {\n                onPress: function onPress() {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    show: true\n                  }));\n                },\n                children: _jsx(Text, {\n                  children: form.nac\n                })\n              }), form.show && _jsx(DateTimePicker, {\n                value: new Date(),\n                mode: \"date\",\n                display: \"default\",\n                onChange: function onChange(event, selectedDate) {\n                  var f = selectedDate;\n                  var currentDate = f.getFullYear() + \"-\" + (f.getMonth() + 1) + \"-\" + f.getDate();\n                  setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    nac: currentDate,\n                    show: false\n                  }));\n                }\n              }), _jsx(FormControl.ErrorMessage, {\n                children: errors.fecha\n              })]\n            }), _jsxs(FormControl, {\n              isInvalid: 'raza' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Raza\"\n              }), _jsx(Input, {\n                placeholder: \"Raza\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    race: value\n                  }));\n                }\n              }), 'raza' in errors ? _jsx(FormControl.ErrorMessage, {\n                _text: {\n                  fontSize: 'xs',\n                  color: 'error.500',\n                  fontWeight: 500\n                },\n                children: errors.raza\n              }) : _jsx(FormControl.HelperText, {\n                _text: {\n                  fontSize: 'xs'\n                },\n                children: \"Diferenciar MAYUS de MINUS\"\n              })]\n            }), _jsxs(FormControl, {\n              isInvalid: 'color' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Color\"\n              }), _jsx(Input, {\n                placeholder: \"Color\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    color: value\n                  }));\n                }\n              }), 'color' in errors ? _jsx(FormControl.ErrorMessage, {\n                _text: {\n                  fontSize: 'xs',\n                  color: 'error.500',\n                  fontWeight: 500\n                },\n                children: errors.color\n              }) : _jsx(FormControl.HelperText, {\n                _text: {\n                  fontSize: 'xs'\n                },\n                children: \"Diferenciar MAYUS de MINUS\"\n              })]\n            })]\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              colorScheme: \"coolGray\",\n              variant: \"ghost\",\n              onPress: function onPress() {\n                return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                  register: false\n                }));\n              },\n              children: \"Cancel\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(0, 247, 255)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                return handleRegister();\n              },\n              children: \"Crear\"\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.rep,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          rep: false\n        }));\n      },\n      size: \"lg\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Registro reproductivo\"\n        }), _jsx(Modal.Body, {\n          children: _jsxs(Center, {\n            children: [_jsx(Heading, {\n              children: \"ID de Embarazo\"\n            }), _jsx(Text, {\n              children: list.id\n            }), _jsxs(HStack, {\n              space: 2,\n              children: [_jsxs(VStack, {\n                space: 2,\n                children: [_jsx(Heading, {\n                  children: \"Padre\"\n                }), _jsx(Text, {\n                  children: list.dad\n                })]\n              }), _jsxs(VStack, {\n                space: 2,\n                children: [_jsx(Heading, {\n                  children: \"Madre\"\n                }), _jsx(Text, {\n                  children: list.mom\n                })]\n              })]\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.vac,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          vac: false\n        }));\n      },\n      size: \"lg\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Vacunas\"\n        }), _jsx(Modal.Body, {\n          children: _jsx(FlatList, {\n            data: list,\n            renderItem: function renderItem(_ref7) {\n              var item = _ref7.item;\n              return _jsxs(HStack, {\n                borderBottomWidth: \"1\",\n                space: \"4\",\n                children: [_jsx(Icon, {\n                  size: \"xl\",\n                  as: MaterialCommunityIcons,\n                  name: \"needle\",\n                  width: \"20%\"\n                }), _jsxs(VStack, {\n                  width: \"65%\",\n                  children: [_jsx(Heading, {\n                    children: item.name\n                  }), _jsx(Text, {\n                    children: item.date\n                  })]\n                })]\n              });\n            },\n            keyExtractor: function keyExtractor(item) {\n              return item.id;\n            }\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.pesaje,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          pesaje: false\n        }));\n      },\n      size: \"lg\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Pesajes\"\n        }), _jsx(Modal.Body, {\n          children: _jsx(FlatList, {\n            data: list,\n            renderItem: function renderItem(_ref8) {\n              var item = _ref8.item;\n              return _jsxs(HStack, {\n                borderBottomWidth: \"1\",\n                space: \"4\",\n                children: [_jsx(Icon, {\n                  size: \"xl\",\n                  as: MaterialCommunityIcons,\n                  name: \"weight\",\n                  width: \"20%\"\n                }), _jsxs(VStack, {\n                  width: \"65%\",\n                  children: [_jsxs(Heading, {\n                    children: [item.kg, \" Kg\"]\n                  }), _jsx(Text, {\n                    children: item.date\n                  })]\n                })]\n              });\n            },\n            keyExtractor: function keyExtractor(item) {\n              return item.id;\n            }\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.san,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          san: false\n        }));\n      },\n      size: \"lg\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Controles sanitarios\"\n        }), _jsx(Modal.Body, {\n          children: _jsx(FlatList, {\n            data: list,\n            renderItem: function renderItem(_ref9) {\n              var item = _ref9.item;\n              return _jsxs(HStack, {\n                borderBottomWidth: \"1\",\n                space: \"4\",\n                children: [_jsx(Icon, {\n                  size: \"xl\",\n                  as: MaterialCommunityIcons,\n                  name: \"virus\",\n                  width: \"20%\"\n                }), _jsxs(VStack, {\n                  width: \"65%\",\n                  children: [_jsx(Heading, {\n                    children: item.name\n                  }), _jsx(Text, {\n                    children: item.date\n                  })]\n                })]\n              });\n            },\n            keyExtractor: function keyExtractor(item) {\n              return item.id;\n            }\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.predios,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          predios: false\n        }));\n      },\n      size: \"lg\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Historial de predios\"\n        }), _jsx(Modal.Body, {\n          children: _jsx(FlatList, {\n            data: list,\n            inverted: true,\n            renderItem: function renderItem(_ref10) {\n              var item = _ref10.item;\n              return _jsxs(HStack, {\n                borderBottomWidth: \"1\",\n                space: \"4\",\n                children: [_jsx(Icon, {\n                  size: \"xl\",\n                  as: MaterialCommunityIcons,\n                  name: \"terrain\",\n                  width: \"20%\"\n                }), _jsxs(VStack, {\n                  width: \"65%\",\n                  children: [_jsx(Heading, {\n                    children: item.predio\n                  }), _jsx(Text, {\n                    children: item.date\n                  })]\n                })]\n              });\n            },\n            keyExtractor: function keyExtractor(item) {\n              return item.id;\n            }\n          })\n        })]\n      })\n    })]\n  });\n};\nexport var Vacunas = function Vacunas(_ref11) {\n  var navigation = _ref11.navigation;\n\n  var _React$useState33 = React.useState({\n    show: false,\n    date: 'YYYY-MM-DD'\n  }),\n      _React$useState34 = _slicedToArray(_React$useState33, 2),\n      form = _React$useState34[0],\n      setForm = _React$useState34[1];\n\n  var _React$useState35 = React.useState({}),\n      _React$useState36 = _slicedToArray(_React$useState35, 2),\n      errors = _React$useState36[0],\n      setErrors = _React$useState36[1];\n\n  var _React$useState37 = React.useState({\n    vacuna: false,\n    register: false,\n    delete: false,\n    animals: false,\n    add: false,\n    rm: false\n  }),\n      _React$useState38 = _slicedToArray(_React$useState37, 2),\n      show = _React$useState38[0],\n      setShow = _React$useState38[1];\n\n  var _React$useState39 = React.useState({\n    id: false,\n    name: false,\n    date: false\n  }),\n      _React$useState40 = _slicedToArray(_React$useState39, 2),\n      showPop = _React$useState40[0],\n      setPop = _React$useState40[1];\n\n  var _React$useState41 = React.useState(''),\n      _React$useState42 = _slicedToArray(_React$useState41, 2),\n      search = _React$useState42[0],\n      setSearch = _React$useState42[1];\n\n  var _React$useState43 = React.useState({\n    id: 0,\n    name: 'N/A',\n    date: new Date()\n  }),\n      _React$useState44 = _slicedToArray(_React$useState43, 2),\n      vacuna = _React$useState44[0],\n      setVacuna = _React$useState44[1];\n\n  var _React$useState45 = React.useState([]),\n      _React$useState46 = _slicedToArray(_React$useState45, 2),\n      list = _React$useState46[0],\n      setList = _React$useState46[1];\n\n  var tkn = useSelector(function (state) {\n    return state.jwt;\n  });\n  var mt = useSelector(function (state) {\n    return state.mtr.vacunas;\n  });\n  var vacunas = useSelector(function (state) {\n    return state.vacunas;\n  });\n  var bkp = useSelector(function (state) {\n    return state.bkpVacunas;\n  });\n  var vac_animal = useSelector(function (state) {\n    return state.vac_animal;\n  });\n  var hato = useSelector(function (state) {\n    return state.hato;\n  });\n  var toast = useToast();\n  var dispatch = useDispatch();\n\n  var filtrar = function filtrar(search) {\n    var resultado = bkp.filter(function (vacuna) {\n      if (vacuna.name.toString().toLowerCase().includes(search.toString().toLowerCase())) return vacuna;\n    });\n    dispatch(action.setVacunas(resultado));\n  };\n\n  var handleSearch = function handleSearch(txt) {\n    setSearch(txt);\n    filtrar(txt);\n  };\n\n  var handleVacuna = function handleVacuna(item) {\n    setVacuna(item);\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      vacuna: true\n    }));\n  };\n\n  var handleAnimals = function handleAnimals() {\n    var ids = vac_animal.filter(function (rel) {\n      if (rel.vacuna == vacuna.id) return rel;\n    });\n    var lista = hato.filter(function (animal) {\n      for (var _i3 = 0; _i3 <= ids.length - 1; _i3++) {\n        if (ids[_i3].arete == animal.arete) return true;\n      }\n    });\n\n    if (lista.length > 0) {\n      setList(lista);\n      setShow(_objectSpread(_objectSpread({}, show), {}, {\n        animals: true\n      }));\n    } else toast.show({\n      title: 'Vacio',\n      description: 'No hay animales'\n    });\n  };\n\n  var handleRegister = function handleRegister() {\n    return _regeneratorRuntime.async(function handleRegister$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            NetInfo.fetch().then(function (state) {\n              if (state.isConnected) {\n                action.createVacuna(tkn, {\n                  name: form.name,\n                  fecha: form.date\n                }).then(function (ins) {\n                  setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    register: false\n                  }));\n\n                  if (ins == true) {\n                    toast.show({\n                      title: 'Exito',\n                      status: 'success',\n                      description: 'Animal creado'\n                    });\n                    dispatch(action.getVacunas(tkn));\n                  } else toast.show({\n                    title: 'Error al insertar',\n                    status: 'error',\n                    description: 'Intente de nuevo'\n                  });\n                });\n              } else {\n                dispatch(action.addTrans({\n                  type: 'addVacuna',\n                  data: {\n                    name: form.name,\n                    fecha: form.date\n                  }\n                }));\n                dispatch(action.addVacuna({\n                  name: form.name,\n                  fecha: form.date\n                }));\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleDelete = function handleDelete(id) {\n    return _regeneratorRuntime.async(function handleDelete$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            NetInfo.fetch().then(function (state) {\n              if (state.isConnected) {\n                action.deleteVacuna(tkn, id).then(function (del) {\n                  setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    delete: false\n                  }));\n\n                  if (del == true) {\n                    dispatch(action.getVacunas(tkn));\n                    setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false,\n                      animal: false\n                    }));\n                    toast.show({\n                      title: 'Exito',\n                      status: 'info',\n                      description: 'Vacuna eliminada'\n                    });\n                    setAnimal({});\n                  } else toast.show({\n                    title: 'Error al eliminar',\n                    status: 'error',\n                    description: 'Intente de nuevo'\n                  });\n                });\n              } else {\n                dispatch(action.addTrans({\n                  type: 'delVacuna',\n                  data: id\n                }));\n                dispatch(action.dropVacuna(id));\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleUpdate = function handleUpdate(type) {\n    var date,\n        word,\n        upd,\n        _args11 = arguments;\n    return _regeneratorRuntime.async(function handleUpdate$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            date = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : null;\n            word = '';\n            _context11.t0 = type;\n            _context11.next = _context11.t0 === 'name' ? 5 : _context11.t0 === 'fecha' ? 8 : 10;\n            break;\n\n          case 5:\n            word = form.name;\n            setVacuna(_objectSpread(_objectSpread({}, vacuna), {}, {\n              name: word\n            }));\n            return _context11.abrupt(\"break\", 11);\n\n          case 8:\n            word = date;\n            return _context11.abrupt(\"break\", 11);\n\n          case 10:\n            return _context11.abrupt(\"break\", 11);\n\n          case 11:\n            _context11.next = 13;\n            return _regeneratorRuntime.awrap(action.updateVacuna(tkn, vacuna.id, type, word));\n\n          case 13:\n            upd = _context11.sent;\n\n            if (upd == true) {\n              dispatch(action.getVacunas(tkn));\n              setShow(_objectSpread(_objectSpread({}, show), {}, {\n                vacuna: false\n              }));\n              toast.show({\n                title: 'Actualizacion exitosa',\n                status: 'success'\n              });\n            } else {\n              setShow(_objectSpread(_objectSpread({}, show), {}, {\n                vacuna: false\n              }));\n              toast.show({\n                title: 'Error con el servidor',\n                status: 'error',\n                description: 'Intente de nuevo'\n              });\n            }\n\n          case 15:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Box, {\n      children: [_jsxs(HStack, {\n        space: 2,\n        children: [_jsx(Input, {\n          onChangeText: handleSearch,\n          value: search,\n          placeholder: \"Buscar\",\n          variant: \"filled\",\n          width: \"80%\",\n          borderRadius: \"10\",\n          borderWidth: \"0\",\n          InputLeftElement: _jsx(Icon, {\n            ml: \"2\",\n            size: \"4\",\n            color: \"gray.400\",\n            as: _jsx(Ionicons, {\n              name: \"ios-search\"\n            })\n          })\n        }), _jsx(IconButton, {\n          width: \"15%\",\n          colorScheme: \"rgb(173, 0, 255)\",\n          borderRadius: \"xl\",\n          variant: \"solid\",\n          size: \"lg\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\"\n          }),\n          onPress: function onPress() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              register: true\n            }));\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: vacunas,\n        renderItem: function renderItem(_ref12) {\n          var item = _ref12.item;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              return handleVacuna(item);\n            },\n            children: _jsxs(HStack, {\n              borderBottomWidth: \"1\",\n              space: \"4\",\n              children: [_jsx(Icon, {\n                size: \"xl\",\n                as: MaterialCommunityIcons,\n                name: \"needle\",\n                width: \"20%\"\n              }), _jsxs(VStack, {\n                width: \"65%\",\n                children: [_jsx(Heading, {\n                  children: item.id\n                }), _jsx(Text, {\n                  children: item.name\n                })]\n              })]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        }\n      }), _jsx(Text, {\n        children: mt\n      })]\n    }), _jsx(Modal, {\n      isOpen: show.register,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          register: false\n        }));\n      },\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Registrar vacuna\"\n        }), _jsx(Modal.Body, {\n          children: _jsxs(VStack, {\n            children: [_jsxs(FormControl, {\n              isInvalid: 'name' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Nombre\"\n              }), _jsx(Input, {\n                placeholder: \"Nombre\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    name: value\n                  }));\n                }\n              }), 'name' in errors ? _jsx(FormControl.ErrorMessage, {\n                children: errors.name\n              }) : _jsx(FormControl.HelperText, {})]\n            }), _jsxs(FormControl, {\n              isInvalid: 'fecha' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Fecha de aplicaci\\xF3n\"\n              }), _jsxs(Pressable, {\n                onPress: function onPress() {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    show: true\n                  }));\n                },\n                children: [_jsx(Text, {\n                  fontSize: \"2xs\",\n                  children: \"Fecha de aplicacion\"\n                }), _jsx(Text, {\n                  fontSize: \"md\",\n                  children: form.date\n                }), _jsx(Divider, {})]\n              }), form.show && _jsx(DateTimePicker, {\n                value: new Date(),\n                mode: \"date\",\n                display: \"default\",\n                onChange: function onChange(event, selectedDate) {\n                  var f = selectedDate;\n                  var currentDate = f.getFullYear() + \"-\" + (f.getMonth() + 1) + \"-\" + f.getDate();\n                  setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    date: currentDate,\n                    show: false\n                  }));\n                }\n              })]\n            })]\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(_objectSpread(_objectSpread({}, show), {}, {\n                  register: false\n                }));\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(0, 247, 255)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                handleRegister();\n              },\n              children: \"Registrar vacuna\"\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.vacuna,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          vacuna: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignSelf: \"center\",\n          _text: {\n            fontSize: 'xl',\n            Overridden: 'bold'\n          },\n          children: vacuna.id\n        }), _jsxs(Modal.Body, {\n          children: [_jsxs(VStack, {\n            children: [_jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Nombre\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: vacuna.name\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.name,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: false\n                }));\n              },\n              size: \"xl\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar nombre\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsx(Input, {\n                      placeholder: \"Nuevo nombre\",\n                      onChangeText: function onChangeText(value) {\n                        setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          name: value\n                        }));\n                      }\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        handleUpdate('name');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  date: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Fecha de aplicacion\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: vacuna.date\n              }), _jsx(Divider, {})]\n            }), showPop.date && _jsx(DateTimePicker, {\n              value: new Date(vacuna.date),\n              mode: \"date\",\n              display: \"default\",\n              onChange: function onChange(event, selectedDate) {\n                var f = selectedDate;\n                var currentDate = f.getFullYear() + \"-\" + (f.getMonth() + 1) + \"-\" + f.getDate();\n                setForm(_objectSpread(_objectSpread({}, form), {}, {\n                  date: currentDate\n                }));\n                handleUpdate('fecha', currentDate);\n                setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  date: false\n                }));\n              }\n            })]\n          }), _jsx(Button, {\n            colorScheme: \"rgb(0, 154, 159)\",\n            _text: {\n              color: 'white'\n            },\n            leftIcon: _jsx(Icon, {\n              size: \"md\",\n              as: MaterialCommunityIcons,\n              name: \"cow\"\n            }),\n            onPress: function onPress() {\n              return handleAnimals();\n            },\n            children: \"Hato vacunado\"\n          })]\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(255, 37, 0)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShow(_objectSpread(_objectSpread({}, show), {}, {\n                  delete: true\n                }));\n              },\n              children: \"Borrar\"\n            })]\n          })\n        }), _jsx(AlertDialog, {\n          isOpen: show.delete,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              delete: false\n            }));\n          },\n          children: _jsxs(AlertDialog.Content, {\n            children: [_jsx(AlertDialog.CloseButton, {}), _jsx(AlertDialog.Header, {\n              children: \"Borrar vacuna\"\n            }), _jsx(AlertDialog.Body, {\n              children: \"Esto borrar\\xE1 todos los datos relacionados con esta vacuna. Esta acci\\xF3n no es reversible. Los datos borrados no podr\\xE1n ser recuperados. \\xBFEst\\xE1 seguro de esta acci\\xF3n?\"\n            }), _jsx(AlertDialog.Footer, {\n              children: _jsxs(Button.Group, {\n                space: 2,\n                children: [_jsx(Button, {\n                  variant: \"unstyled\",\n                  colorScheme: \"coolGray\",\n                  onPress: function onPress() {\n                    return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false\n                    }));\n                  },\n                  children: \"Cancelar\"\n                }), _jsx(Button, {\n                  onPress: function onPress() {\n                    handleDelete(vacuna.id);\n                  },\n                  size: \"lg\",\n                  colorScheme: \"rgb(255, 37, 0)\",\n                  _text: {\n                    color: 'white'\n                  },\n                  children: \"Confirmar\"\n                })]\n              })\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.animals,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          animals: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Animales\"\n        }), _jsx(Modal.Body, {\n          children: _jsx(FlatList, {\n            data: list,\n            renderItem: function renderItem(_ref13) {\n              var item = _ref13.item;\n              return _jsxs(HStack, {\n                borderBottomWidth: \"1\",\n                space: \"4\",\n                children: [_jsx(Icon, {\n                  size: \"xl\",\n                  as: MaterialCommunityIcons,\n                  name: \"cow\",\n                  width: \"20%\"\n                }), _jsxs(VStack, {\n                  width: \"65%\",\n                  children: [_jsx(Heading, {\n                    children: item.arete\n                  }), _jsx(Text, {\n                    children: item.name\n                  })]\n                })]\n              });\n            },\n            keyExtractor: function keyExtractor(item) {\n              return item.id;\n            }\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              colorScheme: \"orange\",\n              children: \"Eliminar\"\n            }), _jsx(Button, {\n              children: \"Agregar\"\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nexport var Sanitarios = function Sanitarios(_ref14) {\n  var navigation = _ref14.navigation;\n\n  var _React$useState47 = React.useState({\n    name: '',\n    date: 'YYYY-MM-DD'\n  }),\n      _React$useState48 = _slicedToArray(_React$useState47, 2),\n      form = _React$useState48[0],\n      setForm = _React$useState48[1];\n\n  var _React$useState49 = React.useState({}),\n      _React$useState50 = _slicedToArray(_React$useState49, 2),\n      errors = _React$useState50[0],\n      setErrors = _React$useState50[1];\n\n  var _React$useState51 = React.useState({\n    sanitario: false,\n    register: false,\n    delete: false,\n    animals: false,\n    add: false,\n    rm: false\n  }),\n      _React$useState52 = _slicedToArray(_React$useState51, 2),\n      show = _React$useState52[0],\n      setShow = _React$useState52[1];\n\n  var _React$useState53 = React.useState({\n    id: false,\n    name: false,\n    date: false\n  }),\n      _React$useState54 = _slicedToArray(_React$useState53, 2),\n      showPop = _React$useState54[0],\n      setPop = _React$useState54[1];\n\n  var _React$useState55 = React.useState(''),\n      _React$useState56 = _slicedToArray(_React$useState55, 2),\n      search = _React$useState56[0],\n      setSearch = _React$useState56[1];\n\n  var _React$useState57 = React.useState({\n    id: 0,\n    name: 'N/A',\n    date: new Date()\n  }),\n      _React$useState58 = _slicedToArray(_React$useState57, 2),\n      sanitario = _React$useState58[0],\n      setSanitario = _React$useState58[1];\n\n  var _React$useState59 = React.useState([]),\n      _React$useState60 = _slicedToArray(_React$useState59, 2),\n      list = _React$useState60[0],\n      setList = _React$useState60[1];\n\n  var mt = useSelector(function (state) {\n    return state.mtr.sanitarios;\n  });\n  var sanitarios = useSelector(function (state) {\n    return state.sanitarios;\n  });\n  var bkp = useSelector(function (state) {\n    return state.bkpSanitarios;\n  });\n  var hato = useSelector(function (state) {\n    return state.hato;\n  });\n  var ctl_animal = useSelector(function (state) {\n    return state.ctl_animal;\n  });\n  var tkn = useSelector(function (state) {\n    return state.jwt;\n  });\n  var toast = useToast();\n  var dispatch = useDispatch();\n\n  var filtrar = function filtrar(search) {\n    var resultado = bkp.filter(function (sanitario) {\n      if (sanitario.name.toString().toLowerCase().includes(search.toString().toLowerCase())) return sanitario;\n    });\n    dispatch(action.setSanitarios(resultado));\n  };\n\n  var handleSearch = function handleSearch(txt) {\n    setSearch(txt);\n    filtrar(txt);\n  };\n\n  var handleSanitario = function handleSanitario(item) {\n    setSanitario(item);\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      sanitario: true\n    }));\n  };\n\n  var handleAnimals = function handleAnimals() {\n    var ids = ctl_animal.filter(function (rel) {\n      if (rel.ctl == sanitario.id) return rel;\n    });\n    var lista = hato.filter(function (animal) {\n      for (var _i4 = 0; _i4 <= ids.length - 1; _i4++) {\n        if (ids[_i4].arete == animal.arete) return true;\n      }\n    });\n\n    if (lista.length > 0) {\n      setList(lista);\n      setShow(_objectSpread(_objectSpread({}, show), {}, {\n        animals: true\n      }));\n    } else toast.show({\n      title: 'Vacio',\n      description: 'No hay animales'\n    });\n  };\n\n  var handleRegister = function handleRegister() {\n    var nuevo;\n    return _regeneratorRuntime.async(function handleRegister$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            nuevo = {\n              name: form.name,\n              fecha: form.date\n            };\n            NetInfo.fetch().then(function (state) {\n              if (state.isConnected) {\n                action.createSanitario(tkn, nuevo).then(function (ins) {\n                  setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    register: false\n                  }));\n\n                  if (ins == true) {\n                    toast.show({\n                      title: 'Exito',\n                      status: 'success',\n                      description: 'Registro creado'\n                    });\n                    dispatch(action.getSanitarios(tkn));\n                  } else toast.show({\n                    title: 'Error al insertar',\n                    status: 'error',\n                    description: 'Intente de nuevo'\n                  });\n                });\n              } else {\n                dispatch(action.addTrans({\n                  type: 'addSanitario',\n                  data: nuevo\n                }));\n                dispatch(action.addSanitario(nuevo));\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleDelete = function handleDelete(id) {\n    return _regeneratorRuntime.async(function handleDelete$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            NetInfo.fetch().then(function (state) {\n              if (state.isConnected) {\n                action.deleteSanitario(tkn, id).then(function (del) {\n                  setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    delete: false\n                  }));\n\n                  if (del == true) {\n                    dispatch(action.getSanitarios(tkn));\n                    setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false,\n                      sanitario: false\n                    }));\n                    toast.show({\n                      title: 'Exito',\n                      status: 'info',\n                      description: 'Sanitario eliminada'\n                    });\n                    setAnimal({});\n                  } else toast.show({\n                    title: 'Error al eliminar',\n                    status: 'error',\n                    description: 'Intente de nuevo'\n                  });\n                });\n              } else {\n                dispatch(action.addTrans({\n                  type: 'delSanitario',\n                  data: id\n                }));\n                dispatch(action.dropSanitario(id));\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleUpdate = function handleUpdate(type) {\n    var date,\n        word,\n        upd,\n        _args14 = arguments;\n    return _regeneratorRuntime.async(function handleUpdate$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            date = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : null;\n            word = '';\n            _context14.t0 = type;\n            _context14.next = _context14.t0 === 'name' ? 5 : _context14.t0 === 'fecha' ? 8 : 10;\n            break;\n\n          case 5:\n            word = form.name;\n            setSanitario(_objectSpread(_objectSpread({}, sanitario), {}, {\n              name: word\n            }));\n            return _context14.abrupt(\"break\", 11);\n\n          case 8:\n            word = date;\n            return _context14.abrupt(\"break\", 11);\n\n          case 10:\n            return _context14.abrupt(\"break\", 11);\n\n          case 11:\n            _context14.next = 13;\n            return _regeneratorRuntime.awrap(action.updateSanitario(tkn, sanitario.id, type, word));\n\n          case 13:\n            upd = _context14.sent;\n\n            if (upd == true) {\n              dispatch(action.getSanitarios(tkn));\n              setShow(_objectSpread(_objectSpread({}, show), {}, {\n                sanitario: false\n              }));\n              toast.show({\n                title: 'Actualizacion exitosa',\n                status: 'success'\n              });\n            } else {\n              setShow(_objectSpread(_objectSpread({}, show), {}, {\n                sanitario: false\n              }));\n              toast.show({\n                title: 'Error con el servidor',\n                status: 'error',\n                description: 'Intente de nuevo'\n              });\n            }\n\n          case 15:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Box, {\n      children: [_jsxs(HStack, {\n        space: 2,\n        children: [_jsx(Input, {\n          onChangeText: handleSearch,\n          value: search,\n          placeholder: \"Buscar\",\n          variant: \"filled\",\n          width: \"80%\",\n          borderRadius: \"10\",\n          borderWidth: \"0\",\n          InputLeftElement: _jsx(Icon, {\n            ml: \"2\",\n            size: \"4\",\n            color: \"gray.400\",\n            as: _jsx(Ionicons, {\n              name: \"ios-search\"\n            })\n          })\n        }), _jsx(IconButton, {\n          width: \"15%\",\n          colorScheme: \"rgb(173, 0, 255)\",\n          borderRadius: \"xl\",\n          variant: \"solid\",\n          size: \"lg\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\"\n          }),\n          onPress: function onPress() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              register: true\n            }));\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: sanitarios,\n        renderItem: function renderItem(_ref15) {\n          var item = _ref15.item;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              return handleSanitario(item);\n            },\n            children: _jsxs(HStack, {\n              borderBottomWidth: \"1\",\n              space: \"4\",\n              children: [_jsx(Icon, {\n                size: \"xl\",\n                as: MaterialCommunityIcons,\n                name: \"virus\",\n                width: \"20%\"\n              }), _jsxs(VStack, {\n                width: \"65%\",\n                children: [_jsx(Heading, {\n                  children: item.id\n                }), _jsx(Text, {\n                  children: item.name\n                })]\n              })]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        }\n      }), _jsx(Text, {\n        children: mt\n      })]\n    }), _jsx(Modal, {\n      isOpen: show.register,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          register: false\n        }));\n      },\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Nuevo control sanitario\"\n        }), _jsx(Modal.Body, {\n          children: _jsxs(VStack, {\n            children: [_jsxs(FormControl, {\n              isInvalid: 'name' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Nombre\"\n              }), _jsx(Input, {\n                placeholder: \"Nombre\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    name: value\n                  }));\n                }\n              }), 'name' in errors ? _jsx(FormControl.ErrorMessage, {\n                children: errors.name\n              }) : _jsx(FormControl.HelperText, {})]\n            }), _jsxs(FormControl, {\n              isInvalid: 'fecha' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Fecha de aplicaci\\xF3n\"\n              }), _jsxs(Pressable, {\n                onPress: function onPress() {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    show: true\n                  }));\n                },\n                children: [_jsx(Text, {\n                  fontSize: \"2xs\",\n                  children: \"Fecha de aplicacion\"\n                }), _jsx(Text, {\n                  fontSize: \"md\",\n                  children: form.date\n                }), _jsx(Divider, {})]\n              }), form.show && _jsx(DateTimePicker, {\n                value: new Date(),\n                mode: \"date\",\n                display: \"default\",\n                onChange: function onChange(event, selectedDate) {\n                  var f = selectedDate;\n                  var currentDate = f.getFullYear() + \"-\" + (f.getMonth() + 1) + \"-\" + f.getDate();\n                  setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    show: false,\n                    date: currentDate\n                  }));\n                }\n              })]\n            })]\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(0, 247, 255)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                handleRegister();\n              },\n              children: \"Crear\"\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.sanitario,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          sanitario: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignSelf: \"center\",\n          _text: {\n            fontSize: 'xl',\n            Overridden: 'bold'\n          },\n          children: sanitario.id\n        }), _jsxs(Modal.Body, {\n          children: [_jsxs(VStack, {\n            children: [_jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Nombre\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: sanitario.name\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.name,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: false\n                }));\n              },\n              size: \"xl\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar nombre\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsx(Input, {\n                      placeholder: \"Nuevo nombre\",\n                      onChangeText: function onChangeText(value) {\n                        setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          name: value\n                        }));\n                      }\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        handleUpdate('name');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  date: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Fecha de aplicacion\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: sanitario.date\n              }), _jsx(Divider, {})]\n            }), showPop.date && _jsx(DateTimePicker, {\n              value: new Date(sanitario.date),\n              mode: \"date\",\n              display: \"default\",\n              onChange: function onChange(event, selectedDate) {\n                var f = selectedDate;\n                var currentDate = f.getFullYear() + \"-\" + (f.getMonth() + 1) + \"-\" + f.getDate();\n                setForm(_objectSpread(_objectSpread({}, form), {}, {\n                  date: currentDate\n                }));\n                handleUpdate('fecha', currentDate);\n                setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  date: false\n                }));\n              }\n            })]\n          }), _jsx(Button, {\n            colorScheme: \"rgb(0, 154, 159)\",\n            _text: {\n              color: 'white'\n            },\n            leftIcon: _jsx(Icon, {\n              size: \"md\",\n              as: MaterialCommunityIcons,\n              name: \"cow\"\n            }),\n            onPress: function onPress() {\n              return handleAnimals();\n            },\n            children: \"Hato de control\"\n          })]\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(255, 37, 0)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShow(_objectSpread(_objectSpread({}, show), {}, {\n                  delete: true\n                }));\n              },\n              children: \"Borrar\"\n            })]\n          })\n        }), _jsx(AlertDialog, {\n          isOpen: show.delete,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              delete: false\n            }));\n          },\n          children: _jsxs(AlertDialog.Content, {\n            children: [_jsx(AlertDialog.CloseButton, {}), _jsx(AlertDialog.Header, {\n              children: \"Borrar control sanitario\"\n            }), _jsx(AlertDialog.Body, {\n              children: \"Esto borrar\\xE1 todos los datos relacionados con esta control sanitario. Esta acci\\xF3n no es reversible. Los datos borrados no podr\\xE1n ser recuperados. \\xBFEst\\xE1 seguro de esta acci\\xF3n?\"\n            }), _jsx(AlertDialog.Footer, {\n              children: _jsxs(Button.Group, {\n                space: 2,\n                children: [_jsx(Button, {\n                  variant: \"unstyled\",\n                  colorScheme: \"coolGray\",\n                  onPress: function onPress() {\n                    return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false\n                    }));\n                  },\n                  children: \"Cancelar\"\n                }), _jsx(Button, {\n                  onPress: function onPress() {\n                    handleDelete(sanitario.id);\n                  },\n                  size: \"lg\",\n                  colorScheme: \"rgb(255, 37, 0)\",\n                  _text: {\n                    color: 'white'\n                  },\n                  children: \"Confirmar\"\n                })]\n              })\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.animals,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          animals: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Animales\"\n        }), _jsx(Modal.Body, {\n          children: _jsx(FlatList, {\n            data: list,\n            renderItem: function renderItem(_ref16) {\n              var item = _ref16.item;\n              return _jsxs(HStack, {\n                borderBottomWidth: \"1\",\n                space: \"4\",\n                children: [_jsx(Icon, {\n                  size: \"xl\",\n                  as: MaterialCommunityIcons,\n                  name: \"cow\",\n                  width: \"20%\"\n                }), _jsxs(VStack, {\n                  width: \"65%\",\n                  children: [_jsx(Heading, {\n                    children: item.arete\n                  }), _jsx(Text, {\n                    children: item.name\n                  })]\n                })]\n              });\n            },\n            keyExtractor: function keyExtractor(item) {\n              return item.id;\n            }\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              colorScheme: \"orange\",\n              children: \"Eliminar\"\n            }), _jsx(Button, {\n              children: \"Agregar\"\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nexport var Embarazos = function Embarazos(_ref17) {\n  var navigation = _ref17.navigation;\n\n  var _React$useState61 = React.useState({\n    show: false,\n    date: 'YYYY-MM-DD'\n  }),\n      _React$useState62 = _slicedToArray(_React$useState61, 2),\n      form = _React$useState62[0],\n      setForm = _React$useState62[1];\n\n  var _React$useState63 = React.useState({}),\n      _React$useState64 = _slicedToArray(_React$useState63, 2),\n      errors = _React$useState64[0],\n      setErrors = _React$useState64[1];\n\n  var _React$useState65 = React.useState({\n    embarazo: false,\n    register: false,\n    delete: false,\n    animals: false\n  }),\n      _React$useState66 = _slicedToArray(_React$useState65, 2),\n      show = _React$useState66[0],\n      setShow = _React$useState66[1];\n\n  var _React$useState67 = React.useState({\n    id: false,\n    name: false,\n    inicio: false,\n    fin: false\n  }),\n      _React$useState68 = _slicedToArray(_React$useState67, 2),\n      showPop = _React$useState68[0],\n      setPop = _React$useState68[1];\n\n  var _React$useState69 = React.useState(''),\n      _React$useState70 = _slicedToArray(_React$useState69, 2),\n      search = _React$useState70[0],\n      setSearch = _React$useState70[1];\n\n  var _React$useState71 = React.useState({\n    id: 0,\n    name: 'N/A',\n    inicio: 'YYYY-MM-DD',\n    fin: 'YYYY-MM-DD'\n  }),\n      _React$useState72 = _slicedToArray(_React$useState71, 2),\n      embarazo = _React$useState72[0],\n      setEmbarazo = _React$useState72[1];\n\n  var mt = useSelector(function (state) {\n    return state.mtr.embarazos;\n  });\n  var embarazos = useSelector(function (state) {\n    return state.embarazos;\n  });\n  var bkp = useSelector(function (state) {\n    return state.bkpEmbarazos;\n  });\n  var dispatch = useDispatch();\n\n  var filtrar = function filtrar(search) {\n    var resultado = bkp.filter(function (embarazo) {\n      if (embarazo.date.toString().toLowerCase().includes(search.toString().toLowerCase())) return embarazo;\n    });\n    dispatch(action.setEmbarazos(resultado));\n  };\n\n  var handleSearch = function handleSearch(txt) {\n    setSearch(txt);\n    filtrar(txt);\n  };\n\n  var handleEmbarazo = function handleEmbarazo(item) {\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      embarazo: true\n    }));\n  };\n\n  var handleUpdate = function handleUpdate(type) {\n    console.log(type);\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Box, {\n      children: [_jsxs(HStack, {\n        space: 2,\n        children: [_jsx(Input, {\n          onChangeText: handleSearch,\n          value: search,\n          placeholder: \"Buscar\",\n          variant: \"filled\",\n          width: \"80%\",\n          borderRadius: \"10\",\n          borderWidth: \"0\",\n          InputLeftElement: _jsx(Icon, {\n            ml: \"2\",\n            size: \"4\",\n            color: \"gray.400\",\n            as: _jsx(Ionicons, {\n              name: \"ios-search\"\n            })\n          })\n        }), _jsx(IconButton, {\n          width: \"15%\",\n          colorScheme: \"rgb(173, 0, 255)\",\n          borderRadius: \"xl\",\n          variant: \"solid\",\n          size: \"lg\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\"\n          }),\n          onPress: function onPress() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              register: true\n            }));\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: embarazos,\n        renderItem: function renderItem(_ref18) {\n          var item = _ref18.item;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              return handleEmbarazo(item);\n            },\n            children: _jsxs(HStack, {\n              borderBottomWidth: \"1\",\n              space: \"4\",\n              children: [_jsx(Icon, {\n                size: \"xl\",\n                as: MaterialCommunityIcons,\n                name: \"dna\",\n                width: \"20%\"\n              }), _jsx(VStack, {\n                width: \"65%\",\n                children: _jsx(Heading, {\n                  children: item.id\n                })\n              })]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        }\n      }), _jsx(Text, {\n        children: mt\n      })]\n    }), _jsx(Modal, {\n      isOpen: show.register,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          register: false\n        }));\n      },\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Registrar Embarazo\"\n        }), _jsx(Modal.Body, {\n          children: _jsxs(VStack, {\n            children: [_jsxs(FormControl, {\n              isInvalid: 'name' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Nombre\"\n              }), _jsx(Input, {\n                placeholder: \"Nombre\",\n                onChangeText: function onChangeText(value) {\n                  return setData(_objectSpread(_objectSpread({}, data), {}, {\n                    nombre: value\n                  }));\n                }\n              }), 'name' in errors ? _jsx(FormControl.ErrorMessage, {\n                children: errors.name\n              }) : _jsx(FormControl.HelperText, {})]\n            }), _jsxs(FormControl, {\n              isInvalid: 'fecha' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Fecha de aplicaci\\xF3n\"\n              }), _jsxs(Pressable, {\n                onPress: function onPress() {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    show: true\n                  }));\n                },\n                children: [_jsx(Text, {\n                  fontSize: \"2xs\",\n                  children: \"Fecha de aplicacion\"\n                }), _jsx(Text, {\n                  fontSize: \"md\",\n                  children: form.date\n                }), _jsx(Divider, {})]\n              }), form.show && _jsx(DateTimePicker, {\n                value: new Date(),\n                mode: \"date\",\n                display: \"default\",\n                onChange: function onChange(event, selectedDate) {\n                  var f = selectedDate;\n                  var currentDate = f.getFullYear() + \"-\" + f.getMonth() + \"-\" + f.getDate();\n                  setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    date: currentDate,\n                    show: false\n                  }));\n                }\n              })]\n            })]\n          })\n        }), _jsx(Modal.Footer, {}), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(255, 37, 0)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShowDel(true);\n              },\n              children: \"Borrar\"\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nexport var Pesajes = function Pesajes(_ref19) {\n  var navigation = _ref19.navigation;\n\n  var _React$useState73 = React.useState({\n    show: false,\n    date: 'YYYY-MM-DD',\n    kg: 0\n  }),\n      _React$useState74 = _slicedToArray(_React$useState73, 2),\n      form = _React$useState74[0],\n      setForm = _React$useState74[1];\n\n  var _React$useState75 = React.useState({}),\n      _React$useState76 = _slicedToArray(_React$useState75, 2),\n      errors = _React$useState76[0],\n      setErrors = _React$useState76[1];\n\n  var _React$useState77 = React.useState({\n    pesaje: false,\n    register: false,\n    delete: false\n  }),\n      _React$useState78 = _slicedToArray(_React$useState77, 2),\n      show = _React$useState78[0],\n      setShow = _React$useState78[1];\n\n  var _React$useState79 = React.useState({\n    date: false,\n    kg: false\n  }),\n      _React$useState80 = _slicedToArray(_React$useState79, 2),\n      showPop = _React$useState80[0],\n      setPop = _React$useState80[1];\n\n  var _React$useState81 = React.useState(''),\n      _React$useState82 = _slicedToArray(_React$useState81, 2),\n      search = _React$useState82[0],\n      setSearch = _React$useState82[1];\n\n  var _React$useState83 = React.useState({\n    id: 0,\n    arete: 'N/A',\n    kg: 0,\n    date: new Date()\n  }),\n      _React$useState84 = _slicedToArray(_React$useState83, 2),\n      pesaje = _React$useState84[0],\n      setPesaje = _React$useState84[1];\n\n  var mt = useSelector(function (state) {\n    return state.mtr.pesajes;\n  });\n  var pesajes = useSelector(function (state) {\n    return state.pesajes;\n  });\n  var bkp = useSelector(function (state) {\n    return state.bkpPesajes;\n  });\n  var tkn = useSelector(function (state) {\n    return state.jwt;\n  });\n  var dispatch = useDispatch();\n  var toast = useToast();\n\n  var filtrar = function filtrar(search) {\n    var resultado = bkp.filter(function (pesaje) {\n      if (pesaje.arete.toString().toLowerCase().includes(search.toString().toLowerCase())) return pesaje;\n    });\n    dispatch(action.setPesajes(resultado));\n  };\n\n  var handleSearch = function handleSearch(txt) {\n    setSearch(txt);\n    filtrar(txt);\n  };\n\n  var handlePesaje = function handlePesaje(item) {\n    setPesaje(item);\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      pesaje: true\n    }));\n  };\n\n  var handleRegister = function handleRegister() {\n    var nuevo;\n    return _regeneratorRuntime.async(function handleRegister$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            nuevo = {\n              arete: form.arete,\n              kg: form.kg,\n              fecha: form.date\n            };\n            NetInfo.fetch().then(function (state) {\n              if (state.isConnected) {\n                action.createPesaje(tkn, nuevo).then(function (ins) {\n                  setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    register: false\n                  }));\n\n                  if (ins == true) {\n                    toast.show({\n                      title: 'Exito',\n                      status: 'success',\n                      description: 'Pesaje creado'\n                    });\n                    dispatch(action.getPesajes(tkn));\n                  } else toast.show({\n                    title: 'Error al insertar',\n                    status: 'error',\n                    description: 'Intente de nuevo'\n                  });\n                });\n              } else {\n                dispatch(action.addTrans({\n                  type: 'addPesaje',\n                  data: nuevo\n                }));\n                dispatch(action.addPesaje(nuevo));\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleDelete = function handleDelete(id) {\n    return _regeneratorRuntime.async(function handleDelete$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            NetInfo.fetch().then(function (state) {\n              if (state.isConnected) {\n                action.deletePesaje(tkn, id).then(function (del) {\n                  setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    delete: false\n                  }));\n\n                  if (del == true) {\n                    dispatch(action.getPesajes(tkn));\n                    setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false,\n                      pesaje: false\n                    }));\n                    toast.show({\n                      title: 'Exito',\n                      status: 'info',\n                      description: 'Pesaje eliminada'\n                    });\n                  } else toast.show({\n                    title: 'Error al eliminar',\n                    status: 'error',\n                    description: 'Intente de nuevo'\n                  });\n                });\n              } else {\n                dispatch(action.addTrans({\n                  type: 'delPesaje',\n                  data: id\n                }));\n                dispatch(action.dropPesaje(id));\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Box, {\n      children: [_jsxs(HStack, {\n        space: 2,\n        children: [_jsx(Input, {\n          onChangeText: handleSearch,\n          value: search,\n          placeholder: \"Buscar\",\n          variant: \"filled\",\n          width: \"80%\",\n          borderRadius: \"10\",\n          borderWidth: \"0\",\n          InputLeftElement: _jsx(Icon, {\n            ml: \"2\",\n            size: \"4\",\n            color: \"gray.400\",\n            as: _jsx(Ionicons, {\n              name: \"ios-search\"\n            })\n          })\n        }), _jsx(IconButton, {\n          width: \"15%\",\n          colorScheme: \"rgb(173, 0, 255)\",\n          borderRadius: \"xl\",\n          variant: \"solid\",\n          size: \"lg\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\"\n          }),\n          onPress: function onPress() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              register: true\n            }));\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: pesajes,\n        renderItem: function renderItem(_ref20) {\n          var item = _ref20.item;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              return handlePesaje(item);\n            },\n            children: _jsxs(HStack, {\n              borderBottomWidth: \"1\",\n              space: \"4\",\n              children: [_jsx(Icon, {\n                size: \"xl\",\n                as: MaterialCommunityIcons,\n                name: \"weight\",\n                width: \"20%\"\n              }), _jsxs(VStack, {\n                width: \"65%\",\n                children: [_jsx(Heading, {\n                  children: item.arete\n                }), _jsx(Text, {\n                  children: item.kg\n                })]\n              })]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        }\n      }), _jsx(Text, {\n        children: mt\n      })]\n    }), _jsx(Modal, {\n      isOpen: show.register,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          register: false\n        }));\n      },\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Nuevo pesaje\"\n        }), _jsx(Modal.Body, {\n          children: _jsxs(VStack, {\n            children: [_jsxs(FormControl, {\n              isInvalid: 'arete' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Arete\"\n              }), _jsx(Input, {\n                placeholder: \"Arete\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    arete: value\n                  }));\n                }\n              }), 'arete' in errors ? _jsx(FormControl.ErrorMessage, {\n                children: errors.arete\n              }) : _jsx(FormControl.HelperText, {})]\n            }), _jsxs(FormControl, {\n              isInvalid: 'kg' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Peso\"\n              }), _jsx(Input, {\n                placeholder: \"Peso\",\n                keyboardType: \"numeric\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    kg: value\n                  }));\n                }\n              }), 'arete' in errors ? _jsx(FormControl.ErrorMessage, {\n                children: errors.kg\n              }) : _jsx(FormControl.HelperText, {})]\n            }), _jsxs(FormControl, {\n              isInvalid: 'fecha' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Fecha \"\n              }), _jsxs(Pressable, {\n                onPress: function onPress() {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    show: true\n                  }));\n                },\n                children: [_jsx(Text, {\n                  fontSize: \"md\",\n                  children: form.date\n                }), _jsx(Divider, {})]\n              }), form.show && _jsx(DateTimePicker, {\n                value: new Date(),\n                mode: \"date\",\n                display: \"default\",\n                onChange: function onChange(event, selectedDate) {\n                  var f = selectedDate;\n                  var currentDate = f.getFullYear() + \"-\" + f.getMonth() + \"-\" + f.getDate();\n                  setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    show: false,\n                    date: currentDate\n                  }));\n                }\n              })]\n            })]\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(0, 247, 255)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                handleRegister();\n              },\n              children: \"Crear\"\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.pesaje,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          pesaje: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignSelf: \"center\",\n          _text: {\n            fontSize: 'xl',\n            Overridden: 'bold'\n          },\n          children: pesaje.arete\n        }), _jsx(Modal.Body, {\n          children: _jsxs(VStack, {\n            children: [_jsx(Text, {\n              fontSize: \"2xs\",\n              children: \"Peso\"\n            }), _jsx(Text, {\n              fontSize: \"md\",\n              children: pesaje.kg\n            }), _jsx(Divider, {}), _jsx(Text, {\n              fontSize: \"2xs\",\n              children: \"Fecha de registro\"\n            }), _jsx(Text, {\n              fontSize: \"md\",\n              children: pesaje.date\n            }), _jsx(Divider, {})]\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(255, 37, 0)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShow(_objectSpread(_objectSpread({}, show), {}, {\n                  delete: true\n                }));\n              },\n              children: \"Borrar\"\n            })]\n          })\n        }), _jsx(AlertDialog, {\n          isOpen: show.delete,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              delete: false\n            }));\n          },\n          children: _jsxs(AlertDialog.Content, {\n            children: [_jsx(AlertDialog.CloseButton, {}), _jsx(AlertDialog.Header, {\n              children: \"Borrar pesaje\"\n            }), _jsx(AlertDialog.Body, {\n              children: \"Esto borrar\\xE1 todos los datos relacionados con esta pesaje. Esta acci\\xF3n no es reversible. Los datos borrados no podr\\xE1n ser recuperados. \\xBFEst\\xE1 seguro de esta acci\\xF3n?\"\n            }), _jsx(AlertDialog.Footer, {\n              children: _jsxs(Button.Group, {\n                space: 2,\n                children: [_jsx(Button, {\n                  variant: \"unstyled\",\n                  colorScheme: \"coolGray\",\n                  onPress: function onPress() {\n                    return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false\n                    }));\n                  },\n                  children: \"Cancelar\"\n                }), _jsx(Button, {\n                  onPress: function onPress() {\n                    handleDelete(pesaje.id);\n                  },\n                  size: \"lg\",\n                  colorScheme: \"rgb(255, 37, 0)\",\n                  _text: {\n                    color: 'white'\n                  },\n                  children: \"Confirmar\"\n                })]\n              })\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nexport var Predios = function Predios(_ref21) {\n  var navitagion = _ref21.navitagion;\n\n  var _React$useState85 = React.useState({\n    agua: 1,\n    pasto: 1\n  }),\n      _React$useState86 = _slicedToArray(_React$useState85, 2),\n      form = _React$useState86[0],\n      setForm = _React$useState86[1];\n\n  var _React$useState87 = React.useState({}),\n      _React$useState88 = _slicedToArray(_React$useState87, 2),\n      errors = _React$useState88[0],\n      setErrors = _React$useState88[1];\n\n  var _React$useState89 = React.useState({\n    predio: false,\n    register: false,\n    delete: false,\n    animals: false\n  }),\n      _React$useState90 = _slicedToArray(_React$useState89, 2),\n      show = _React$useState90[0],\n      setShow = _React$useState90[1];\n\n  var _React$useState91 = React.useState({\n    id: false,\n    name: false,\n    agua: false,\n    pasto: false\n  }),\n      _React$useState92 = _slicedToArray(_React$useState91, 2),\n      showPop = _React$useState92[0],\n      setPop = _React$useState92[1];\n\n  var _React$useState93 = React.useState(''),\n      _React$useState94 = _slicedToArray(_React$useState93, 2),\n      search = _React$useState94[0],\n      setSearch = _React$useState94[1];\n\n  var _React$useState95 = React.useState({\n    id: 0,\n    name: 'N/A',\n    agua: 1,\n    pasto: 1\n  }),\n      _React$useState96 = _slicedToArray(_React$useState95, 2),\n      predio = _React$useState96[0],\n      setPredio = _React$useState96[1];\n\n  var _React$useState97 = React.useState([]),\n      _React$useState98 = _slicedToArray(_React$useState97, 2),\n      list = _React$useState98[0],\n      setList = _React$useState98[1];\n\n  var mt = useSelector(function (state) {\n    return state.mtr.predios;\n  });\n  var predios = useSelector(function (state) {\n    return state.predios;\n  });\n  var bkp = useSelector(function (state) {\n    return state.bkpPredios;\n  });\n  var pre_animal = useSelector(function (state) {\n    return state.pre_animal;\n  });\n  var hato = useSelector(function (state) {\n    return state.hato;\n  });\n  var tkn = useSelector(function (state) {\n    return state.jwt;\n  });\n  var dispatch = useDispatch();\n  var toast = useToast();\n\n  var filtrar = function filtrar(search) {\n    var resultado = bkp.filter(function (predio) {\n      if (predio.name.toString().toLowerCase().includes(search.toString().toLowerCase())) return predio;\n    });\n    dispatch(action.setPredios(resultado));\n  };\n\n  var handleSearch = function handleSearch(txt) {\n    setSearch(txt);\n    filtrar(txt);\n  };\n\n  var handlePredio = function handlePredio(item) {\n    setPredio(item);\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      predio: true\n    }));\n  };\n\n  var handleAnimals = function handleAnimals() {\n    var trans = pre_animal.filter(function (rel) {\n      if (rel.predio == predio.id) return rel;\n    });\n    var rec = trans.filter(function (tran) {\n      var ultimo = true;\n      var ani = pre_animal.filter(function (rel) {\n        if (rel.arete == tran.arete && rel.predio != tran.predio) return true;\n      });\n      console.log(ani);\n\n      for (i = 0; i <= ani.length - 1; i++) {\n        if (new Date(ani[i].date).getDate() > new Date(tran.date).getDate()) ultimo = false;\n      }\n\n      console.log(ultimo);\n      return ultimo;\n    });\n    var lista = hato.filter(function (animal) {\n      for (var _i5 = 0; _i5 <= rec.length - 1; _i5++) {\n        if (rec[_i5].arete == animal.arete) return true;\n      }\n    });\n\n    if (lista.length > 0) {\n      setList(lista);\n      setShow(_objectSpread(_objectSpread({}, show), {}, {\n        animals: true\n      }));\n    } else toast.show({\n      title: 'Vacio',\n      description: 'No hay animales'\n    });\n  };\n\n  var handleRegister = function handleRegister() {\n    var nuevo;\n    return _regeneratorRuntime.async(function handleRegister$(_context17) {\n      while (1) {\n        switch (_context17.prev = _context17.next) {\n          case 0:\n            nuevo = {\n              name: form.name,\n              agua: form.agua,\n              pasto: form.pasto\n            };\n            NetInfo.fetch().then(function (state) {\n              if (state.isConnected) {\n                action.createPredio(tkn, nuevo).then(function (ins) {\n                  setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    register: false\n                  }));\n\n                  if (ins == true) {\n                    toast.show({\n                      title: 'Exito',\n                      status: 'success',\n                      description: 'Predio creado'\n                    });\n                    dispatch(action.getPredios(tkn));\n                  } else toast.show({\n                    title: 'Error al insertar',\n                    status: 'error',\n                    description: 'Intente de nuevo'\n                  });\n                });\n              } else {\n                dispatch(action.addTrans({\n                  type: 'addPredio',\n                  data: nuevo\n                }));\n                dispatch(action.createPredio(nuevo));\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context17.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleDelete = function handleDelete(id) {\n    return _regeneratorRuntime.async(function handleDelete$(_context18) {\n      while (1) {\n        switch (_context18.prev = _context18.next) {\n          case 0:\n            NetInfo.fetch().then(function (state) {\n              if (state.isConnected) {\n                action.deletePredio(tkn, id).then(function (del) {\n                  setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    delete: false\n                  }));\n\n                  if (del == true) {\n                    dispatch(action.getPredios(tkn));\n                    setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false,\n                      predio: false\n                    }));\n                    toast.show({\n                      title: 'Exito',\n                      status: 'info',\n                      description: 'Predio eliminada'\n                    });\n                    setAnimal({});\n                  } else toast.show({\n                    title: 'Error al eliminar',\n                    status: 'error',\n                    description: 'Intente de nuevo'\n                  });\n                });\n              } else {\n                dispatch(action.addTrans({\n                  type: 'delPredio',\n                  data: id\n                }));\n                dispatch(action.deletePredio(id));\n              }\n            });\n\n          case 1:\n          case \"end\":\n            return _context18.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleUpdate = function handleUpdate(type) {\n    var date,\n        word,\n        upd,\n        _args19 = arguments;\n    return _regeneratorRuntime.async(function handleUpdate$(_context19) {\n      while (1) {\n        switch (_context19.prev = _context19.next) {\n          case 0:\n            date = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : null;\n            word = '';\n            _context19.t0 = type;\n            _context19.next = _context19.t0 === 'name' ? 5 : _context19.t0 === 'agua' ? 8 : _context19.t0 === 'pasto' ? 10 : 12;\n            break;\n\n          case 5:\n            word = form.name;\n            setPredio(_objectSpread(_objectSpread({}, predio), {}, {\n              name: word\n            }));\n            return _context19.abrupt(\"break\", 13);\n\n          case 8:\n            word = form.agua;\n            return _context19.abrupt(\"break\", 13);\n\n          case 10:\n            word = form.pasto;\n            return _context19.abrupt(\"break\", 13);\n\n          case 12:\n            return _context19.abrupt(\"break\", 13);\n\n          case 13:\n            _context19.next = 15;\n            return _regeneratorRuntime.awrap(action.updatePredio(tkn, predio.id, type, word));\n\n          case 15:\n            upd = _context19.sent;\n\n            if (upd == true) {\n              dispatch(action.getPredios(tkn));\n              setShow(_objectSpread(_objectSpread({}, show), {}, {\n                predio: false\n              }));\n              toast.show({\n                title: 'Actualizacion exitosa',\n                status: 'success'\n              });\n            } else {\n              setShow(_objectSpread(_objectSpread({}, show), {}, {\n                predio: false\n              }));\n              toast.show({\n                title: 'Error con el servidor',\n                status: 'error',\n                description: 'Intente de nuevo'\n              });\n            }\n\n          case 17:\n          case \"end\":\n            return _context19.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Box, {\n      children: [_jsxs(HStack, {\n        space: 2,\n        children: [_jsx(Input, {\n          onChangeText: handleSearch,\n          value: search,\n          placeholder: \"Buscar\",\n          variant: \"filled\",\n          width: \"80%\",\n          borderRadius: \"10\",\n          borderWidth: \"0\",\n          InputLeftElement: _jsx(Icon, {\n            ml: \"2\",\n            size: \"4\",\n            color: \"gray.400\",\n            as: _jsx(Ionicons, {\n              name: \"ios-search\"\n            })\n          })\n        }), _jsx(IconButton, {\n          width: \"15%\",\n          colorScheme: \"rgb(173, 0, 255)\",\n          borderRadius: \"xl\",\n          variant: \"solid\",\n          size: \"lg\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\"\n          }),\n          onPress: function onPress() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              register: true\n            }));\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: predios,\n        renderItem: function renderItem(_ref22) {\n          var item = _ref22.item;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              return handlePredio(item);\n            },\n            children: _jsxs(HStack, {\n              borderBottomWidth: \"1\",\n              space: \"4\",\n              children: [_jsx(Icon, {\n                size: \"xl\",\n                as: MaterialCommunityIcons,\n                name: \"terrain\",\n                width: \"20%\"\n              }), _jsxs(VStack, {\n                width: \"65%\",\n                children: [_jsx(Heading, {\n                  children: item.id\n                }), _jsx(Text, {\n                  children: item.name\n                })]\n              })]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        }\n      }), _jsx(Text, {\n        children: mt\n      })]\n    }), _jsx(Modal, {\n      isOpen: show.register,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          register: false\n        }));\n      },\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Nuevo predio\"\n        }), _jsx(Modal.Body, {\n          children: _jsx(VStack, {\n            children: _jsxs(FormControl, {\n              isInvalid: 'name' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Nombre\"\n              }), _jsx(Input, {\n                placeholder: \"Nombre\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    name: value\n                  }));\n                }\n              }), 'name' in errors ? _jsx(FormControl.ErrorMessage, {\n                children: errors.name\n              }) : _jsx(FormControl.HelperText, {})]\n            })\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(0, 247, 255)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                handleRegister();\n              },\n              children: \"Crear\"\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.predio,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          predio: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignSelf: \"center\",\n          _text: {\n            fontSize: 'xl',\n            Overridden: 'bold'\n          },\n          children: predio.id\n        }), _jsxs(Modal.Body, {\n          children: [_jsxs(VStack, {\n            children: [_jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Nombre\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: predio.name\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.name,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: false\n                }));\n              },\n              size: \"xl\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar nombre\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsx(Input, {\n                      placeholder: \"Nuevo nombre\",\n                      onChangeText: function onChangeText(value) {\n                        setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          name: value\n                        }));\n                      }\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        handleUpdate('name');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            })]\n          }), _jsx(Button, {\n            colorScheme: \"rgb(0, 154, 159)\",\n            _text: {\n              color: 'white'\n            },\n            leftIcon: _jsx(Icon, {\n              size: \"md\",\n              as: MaterialCommunityIcons,\n              name: \"cow\"\n            }),\n            onPress: function onPress() {\n              return handleAnimals();\n            },\n            children: \"Ver Hato\"\n          })]\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(255, 37, 0)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShow(_objectSpread(_objectSpread({}, show), {}, {\n                  delete: true\n                }));\n              },\n              children: \"Borrar\"\n            })]\n          })\n        }), _jsx(AlertDialog, {\n          isOpen: show.delete,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              delete: false\n            }));\n          },\n          children: _jsxs(AlertDialog.Content, {\n            children: [_jsx(AlertDialog.CloseButton, {}), _jsx(AlertDialog.Header, {\n              children: \"Borrar predio\"\n            }), _jsx(AlertDialog.Body, {\n              children: \"Esto borrar\\xE1 todos los datos relacionados con este predio. Esta acci\\xF3n no es reversible. Los datos borrados no podr\\xE1n ser recuperados. \\xBFEst\\xE1 seguro de esta acci\\xF3n?\"\n            }), _jsx(AlertDialog.Footer, {\n              children: _jsxs(Button.Group, {\n                space: 2,\n                children: [_jsx(Button, {\n                  variant: \"unstyled\",\n                  colorScheme: \"coolGray\",\n                  onPress: function onPress() {\n                    return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false\n                    }));\n                  },\n                  children: \"Cancelar\"\n                }), _jsx(Button, {\n                  onPress: function onPress() {\n                    handleDelete(predio.id);\n                  },\n                  size: \"lg\",\n                  colorScheme: \"rgb(255, 37, 0)\",\n                  _text: {\n                    color: 'white'\n                  },\n                  children: \"Confirmar\"\n                })]\n              })\n            })]\n          })\n        }), _jsx(Modal, {\n          isOpen: show.animals,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              animals: false\n            }));\n          },\n          size: \"full\",\n          children: _jsxs(Modal.Content, {\n            children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n              children: \"Hato en el predio\"\n            }), _jsx(Modal.Body, {}), _jsx(Modal.Footer, {\n              children: _jsxs(Button.Group, {\n                space: 2,\n                children: [_jsx(Button, {\n                  colorScheme: \"orange\",\n                  children: \"Eliminar\"\n                }), _jsx(Button, {\n                  children: \"Transferir\"\n                })]\n              })\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.animals,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          animals: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Animales\"\n        }), _jsx(Modal.Body, {\n          children: _jsx(FlatList, {\n            data: list,\n            renderItem: function renderItem(_ref23) {\n              var item = _ref23.item;\n              return _jsxs(HStack, {\n                borderBottomWidth: \"1\",\n                space: \"4\",\n                children: [_jsx(Icon, {\n                  size: \"xl\",\n                  as: MaterialCommunityIcons,\n                  name: \"cow\",\n                  width: \"20%\"\n                }), _jsxs(VStack, {\n                  width: \"65%\",\n                  children: [_jsx(Heading, {\n                    children: item.arete\n                  }), _jsx(Text, {\n                    children: item.name\n                  })]\n                })]\n              });\n            },\n            keyExtractor: function keyExtractor(item) {\n              return item.arete;\n            }\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              colorScheme: \"orange\",\n              children: \"Eliminar\"\n            }), _jsx(Button, {\n              children: \"Agregar\"\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nexport var Embarque = function Embarque(_ref24) {\n  var navigation = _ref24.navigation;\n  var pesajes = useSelector(function (state) {\n    return state.pesajes;\n  });\n\n  var _React$useState99 = React.useState([]),\n      _React$useState100 = _slicedToArray(_React$useState99, 2),\n      hato = _React$useState100[0],\n      setHato = _React$useState100[1];\n\n  var _React$useState101 = React.useState([]),\n      _React$useState102 = _slicedToArray(_React$useState101, 2),\n      embarque = _React$useState102[0],\n      setEmbarque = _React$useState102[1];\n\n  var _React$useState103 = React.useState([]),\n      _React$useState104 = _slicedToArray(_React$useState103, 2),\n      vehicles = _React$useState104[0],\n      setVehicles = _React$useState104[1];\n\n  var _React$useState105 = React.useState({\n    vehicle: false,\n    solucion: false\n  }),\n      _React$useState106 = _slicedToArray(_React$useState105, 2),\n      show = _React$useState106[0],\n      setShow = _React$useState106[1];\n\n  var _React$useState107 = React.useState(0),\n      _React$useState108 = _slicedToArray(_React$useState107, 2),\n      cap = _React$useState108[0],\n      setCap = _React$useState108[1];\n\n  var toast = useToast();\n\n  var _React$useState109 = React.useState([]),\n      _React$useState110 = _slicedToArray(_React$useState109, 2),\n      solucion = _React$useState110[0],\n      setSolucion = _React$useState110[1];\n\n  var embarcar = function embarcar(arete, peso) {\n    if (embarque.length < 1) setEmbarque([{\n      id: arete,\n      kg: peso\n    }].concat(embarque));else {\n      var check = embarque.filter(function (animal) {\n        if (animal.id == arete) return true;\n      });\n\n      if (check.length > 0) {\n        var newEmb = embarque.filter(function (animal) {\n          if (animal.id != arete) return true;\n        });\n        setEmbarque(newEmb);\n      } else setEmbarque([{\n        id: arete,\n        kg: peso\n      }].concat(embarque));\n    }\n  };\n\n  var addVehicle = function addVehicle(capacidad) {\n    num = vehicles.length;\n    setVehicles([{\n      id: num,\n      kg: parseInt(capacidad)\n    }].concat(vehicles));\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      vehicle: false\n    }));\n  };\n\n  var delVehicle = function delVehicle(id) {\n    list = vehicles.filter(function (vehicle) {\n      if (vehicle.id != id) return true;\n    });\n    setVehicles(list);\n  };\n\n  var filterPesajes = function filterPesajes() {\n    var tem = [];\n    pesajes.forEach(function (pesaje) {\n      if (tem.length === 0) tem.push(pesaje);else {\n        for (var i = 0; i <= tem.length - 1; i++) {\n          if (pesaje.arete == tem[i].arete) {\n            if (pesaje.date > tem[i].date) {\n              tem[i].kg = pesaje.kg;\n              tem[i].date = pesaje.date;\n            }\n          } else if (i == tem.length - 1) {\n            tem.push(_objectSpread(_objectSpread({}, pesaje), {}, {\n              check: false\n            }));\n          }\n        }\n      }\n    });\n    setHato(tem);\n  };\n\n  var getSolucion = function getSolucion(h, v) {\n    var response, _solucion;\n\n    return _regeneratorRuntime.async(function getSolucion$(_context20) {\n      while (1) {\n        switch (_context20.prev = _context20.next) {\n          case 0:\n            _context20.prev = 0;\n            h_params = '?h=' + h.join('&h=');\n            v_params = '&v=' + v.join('&v=');\n            _context20.next = 5;\n            return _regeneratorRuntime.awrap(fetch('http://192.168.1.250:5000/traslado'.concat(h_params, v_params)));\n\n          case 5:\n            response = _context20.sent;\n            _context20.next = 8;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 8:\n            _solucion = _context20.sent;\n\n            if (!(_solucion != false)) {\n              _context20.next = 14;\n              break;\n            }\n\n            setSolucion([{\n              title: 'Vehiculos',\n              data: _solucion.vehiculos\n            }, {\n              title: 'Hato',\n              data: _solucion.hato\n            }]);\n            setShow(_objectSpread(_objectSpread({}, show), {}, {\n              solucion: true\n            }));\n            _context20.next = 17;\n            break;\n\n          case 14:\n            console.log(_solucion);\n            toast.show({\n              title: 'Error con solucion',\n              status: 'warning',\n              description: 'Intente de nuevo'\n            });\n            return _context20.abrupt(\"return\", false);\n\n          case 17:\n            _context20.next = 24;\n            break;\n\n          case 19:\n            _context20.prev = 19;\n            _context20.t0 = _context20[\"catch\"](0);\n            console.log(_context20.t0);\n            toast.show({\n              title: 'Error con el servidor',\n              status: 'warning'\n            });\n            return _context20.abrupt(\"return\", false);\n\n          case 24:\n          case \"end\":\n            return _context20.stop();\n        }\n      }\n    }, null, null, [[0, 19]], Promise);\n  };\n\n  var handleOptimizar = function handleOptimizar() {\n    if (embarque.length < 1) toast.show({\n      title: 'Hato vacio',\n      status: 'error',\n      description: 'Agrega ganado al embarque'\n    });else if (vehicles.length < 1) toast.show({\n      title: 'No hay vehiculo',\n      status: 'error',\n      description: 'Agrega transporte al embarque'\n    });else {\n      var h = [];\n      var v = [];\n      embarque.forEach(function (animal) {\n        h.push(animal.kg);\n      });\n      vehicles.forEach(function (vehicle) {\n        v.push(vehicle.kg);\n      });\n      getSolucion(h, v);\n    }\n  };\n\n  React.useEffect(function () {\n    filterPesajes();\n  }, []);\n  return _jsxs(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    minH: \"100%\",\n    children: [_jsxs(Box, {\n      maxH: \"40%\",\n      children: [_jsx(Heading, {\n        children: \"Hato\"\n      }), _jsx(FlatList, {\n        data: hato,\n        renderItem: function renderItem(_ref25) {\n          var item = _ref25.item;\n          return _jsxs(Checkbox, {\n            value: item.kg,\n            onChange: function onChange() {\n              embarcar(item.arete, item.kg);\n            },\n            colorScheme: \"orange\",\n            size: \"md\",\n            icon: _jsx(Icon, {\n              as: _jsx(MaterialCommunityIcons, {\n                name: \"truck\"\n              })\n            }),\n            children: [item.arete, \":\", item.kg, \" kg\"]\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        }\n      })]\n    }), _jsxs(Box, {\n      maxH: \"40%\",\n      children: [_jsxs(HStack, {\n        w: \"100%\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        children: [_jsx(Heading, {\n          children: \"Vehiculos\"\n        }), _jsx(IconButton, {\n          colorScheme: \"trueGray\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\",\n            size: \"md\",\n            color: \"trueGray.400\"\n          }),\n          onPress: function onPress() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              vehicle: true\n            }));\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: vehicles,\n        inverted: true,\n        renderItem: function renderItem(_ref26) {\n          var item = _ref26.item;\n          return _jsxs(HStack, {\n            w: \"100%\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\",\n            children: [_jsxs(Text, {\n              children: [item.id + 1, \": \", item.kg, \" kg\"]\n            }), _jsx(IconButton, {\n              colorScheme: \"trueGray\",\n              icon: _jsx(Icon, {\n                as: MaterialCommunityIcons,\n                name: \"minus\",\n                size: \"sm\",\n                color: \"trueGray.400\"\n              }),\n              onPress: function onPress() {\n                return delVehicle(item.id);\n              }\n            })]\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item;\n        }\n      })]\n    }), _jsx(Box, {\n      children: _jsx(Button, {\n        onPress: function onPress() {\n          return handleOptimizar();\n        },\n        children: \"Optimizar\"\n      })\n    }), _jsx(Modal, {\n      size: \"md\",\n      isOpen: show.vehicle,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          vehicle: false\n        }));\n      },\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Nuevo vehiculo\"\n        }), _jsx(Modal.Body, {\n          children: _jsx(Input, {\n            placeholder: \"Capacidad\",\n            keyboardType: \"numeric\",\n            onChangeText: function onChangeText(value) {\n              return setCap(value);\n            }\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(0, 247, 255)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                addVehicle(cap);\n              },\n              s: true,\n              children: \"Agregar\"\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      size: \"md\",\n      isOpen: show.solucion,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          solucion: false\n        }));\n      },\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Embarque optimizado\"\n        }), _jsx(Modal.Body, {\n          children: _jsx(SectionList, {\n            sections: solucion,\n            keyExtractor: function keyExtractor(item, index) {\n              return item + index;\n            },\n            renderItem: function renderItem(_ref27) {\n              var item = _ref27.item;\n              return _jsx(Text, {\n                children: item\n              });\n            },\n            renderSectionHeader: function renderSectionHeader(_ref28) {\n              var title = _ref28.section.title;\n              return _jsx(Heading, {\n                children: title\n              });\n            }\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsx(Button, {\n            size: \"lg\",\n            colorScheme: \"rgb(0, 247, 255)\",\n            _text: {\n              color: 'white'\n            },\n            onPress: function onPress() {\n              setShow(_objectSpread(_objectSpread({}, show), {}, {\n                solucion: false\n              }));\n            },\n            children: \"Aceptar\"\n          })\n        })]\n      })\n    })]\n  });\n};\nexport var Configuracion = function Configuracion(_ref29) {\n  var navigation = _ref29.navigation;\n  var tkn = useSelector(function (state) {\n    return state.jwt;\n  });\n  var perfil = useSelector(function (state) {\n    return state.perfil;\n  });\n  var dispatch = useDispatch();\n\n  var _React$useState111 = React.useState(false),\n      _React$useState112 = _slicedToArray(_React$useState111, 2),\n      show = _React$useState112[0],\n      setShow = _React$useState112[1];\n\n  var _React$useState113 = React.useState({}),\n      _React$useState114 = _slicedToArray(_React$useState113, 2),\n      errors = _React$useState114[0],\n      setError = _React$useState114[1];\n\n  var _React$useState115 = React.useState({}),\n      _React$useState116 = _slicedToArray(_React$useState115, 2),\n      update = _React$useState116[0],\n      setUpdate = _React$useState116[1];\n\n  var _React$useState117 = React.useState({\n    show: false\n  }),\n      _React$useState118 = _slicedToArray(_React$useState117, 2),\n      pass = _React$useState118[0],\n      setPass = _React$useState118[1];\n\n  var toast = useToast();\n\n  var handleUpdate = function handleUpdate() {\n    var upd;\n    return _regeneratorRuntime.async(function handleUpdate$(_context21) {\n      while (1) {\n        switch (_context21.prev = _context21.next) {\n          case 0:\n            if (!(update.id == 'username')) {\n              _context21.next = 4;\n              break;\n            }\n\n            toast.show({\n              title: 'Imposible actualizar username',\n              status: 'error',\n              description: 'Ponerse en contacto con el administrador'\n            });\n            _context21.next = 8;\n            break;\n\n          case 4:\n            _context21.next = 6;\n            return _regeneratorRuntime.awrap(action.updatePerfil(tkn, {\n              type: update.id,\n              word: update.nValue\n            }));\n\n          case 6:\n            upd = _context21.sent;\n\n            if (upd == true) {\n              dispatch(action.getPerfil(tkn));\n              if (update.type != 'pass') setShow(false);else setPass(_objectSpread(_objectSpread({}, pass), {}, {\n                show: false\n              }));\n              toast.show({\n                title: 'Actualizacion exitosa',\n                status: 'success'\n              });\n            } else {\n              if (update.type != 'pass') setShow(false);else setPass(_objectSpread(_objectSpread({}, pass), {}, {\n                show: false\n              }));\n              toast.show({\n                title: 'Error con el servidor',\n                status: 'error',\n                description: 'Intente de nuevo'\n              });\n            }\n\n          case 8:\n          case \"end\":\n            return _context21.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleParam = function handleParam(item) {\n    setUpdate(item);\n    setShow(true);\n  };\n\n  var handlePass = function handlePass() {\n    if (pass.word == pass.cword) {\n      setUpdate({\n        id: 'pass',\n        nValue: pass.word\n      });\n      handleUpdate();\n    } else toast.show({\n      title: 'Las contrase√±as no coinciden',\n      status: 'error',\n      description: 'Intente de nuevo'\n    });\n  };\n\n  var closeSession = function closeSession() {\n    dispatch({\n      type: '@close/session'\n    });\n    navigation.navigate('login');\n  };\n\n  return _jsxs(Box, {\n    children: [_jsx(Box, {\n      bgColor: \"gray\",\n      children: _jsx(Center, {\n        children: _jsx(Heading, {\n          size: \"lg\",\n          children: \"Actualizar perfil\"\n        })\n      })\n    }), _jsx(FlatList, {\n      margin: 1,\n      data: perfil,\n      renderItem: function renderItem(_ref30) {\n        var item = _ref30.item;\n        return _jsx(Pressable, {\n          onPress: function onPress() {\n            return handleParam(item);\n          },\n          children: _jsx(HStack, {\n            borderBottomWidth: \"1\",\n            space: \"4\",\n            children: _jsxs(VStack, {\n              width: \"65%\",\n              children: [_jsx(Heading, {\n                children: item.value\n              }), _jsx(Text, {\n                children: item.id\n              })]\n            })\n          })\n        });\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      }\n    }), _jsx(Divider, {\n      marginY: 2\n    }), _jsxs(VStack, {\n      alignItems: \"center\",\n      space: 1,\n      children: [_jsx(Button, {\n        style: \"outline\",\n        width: \"95%\",\n        colorScheme: \"purple\",\n        onPress: function onPress() {\n          return setPass(_objectSpread(_objectSpread({}, pass), {}, {\n            show: true\n          }));\n        },\n        children: \"Cambiar contrase\\xF1a\"\n      }), _jsx(Button, {\n        width: \"95%\",\n        onPress: function onPress() {\n          return closeSession();\n        },\n        colorScheme: \"orange\",\n        children: \"Cerrar sesi\\xF3n\"\n      }), _jsx(Divider, {}), _jsx(Button, {\n        width: \"95%\",\n        colorScheme: \"red\",\n        children: \"Eliminar cuenta\"\n      })]\n    }), _jsx(Modal, {\n      onClose: function onClose() {\n        return setShow(false);\n      },\n      isOpen: show,\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsxs(Modal.Header, {\n          children: [\"Nuevo \", update.id]\n        }), _jsx(Modal.Body, {\n          children: _jsx(FormControl, {\n            children: _jsx(Input, {\n              placeholder: update.value,\n              onChangeText: function onChangeText(value) {\n                setUpdate(_objectSpread(_objectSpread({}, update), {}, {\n                  nValue: value\n                }));\n              }\n            })\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              colorScheme: \"coolGray\",\n              variant: \"ghost\",\n              onPress: function onPress() {\n                return setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              colorScheme: \"warning\",\n              onPress: function onPress() {\n                handleUpdate();\n              },\n              children: \"Actualizar\"\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      onClose: function onClose() {\n        return setPass(_objectSpread(_objectSpread({}, pass), {}, {\n          show: false\n        }));\n      },\n      isOpen: pass.show,\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Nuevo contrase\\xF1a\"\n        }), _jsxs(Modal.Body, {\n          children: [_jsx(FormControl, {\n            children: _jsx(Input, {\n              placeholder: \"Nueva contrase\\xF1a\",\n              type: \"password\",\n              onChangeText: function onChangeText(value) {\n                setPass(_objectSpread(_objectSpread({}, pass), {}, {\n                  word: value\n                }));\n              }\n            })\n          }), _jsx(FormControl, {\n            children: _jsx(Input, {\n              placeholder: \"Confirmar contrase\\xF1a\",\n              type: \"password\",\n              onChangeText: function onChangeText(value) {\n                setPass(_objectSpread(_objectSpread({}, pass), {}, {\n                  cword: value\n                }));\n              }\n            })\n          })]\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              colorScheme: \"coolGray\",\n              variant: \"ghost\",\n              onPress: function onPress() {\n                setPass(_objectSpread(_objectSpread({}, pass), {}, {\n                  show: false\n                }));\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              colorScheme: \"warning\",\n              onPress: function onPress() {\n                handlePass();\n              },\n              children: \"Actualizar\"\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};","map":{"version":3,"sources":["C:/Users/maajt/tuRancho/miRancho-React/screens.js"],"names":["React","Button","NativeBaseProvider","Box","Input","FormControl","VStack","Checkbox","Link","Slider","Select","Radio","ScrollView","Divider","Center","Text","FlatList","Heading","Icon","KeyboardAvoidingView","Alert","IconButton","CloseIcon","Collapse","HStack","Modal","useToast","Pressable","View","AlertDialog","Spinner","SectionList","DateTimePicker","MaterialCommunityIcons","Ionicons","NetInfo","SafeAreaViewBase","useDispatch","useSelector","action","api","LogIn","navigation","dispatch","session","state","jwt","toast","useState","cntLogin","setCounter","data","setData","errors","setError","useEffect","navigate","HandleLogin","show","title","status","description","fetch","then","isConnected","getSession","user","pass","s","console","log","value","fontSize","color","fontWeight","SingIn","terms","setTerms","loading","setLoading","createUser","method","body","JSON","stringify","u","p","n","name","a","address","m","mail","response","text","msj","verifyUser","responseTxt","verifyMail","validForm","undefined","cpass","HandleRegister","validUser","validMail","regUser","Platform","OS","Terms","GetRancho","tkn","mtr","trans","setShow","getData","getRancho","Hato","hato","bkp","bkpHato","mt","vacunas","vac_animal","sanitarios","ctl_animal","pesajes","embarazos","crias","predios","pre_animal","list","setList","animal","register","delete","vac","pesaje","rep","san","nac","date","sex","race","predio","showPop","setPop","picker","setPicker","search","setSearch","arete","Date","setAnimal","form","setForm","SexIcon","props","filtrar","resultado","filter","toString","toLowerCase","includes","toLocaleLowerCase","setHato","handleSearch","txt","handleAnimal","item","handleVacunas","ids","rel","lista","vacuna","i","length","id","placement","handleSanitarios","ctl","handleReproductivos","cria","embarazo","handlePesajes","handlePredios","transferencias","ranchos","y","handleRegister","createAnimal","ins","getHato","addTrans","type","addAnimal","handleDelete","deleteAnimal","del","dropAnimal","handleUpdate","word","updateAnimal","upd","Overridden","event","selectedDate","f","getFullYear","getMonth","getDate","itemValue","nombre","nextValue","sexo","currentDate","fecha","raza","dad","mom","kg","Vacunas","setErrors","animals","add","rm","setVacuna","bkpVacunas","setVacunas","handleVacuna","handleAnimals","createVacuna","getVacunas","addVacuna","deleteVacuna","dropVacuna","updateVacuna","Sanitarios","sanitario","setSanitario","bkpSanitarios","setSanitarios","handleSanitario","nuevo","createSanitario","getSanitarios","addSanitario","deleteSanitario","dropSanitario","updateSanitario","Embarazos","inicio","fin","setEmbarazo","bkpEmbarazos","setEmbarazos","handleEmbarazo","setShowDel","Pesajes","setPesaje","bkpPesajes","setPesajes","handlePesaje","createPesaje","getPesajes","addPesaje","deletePesaje","dropPesaje","Predios","navitagion","agua","pasto","setPredio","bkpPredios","setPredios","handlePredio","rec","tran","ultimo","ani","createPredio","getPredios","deletePredio","updatePredio","Embarque","embarque","setEmbarque","vehicles","setVehicles","vehicle","solucion","cap","setCap","setSolucion","embarcar","peso","concat","check","newEmb","addVehicle","capacidad","num","parseInt","delVehicle","filterPesajes","tem","forEach","push","getSolucion","h","v","h_params","join","v_params","json","vehiculos","handleOptimizar","index","section","Configuracion","perfil","update","setUpdate","setPass","updatePerfil","nValue","getPerfil","handleParam","handlePass","cword","closeSession"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Button, NativeBaseProvider, Box, Input, FormControl, VStack, Checkbox, Link, Slider, Select, Radio, ScrollView, Divider, Center, Text, FlatList,Heading, Icon, KeyboardAvoidingView,Alert, IconButton, CloseIcon, Collapse, HStack, Modal,useToast, Pressable, View, AlertDialog, Spinner, SectionList} from 'native-base';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\nimport { MaterialCommunityIcons, Ionicons } from '@expo/vector-icons';\r\nimport NetInfo from \"@react-native-community/netinfo\";\r\nimport { Platform, SafeAreaViewBase } from 'react-native';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as action from './ranchoActions';\r\n\r\n\r\n// CONSTANTES GLOBALES\r\nconst api = '192.168.100.99/request/';\r\n\r\n///////////////////////////////////////\r\n  // Screens - Navegacion de Inicio //\r\n/////////////////////////////////////\r\n\r\n//Screen LogIn\r\nexport const LogIn = ({navigation}) => {\r\n    const dispatch = useDispatch();\r\n    const session = useSelector(state => state.jwt);\r\n    const toast = useToast();\r\n    \r\n    const [cntLogin, setCounter] = React.useState(0);\r\n    const [data, setData] = React.useState({});\r\n    const [errors, setError] = React.useState({});\r\n\r\n    React.useEffect(() => {\r\n        if(session != false){\r\n            //console.log(session);\r\n            navigation.navigate('getData'); \r\n        }\r\n             \r\n    },[]);\r\n    const HandleLogin = () => {\r\n        if(cntLogin > 10)\r\n            toast.show({ title:'Intente mas tarde',status:'error', description: \"Demasiados intentos\" });\r\n        else\r\n            NetInfo.fetch().then(state=>{\r\n                if(state.isConnected){\r\n                    \r\n                    setCounter(cntLogin+1);\r\n                    dispatch(action.getSession(data.user, data.pass)).then(s => {\r\n                        if(s){\r\n                            console.log(s);\r\n                            navigation.navigate('getData');\r\n                        }\r\n                            \r\n                        else\r\n                            toast.show({title:'Credenciales incorrectas',status:'warning', description: \"Intente de nuevo\"});\r\n                    });\r\n                }\r\n                else\r\n                    toast.show({title:'No hay conexi√≥n',status:'warning', description: \"Intente mas tarde\"});\r\n            })\r\n    }\r\n    return(\r\n        < Box justifyContent='center'  flex= {1}>\r\n            <VStack>\r\n                <FormControl isRequired isInvalid={'user' in errors}>\r\n                    <FormControl.Label>Nombre de Usuario</FormControl.Label>\r\n                    <Input \r\n                        placeholder='Usuario'\r\n                        onChangeText={(value) => setData({...data, user:value})}\r\n                    />\r\n                    {'user' in errors ?\r\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.user}</FormControl.ErrorMessage>:\r\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\r\n                    }\r\n                </FormControl>\r\n\r\n                <FormControl isRequired isInvalid={'pass' in errors}>\r\n                    <FormControl.Label>Contrase√±a</FormControl.Label>\r\n                    <Input \r\n                        placeholder='Contrase√±a'\r\n                        type = 'password'\r\n                        onChangeText={(value) => setData({...data, pass:value})}\r\n                    />\r\n                    {'pass' in errors ?\r\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.pass}</FormControl.ErrorMessage>:\r\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\r\n                    }\r\n                </FormControl>\r\n            </VStack>\r\n\r\n            <Divider my={1}/>\r\n            <Button colorScheme='success' onPress={HandleLogin} size = 'lg'>Entrar</Button>\r\n            <Divider my={3}/>\r\n            <Button size = 'md' colorScheme='teal' variant = 'outline' onPress={() => navigation.navigate('recPass')}>Olvide mi contrase√±a</Button>\r\n            <Divider my={1}/>\r\n            <Button size = 'md' colorScheme='teal' variant = 'outline' onPress={() => navigation.navigate('singin')}>No tengo cuenta</Button>  \r\n        </Box>\r\n    );\r\n}\r\n\r\n//Screen SignIn\r\nexport const SingIn = ({navigation}) => {\r\n    const toast = useToast();\r\n    const [data, setData] = React.useState({});\r\n        // user,name,pass,cpass,address, mail, terms.\r\n    const [errors, setError] = React.useState({});\r\n    const [terms, setTerms] = React.useState(false);\r\n    const [loading, setLoading] = React.useState(false);\r\n   \r\n\r\n    const createUser = async () => {\r\n        try {\r\n            const response = await fetch(\r\n                'https://turancho.com.mx/request/cUser.php', \r\n                {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(\r\n                        {\r\n                            u:data.user,\r\n                            p:data.pass,\r\n                            n:data.name,\r\n                            a:data.address,\r\n                            m:data.mail\r\n                        }\r\n                    )\r\n                }\r\n            );\r\n            const msj = await response.text();\r\n            if (msj < 1){\r\n                toast.show({title:'Exito',status:'success',description:'Usuario creado!'});\r\n                return true;\r\n            }else{\r\n                toast.show({title:'Error en el registro',status:'warning',description:'Intente de nuevo'});\r\n                return false;\r\n            }\r\n                \r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    };\r\n    const verifyUser = async () => {\r\n        try{\r\n            const response = await fetch(api+'vUser.php?u='+data.user);\r\n            const responseTxt = await response.text();\r\n            if(responseTxt < 1){\r\n                delete errors.user;\r\n                setError({...errors});\r\n                return true;\r\n            }\r\n            else{\r\n                setError({...errors, user:'Usuario en uso'});\r\n                return false;\r\n            }\r\n\r\n        }catch(error){\r\n            setError({...errors, user:error})\r\n        }\r\n    };\r\n    const verifyMail = async() => {\r\n        try{\r\n            const response = await fetch(api+'vMail.php?m='+data.mail);\r\n            const responseTxt = await response.text();\r\n            if(responseTxt < 1){\r\n                delete errors.mail;\r\n                setError({...errors});\r\n                return true;\r\n            }\r\n            else{\r\n                setError({...errors, mail:'Correo electr√≥nico en uso'});\r\n                return false;\r\n            }\r\n\r\n        }catch(error){\r\n            setError({...errors, mail:error})\r\n        }\r\n    };\r\n    function validForm () {   \r\n        if (data.user === undefined) {\r\n            setError({...errors, user:'Se necesita usuario'})\r\n            return false;\r\n        }else\r\n            delete errors.user;\r\n        if (data.pass === undefined|| data.cpass === undefined ) {\r\n            setError({...errors, pass:'Se necesita contrase√±a'})\r\n            return false;\r\n        }else\r\n            delete errors.pass;\r\n        if (data.name === undefined) {\r\n            setError({...errors, name:'Se necesita el nombre'});\r\n            return false;\r\n        }else\r\n            delete errors.name\r\n        if (data.address === undefined) {\r\n            setError({...errors, address:'Se necesita domicilio'});\r\n            return false;\r\n        }else\r\n            delete errors.address\r\n        if (data.mail === undefined) {\r\n            setError({...errors, mail:'Se necesita cuenta de correo electr√≥nico'});\r\n            return false;\r\n        }else\r\n            delete errors.mail\r\n        if (terms === undefined || terms == false) {\r\n            setError({...errors, terms:'Necesitas aceptar los t√©rminos y condiciones de uso'});\r\n            return false;\r\n        }else\r\n            delete errors.terms\r\n        if (data.pass != data.cpass){\r\n            setError({...errors, pass:'Las contrase√±as no coinciden'})\r\n            return false;\r\n        }else\r\n            delete errors.pass\r\n        return true;\r\n    }\r\n    const HandleRegister = async() =>{\r\n        if(validForm()){\r\n            setLoading(true);\r\n            NetInfo.fetch().then(state => {\r\n                if(state.isConnected){\r\n                    verifyUser().then(validUser => {\r\n                        if (validUser){\r\n                            verifyMail().then(validMail =>{\r\n                                if(validMail)\r\n                                    createUser().then(regUser =>{\r\n                                        navigation.navigate('login');\r\n                                    })\r\n                            });    \r\n                        }\r\n                    }); \r\n                }else\r\n                    toast({title:'No hay conexi√≥n',status:'warning',description:'Se necesita conexion'});\r\n              });\r\n            \r\n        }\r\n    }\r\n    return (\r\n        <KeyboardAvoidingView behavior={Platform.OS === \"ios\" ? \"height\" : \"\"} keyboardVerticalOffset={100} >\r\n        <ScrollView safe>\r\n        <Box justifyContent='center'  flex= {1}>\r\n            <VStack>\r\n                <FormControl isRequired isInvalid={'user' in errors}>\r\n                    <FormControl.Label>Nombre de Usuario (Se sugiere usar la CURP)</FormControl.Label>\r\n                    <Input \r\n                        placeholder='Usuario'\r\n                        onChangeText={(value) => setData({...data, user:value})}\r\n                        maxLength={20}\r\n                    />\r\n                    {'user' in errors ?\r\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.user}</FormControl.ErrorMessage>:\r\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\r\n                    }\r\n                </FormControl>\r\n\r\n                <FormControl isRequired isInvalid={'pass' in errors}>\r\n                    <FormControl.Label>Contrase√±a</FormControl.Label>\r\n                    <Input \r\n                        p={2} \r\n                        placeholder='Contrase√±a'\r\n                        onChangeText={(value) => setData({...data, pass:value})}\r\n                        type = 'password'\r\n                        \r\n                    />\r\n                    <Input\r\n                        p={2}\r\n                        placeholder='Confirmar contrase√±a'\r\n                        onChangeText={(value)=> {setData({...data, cpass:value})}}\r\n                        type = 'password'\r\n                    />\r\n                    {'pass' in errors ?\r\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.pass}</FormControl.ErrorMessage>:\r\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\r\n                    }\r\n                </FormControl>\r\n            \r\n                <FormControl isRequired isInvalid={'name' in errors}>\r\n                    <FormControl.Label>Nombre Completo</FormControl.Label>\r\n                    <Input \r\n                        p={2} \r\n                        placeholder='Nombre'\r\n                        onChangeText={(value) => {setData({...data, name:value})}}\r\n                    />\r\n                    {'name' in errors ?\r\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.name}</FormControl.ErrorMessage>:\r\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Escriba nombre completo</FormControl.HelperText>\r\n                    }\r\n                </FormControl>\r\n\r\n                <FormControl isRequired isInvalid={'address' in errors}>\r\n                    <FormControl.Label>Domicilio</FormControl.Label>\r\n                    <Input \r\n                        p={2} \r\n                        placeholder='Domicilio'\r\n                        onChangeText={(value) => {setData( {...data,address:value})}}\r\n                    />\r\n\r\n                    {'address' in errors ?\r\n                        <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.address}</FormControl.ErrorMessage>:\r\n                            <FormControl.HelperText _text={{fontSize: 'xs'}}>Agregue un domicilio</FormControl.HelperText>\r\n                        }\r\n                </FormControl>\r\n            \r\n                <FormControl isRequired isInvalid={'mail' in errors}>\r\n                    <FormControl.Label>Correo electr√≥nico</FormControl.Label>\r\n                    <Input \r\n                        p={2} \r\n                        keyboardType='email-address'\r\n                        placeholder='Correo'\r\n                        onChangeText={(value) => setData( {...data,mail:value})}\r\n                    />\r\n                    {'mail' in errors ?\r\n                        <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.mail}</FormControl.ErrorMessage>:\r\n                            <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\r\n                    }\r\n                </FormControl>\r\n\r\n                <FormControl isRequired isInvalid={'terms' in errors}>\r\n                    <Checkbox  size = 'md' onChange={(value) => setTerms(value)}>\r\n                        Aceptar \r\n                        <Link onPress={()=>navigation.navigate('terms')}>  terminos y condiciones de uso</Link>\r\n                    </Checkbox>\r\n                    {'terms' in errors ?\r\n                        <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.terms}</FormControl.ErrorMessage>:\r\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Es necesario aceptar</FormControl.HelperText>\r\n                    } \r\n                </FormControl>\r\n                <Divider my={2}/>\r\n                \r\n            </VStack>\r\n            <Button.Group space={2}>\r\n                <Button isLoading={loading} colorScheme='success' size = 'lg' onPress={()=> HandleRegister()}> Registrar </Button>\r\n            </Button.Group>\r\n        </Box>\r\n        \r\n        </ScrollView>\r\n        </KeyboardAvoidingView>\r\n    );\r\n}\r\n//Screen Terms\r\nexport const Terms = ({navigation}) => {\r\n    return(\r\n        <NativeBaseProvider>\r\n            <Box>\r\n                Aqui estan los terminos y condiciones jeje\r\n            </Box>\r\n        </NativeBaseProvider>\r\n    );\r\n}\r\n\r\n//Screen getData-Rancho\r\nexport const GetRancho = ({navigation}) => {\r\n    const tkn = useSelector(state => state.jwt);\r\n    const mtr = useSelector(state => state.mtr);\r\n    const trans = useSelector(state => state.trans);\r\n    const [show, setShow] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const errors = useSelector((state) =>state.errors);\r\n    const toast = useToast();\r\n    \r\n    const getData = async() => {\r\n        NetInfo.fetch().then((state) => { \r\n            if(state.isConnected){\r\n                /*if(trans.length > 0){\r\n                    var reject = action.processTrans(tkn,trans,mtr);\r\n                    if(reject > 0)\r\n                        toast.show({title:'Error en transacciones',status:'error',description:reject});\r\n                    else\r\n                        toast.show({title:'Sincronizaci√≥n exitosa',status:'info'});\r\n                    dispatch(action.flushTrans());\r\n                }*/\r\n                \r\n                dispatch(action.getRancho(tkn,mtr)).then(msj => {\r\n                    if(msj === false){\r\n                        toast.show({title:'Error con el servidor',status:'warning' ,description:'Intente de nuevo'});\r\n                    }else\r\n                        navigation.navigate('rancho');\r\n                });\r\n            }else\r\n                setShow(true);\r\n        });\r\n    }\r\n    React.useEffect(()=>{getData()},[]);\r\n        \r\n    return (\r\n        <Box justifyContent='center'  flex= {1}>\r\n            <VStack justifyContent=\"center\" alignItems=\"center\" space={2}>\r\n                <Spinner color=\"cyan.500\" size='lg' />\r\n                <Heading color=\"primary.500\" fontSize=\"md\">\r\n                    Cargando...\r\n                </Heading>\r\n            </VStack>\r\n            \r\n            <Modal isOpen={show} onClose={()=>{setShow(false)}} bgColor='red.400' >\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header> No hay conexion!</Modal.Header>\r\n                    <Modal.Body>\r\n                        Porfavor intente de nuevo, hubo un problema con la red.\r\n                    </Modal.Body>\r\n                </Modal.Content>\r\n            </Modal>\r\n        </Box> \r\n    );\r\n}\r\n\r\n////////////////////////////////////\r\n// Screens - Navegacion \"Rancho\" //\r\n////////////////////////// ///////\r\n\r\n//Screen Ganado\r\n\r\nexport const Hato = ({navigation}) => {\r\n    const hato = useSelector((state)=> state.hato);\r\n    const bkp = useSelector((state) => state.bkpHato);\r\n    const mt = useSelector((state) => state.mtr.hato);\r\n    const tkn = useSelector(state => state.jwt);\r\n    \r\n    const vacunas = useSelector(state=> state.vacunas);\r\n    const vac_animal = useSelector( state => state.vac_animal);\r\n\r\n    const sanitarios = useSelector(state=> state.sanitarios);\r\n    const ctl_animal = useSelector(state=> state.ctl_animal);\r\n\r\n    const pesajes = useSelector(state=> state.pesajes);\r\n\r\n    const embarazos = useSelector (state => state.embarazos);\r\n    const crias = useSelector(state => state.crias);\r\n\r\n    const predios = useSelector(state => state.predios);\r\n    const pre_animal =  useSelector ( state => state.pre_animal);\r\n    \r\n    const toast = useToast();\r\n    const dispatch = useDispatch();\r\n\r\n    const [list,setList] = React.useState([]);\r\n    const [show, setShow] = React.useState({animal:false,register:false,delete:false,vac:false,pesaje:false,rep:false,san:false,trans:false,predios:false})   \r\n    const [showPop, setPop] = React.useState({name:false,nac:false,date:false,sex:false,race:false,color:false,predio:false});\r\n    const [picker, setPicker] = React.useState(false);\r\n    const [search, setSearch] = React.useState('');\r\n    const [animal, setAnimal] = React.useState({arete:'',name:'',nac:new Date(),sex:'M',race:'',color:''});\r\n    const [form, setForm] = React.useState({show:false,nac:'YYYY/MM/DD'});\r\n    const [errors, setError] = React.useState({});\r\n\r\n\r\n    const SexIcon = props =>{\r\n        let { sex } = props;\r\n        if(sex == 'M')\r\n            return <Icon size=\"xl\" as={MaterialCommunityIcons} name='gender-male' color='#62A0EA' width='15%'/>\r\n        else\r\n            return <Icon size=\"xl\" as={MaterialCommunityIcons} name='gender-female' color='#DC8ADD' width='15%'/>\r\n    }\r\n\r\n    const filtrar = (search) => {\r\n        var resultado = bkp.filter((animal)=>{\r\n            if(animal.arete.toString().toLowerCase().includes(search.toString().toLowerCase()) || animal.name.toString().toLowerCase().includes(search.toString().toLocaleLowerCase()))\r\n                return animal;\r\n        });\r\n        dispatch(action.setHato(resultado));\r\n    }\r\n    const handleSearch = txt => {\r\n        setSearch(txt);\r\n        filtrar(txt);\r\n    }\r\n    const handleAnimal = (item) =>{\r\n        setAnimal(item);\r\n        setShow({...show,animal:true});\r\n    }\r\n    const handleVacunas = () => {\r\n        var ids = vac_animal.filter((rel)=>{\r\n            if(rel.arete == animal.arete)\r\n                return rel;\r\n        });\r\n        console.log(vac_animal);\r\n        var lista = vacunas.filter((vacuna)=>{\r\n            for(let i=0; i<=ids.length-1; i++){\r\n                if(ids[i].vacuna == vacuna.id)\r\n                    return true;\r\n            }\r\n        });\r\n        if(lista.length > 0){\r\n            setList(lista);\r\n            setShow({...show,vac:true});\r\n        }else\r\n            toast.show({title:'Vacio',description:'No hay vacunas',status:'info',placement:'top'});\r\n        \r\n    }\r\n \r\n    const handleSanitarios = () => {\r\n        var ids = ctl_animal.filter((rel)=>{\r\n            if(rel.arete == animal.arete)\r\n                return rel;\r\n        });\r\n        var lista = sanitarios.filter((ctl)=>{\r\n            for(let i=0; i<=ids.length-1; i++){\r\n                if(ids[i].ctl == ctl.id)\r\n                    return true;\r\n            }\r\n        });\r\n        if(lista.length > 0){\r\n            setList(lista);\r\n            setShow({...show,san:true});\r\n        }else\r\n            toast.show({title:'Vacio',description:'No hay controles',status:'info',placement:'top'});\r\n    }\r\n    const handleReproductivos = () => {\r\n        var cria = crias.filter((embarazo)=>{\r\n            if (embarazo.arete == animal.arete)\r\n                return true;\r\n        });\r\n        console.log(embarazos);\r\n        var lista = embarazos.filter((embarazo)=> {\r\n            for(var i=0; i<cria.length; i++)\r\n                if(embarazo.id == cria[i].embarazo)\r\n                return true;\r\n        });\r\n        console.log(lista);\r\n        if(lista.length > 0){\r\n            setList(lista[0]);\r\n            setShow({...show,rep:true});\r\n        }else\r\n            toast.show({title:'Vacio',description:'No hay registros',status:'info',placement:'top'});\r\n    }\r\n    const handlePesajes = () => {\r\n        var lista = pesajes.filter((pesaje)=>{\r\n            if(pesaje.arete == animal.arete)\r\n                return true;\r\n        });\r\n        if(lista.length > 0){\r\n            setList(lista);\r\n            setShow({...show,pesaje:true});\r\n        }else\r\n            toast.show({title:'Vacio',description:'No hay pesajes',status:'info',placement:'top'});\r\n    }\r\n    const handlePredios = () => {\r\n        var transferencias = pre_animal.filter((trans) =>{\r\n            if(trans.arete == animal.arete)\r\n                return true;\r\n        });\r\n        var ranchos = predios.filter((predio) =>{\r\n            for(i=0; i<=transferencias.length-1; i++)\r\n                if(predio.id == transferencias[i].predio)\r\n                    return true;\r\n        });\r\n        for(i=0; i<=transferencias.length-1; i++)\r\n            for(y=0; y<ranchos.length; y++)\r\n                if(ranchos[y].id == transferencias[i].predio)\r\n                    transferencias[i].predio = ranchos[y].name;\r\n        if(transferencias.length>0){\r\n            setList(transferencias);\r\n            setShow({...show,predios:true});\r\n        }else\r\n            toast.show({title:'Vacio',description:'No hay predios',status:'info',placement:'top'});\r\n    }\r\n    const handleRegister = async() =>{ \r\n        const animal = {\r\n            arete:form.arete,\r\n            name:form.name,\r\n            sex:form.sex,\r\n            nac:form.nac,\r\n            race:form.race,\r\n            color:form.color\r\n        }\r\n        NetInfo.fetch().then(state => {\r\n            if(state.isConnected){\r\n                action.createAnimal(tkn,animal).then(ins =>{\r\n                    setShow({...show,register:false});\r\n                    if(ins == true){\r\n                        toast.show({title:'Exito',status:'success',description:'Animal creado'});\r\n                        dispatch(action.getHato(tkn));\r\n                    }else\r\n                        toast.show({title:'Error al insertar',status:'error',description:'Intente de nuevo'});\r\n                });\r\n            }else{\r\n                dispatch(action.addTrans({type:'addAnimal',data:animal}));\r\n                dispatch(action.addAnimal(animal));\r\n            }\r\n        });\r\n    }\r\n    const handleDelete = async(arete) =>{ \r\n        NetInfo.fetch().then(state => {\r\n            if(state.isConnected){\r\n                action.deleteAnimal(tkn,arete).then(del =>{\r\n                    setShow({...show,delete:false});\r\n                    if(del == true){\r\n                        toast.show({title:'Exito',status:'info',description:'Animal eliminado'});\r\n                        dispatch(action.getHato(tkn));\r\n                        setShow({...show,delete:false,animal:false});\r\n                        setAnimal({});\r\n                    }else\r\n                        toast.show({title:'Error al eliminar',status:'error',description:'Intente de nuevo'});\r\n                });\r\n            }else{\r\n                dispatch(action.addTrans({type:'delAnimal',data:arete}));\r\n                dispatch(action.dropAnimal(arete));\r\n            }\r\n        });\r\n    }\r\n    const handleUpdate =async(type,date=null) => {\r\n        var word = '';\r\n        switch(type){\r\n            case 'name':\r\n                word =form.name ;\r\n                setAnimal({...animal,name:word});\r\n                break;\r\n            case 'nac':\r\n                word = date;\r\n                console.log('es',word);\r\n                break;\r\n            case 'sex':\r\n                word = form.sex;\r\n                break;\r\n            case 'race':\r\n                word = form.race;\r\n                break;\r\n            case 'color':\r\n                word = form.color;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        var upd = await action.updateAnimal(tkn,animal.arete,type,word);\r\n        if(upd == true){\r\n            dispatch(action.getHato(tkn));\r\n            setShow({...show,animal:false});\r\n            toast.show({title:'Actualizacion exitosa',status:'success'});\r\n            \r\n        }else{\r\n            setShow({...show,animal:false});\r\n            toast.show({title:'Error con el servidor',status:'error',description:'Intente de nuevo'});\r\n        }\r\n    }\r\n    return(\r\n        <View>\r\n            <Box padding='.5em'>\r\n                <HStack space={2} justifyContent='center' padding='.5em'>\r\n                    <Input onChangeText={handleSearch} value={search}placeholder=\"Buscar\" variant=\"filled\" width=\"80%\" borderRadius=\"10\" borderWidth=\"0\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\r\n                    <IconButton width='60px' colorScheme='rgb(173, 0, 255)' borderRadius=\"xl\" variant=\"solid\"  size=\"lg\"\r\n                        icon={<Icon  as={MaterialCommunityIcons} name=\"plus\"/>}\r\n                        onPress={()=>setShow({...show,register:true})}\r\n                       \r\n                    />\r\n                </HStack>\r\n                <FlatList data={hato}   renderItem={({item}) => \r\n                    <Pressable onPress={() => handleAnimal(item)} width='100%' justifyContent='center'>\r\n                        <HStack space='3' justifyContent='center' width='90%' >\r\n                            <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"cow\" width='20%'/>\r\n                            <VStack width=\"65%\">\r\n                                <Heading>{item.arete}</Heading>\r\n                                <Text>{item.name}</Text>\r\n                            </VStack>\r\n                            <SexIcon sex={item.sex} width= '15%' />\r\n                        </HStack>               \r\n                    </Pressable>\r\n                }\r\n                keyExtractor={item=>item.arete}\r\n                ItemSeparatorComponent={() => (\r\n                    <hr width='90%' />\r\n                  )}\r\n                />\r\n                <Text>{mt}</Text>             \r\n            </Box>\r\n            \r\n            <Modal isOpen={show.animal} onClose={() => setShow({...show,animal:false})} size='xl'>\r\n                <Modal.Content >\r\n                    <Modal.CloseButton />\r\n                    <Modal.Header alignSelf=\"center\" _text={{fontSize:'xl',Overridden:'bold'}}>{animal.arete}</Modal.Header>\r\n                    <Modal.Body >\r\n                        <VStack >\r\n                            <Pressable onPress={() => setPop({...showPop,name:true})}>\r\n                                <Text fontSize='2xs'>Nombre</Text>\r\n                                <Text fontSize='md'>{animal.name}</Text>\r\n                                <Divider />\r\n                            </Pressable> \r\n                            <Modal isOpen={showPop.name} onClose={() => setPop({...showPop,name:false})} size='xl'>\r\n                                <Modal.Content >\r\n                                    <Modal.Header alignContent='center'>Actualizar nombre</Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <FormControl>\r\n                                            <Input placeholder='Nuevo nombre' onChangeText={(value)=>{setForm({...form,name:value})}}/>\r\n                                        </FormControl>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer >\r\n                                        <Button.Group space={2}>\r\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setPop({...showPop,name:false})}> \r\n                                                Cancel\r\n                                            </Button>\r\n                                            <Button colorScheme=\"warning\" onPress={()=> {\r\n                                                handleUpdate('name');\r\n                                                setPop({...showPop,name:false});\r\n                                            }}>Actualizar</Button>\r\n                                        </Button.Group>\r\n                                    </Modal.Footer>\r\n                                </Modal.Content>\r\n                            </Modal>\r\n\r\n                            <Pressable  onPress={() => {setPicker(true);}}>\r\n                                <Text fontSize='2xs'>Nacimiento</Text>\r\n                                <Text fontSize='md'>{animal.nac}</Text>\r\n                                <Divider />\r\n                            </Pressable>        \r\n                            {picker && (\r\n                                <DateTimePicker\r\n                                    value={new Date(animal.nac)}\r\n                                    mode='date'\r\n                                    display=\"default\"\r\n                                    onChange={(event, selectedDate) => {\r\n                                        const f = selectedDate;\r\n                                        var date = f.getFullYear()+'-'+(f.getMonth()+1)+'-'+f.getDate();\r\n                                        setPicker(false);\r\n                                        handleUpdate('nac',date);\r\n                                        \r\n                                    }}\r\n                                />\r\n                            )}\r\n                                   \r\n                            <Pressable  onPress={() => setPop({...showPop,sex:true})}>\r\n                                <Text fontSize='2xs'>Sexo</Text>\r\n                                <Text fontSize='md'>{animal.sex}</Text>\r\n                                <Divider />\r\n                            </Pressable>    \r\n                            <Modal isOpen={showPop.sex} onClose={() => setPop({...showPop,sex:false})} size='md'>                    \r\n                                <Modal.Content >\r\n                                    <Modal.Header alignContent='center'>Actualizar sexo</Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <FormControl>\r\n                                            <Select\r\n                                                selectedValue={form.sex}\r\n                                                onValueChange={(itemValue) => {\r\n                                                    setForm({...form, sex:itemValue})\r\n                                                }}\r\n                                                \r\n                                            >\r\n                                                <Select.Item label=\"Macho\" value=\"M\" />\r\n                                                <Select.Item label=\"Hembra\" value=\"H\" />\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer justifyContent=\"flex-end\">\r\n                                        <Button.Group space={2}>\r\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setPop({...showPop,sex:false})}> \r\n                                                Cancel\r\n                                            </Button>\r\n                                            <Button colorScheme=\"warning\" onPress={()=>{\r\n                                                handleUpdate('sex');\r\n                                                setPop({...showPop,sex:false});\r\n                                            }}>Actualizar</Button>\r\n                                        </Button.Group>\r\n                                    </Modal.Footer>\r\n                                </Modal.Content>\r\n                            </Modal>\r\n\r\n                            <Pressable onPress={() => setPop({...showPop,race:true})}>\r\n                                <Text fontSize='2xs'>Raza</Text>\r\n                                <Text fontSize='md'>{animal.race}</Text>\r\n                                <Divider />\r\n                            </Pressable>    \r\n                            <Modal isOpen={showPop.race} onClose={() => setPop({...showPop,race:false})} size='md'>\r\n                                <Modal.Content >\r\n                                    <Modal.Header alignContent='center'>Actualizar raza</Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <FormControl>\r\n                                            <Input placeholder='Nueva raza' onChangeText={(value)=>{setForm({...form,race:value});}}/>\r\n                                        </FormControl>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer justifyContent=\"flex-end\">\r\n                                        <Button.Group space={2}>\r\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setPop({...showPop,race:false})}> \r\n                                                Cancel\r\n                                            </Button>\r\n                                            <Button colorScheme=\"warning\" onPress={()=>{\r\n                                                handleUpdate('race');\r\n                                                setPop({...showPop,race:false});\r\n                                            }}>Actualizar</Button>\r\n                                        </Button.Group>\r\n                                    </Modal.Footer>\r\n                                </Modal.Content>\r\n                            </Modal>\r\n                            \r\n                            <Pressable onPress={() => setPop({...showPop,color:true})}>\r\n                                <Text fontSize='2xs'>Color</Text>\r\n                                <Text fontSize='md'>{animal.color}</Text>\r\n                                <Divider />\r\n                            </Pressable>    \r\n                            <Modal isOpen={showPop.color} onClose={() => setPop({...showPop,color:false})} size='md'>\r\n                                <Modal.Content>\r\n                                    <Modal.Header alignContent='center'>Actualizar color</Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <FormControl>\r\n                                            <Input placeholder='Nuevo color' onChangeText={(value)=>{setForm({...form,color:value})}}/>\r\n                                        </FormControl>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer justifyContent=\"flex-end\">\r\n                                        <Button.Group space={2}>\r\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=> {\r\n                                                setPop({...showPop,color:false});\r\n                                            }}> \r\n                                                Cancel\r\n                                            </Button>\r\n                                            <Button colorScheme=\"warning\" onPress={()=>{\r\n                                                handleUpdate('color');\r\n                                                setPop({...showPop,color:false});\r\n                                            }}>Actualizar</Button>\r\n                                        </Button.Group>\r\n                                    </Modal.Footer>\r\n                                </Modal.Content>\r\n                            </Modal>                            \r\n                        </VStack>\r\n                        \r\n                        <Button.Group colorScheme=\"info\" my ={3} direction='column'>\r\n                            <HStack space='sm'>\r\n                                <Button \r\n                                    colorScheme='rgb(0, 154, 159)' \r\n                                    _text={{color:'white'}} \r\n                                    leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"dna\"/>}\r\n                                    onPress = {() => handleReproductivos()}\r\n                                >\r\n                                    Registros reproductivos\r\n                                </Button>\r\n                                <Button \r\n                                    colorScheme='rgb(0, 154, 159)' \r\n                                    _text={{color:'white'}} \r\n                                    leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"needle\"/>}\r\n                                    onPress = {() => handleVacunas()}\r\n                                >\r\n                                    Vacunas\r\n                                </Button>\r\n                            </HStack>\r\n                            <HStack space='sm'>\r\n                                <Button width='40%'\r\n                                    colorScheme='rgb(0, 154, 159)' \r\n                                    _text={{color:'white'}} \r\n                                    leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"weight\"/>}\r\n                                    onPress = {() => handlePesajes()}\r\n                                >\r\n                                    Pesajes\r\n                                </Button>\r\n                                <Button \r\n                                    colorScheme='rgb(0, 154, 159)' \r\n                                    _text={{color:'white'}} \r\n                                    leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"virus\"/>}\r\n                                    onPress = {() => handleSanitarios()}\r\n                                >\r\n                                    Controles sanitarios\r\n                                </Button>\r\n                            </HStack>\r\n                            <Button\r\n                                colorScheme='rgb(0, 154, 159)' \r\n                                _text={{color:'white'}} \r\n                                leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"terrain\"/>}\r\n                                onPress = {() => handlePredios()}\r\n                            >\r\n                               Historial de predios\r\n                            </Button>\r\n                        </Button.Group>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        \r\n                        <Button.Group space={3}>\r\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\r\n                                Cancelar\r\n                            </Button >\r\n                            <Button size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}} onPress={() => {setShow({...show,delete:true});\r\n                            }}>\r\n                                Borrar\r\n                            </Button>\r\n                            <Button size='lg' colorScheme='orange' _text={{color:'white'}} onPress={() => {setShow({...show,trans:true});\r\n                            }}>\r\n                                Transferir\r\n                            </Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer>\r\n\r\n                    <AlertDialog  isOpen={show.delete} onClose={()=>setShow({...show,delete:false})}>\r\n                        <AlertDialog.Content>\r\n                            <AlertDialog.CloseButton />\r\n                            <AlertDialog.Header>Borrar animal</AlertDialog.Header>\r\n                            <AlertDialog.Body>\r\n                                Esto borrar√° todos los datos relacionados con este animal. \r\n                                Esta acci√≥n no es reversible. \r\n                                Los datos borrados no podr√°n ser recuperados.\r\n                                ¬øEst√° seguro de esta acci√≥n?\r\n                            </AlertDialog.Body>\r\n                            <AlertDialog.Footer>\r\n                                <Button.Group space={2}>\r\n                                <Button variant=\"unstyled\" colorScheme=\"coolGray\" onPress={()=>setShow({...show,delete:false})}>\r\n                                    Cancelar\r\n                                </Button>\r\n                                <Button onPress={()=> handleDelete(animal.arete)} size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}}>\r\n                                    Confirmar \r\n                                </Button>\r\n                                </Button.Group>\r\n                            </AlertDialog.Footer>\r\n                        </AlertDialog.Content>\r\n                    </AlertDialog>\r\n\r\n                    <Modal isOpen={show.vac} onClose={() => setShow({...show,vac:false})} size='full'>\r\n                        <Modal.Content>\r\n                            <Modal.CloseButton/>\r\n                            <Modal.Header>Registros de vacunaci√≥n</Modal.Header>\r\n                            <Modal.Body>\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button.Group space={2}>\r\n\r\n                                </Button.Group>\r\n                            </Modal.Footer>    \r\n                        </Modal.Content>\r\n                    </Modal>\r\n                </Modal.Content>\r\n            </Modal>\r\n\r\n            <Modal isOpen={show.register} onClose={()=>setShow({...show,register:false})} size='xl' >\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header alignContent='center'>Registrar animal</Modal.Header>\r\n                    <Modal.Body>\r\n                        <VStack>\r\n                            <FormControl isInvalid={'arete' in errors}>\r\n                                <FormControl.Label>Arete</FormControl.Label>\r\n                                <Input\r\n                                    placeholder='Arete - ID'\r\n                                    onChangeText = {(value) => setForm({...form, arete:value})}\r\n                                />\r\n                                {'arete' in errors ?\r\n                                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.arete}</FormControl.ErrorMessage>:\r\n                                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\r\n                                }\r\n                            </FormControl>\r\n                            <FormControl isInvalid={'nombre' in errors}>\r\n                                <FormControl.Label>Nombre</FormControl.Label>\r\n                                <Input\r\n                                    placeholder='Nombre'\r\n                                    onChangeText = {(value) => setForm({...form, name:value})}\r\n                                />\r\n                                {'nombre' in errors ?\r\n                                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.nombre}</FormControl.ErrorMessage>:\r\n                                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\r\n                                }\r\n                            </FormControl>\r\n                            <FormControl isInvalid={'sexo' in errors}>\r\n                                <FormControl.Label>Sexo</FormControl.Label>\r\n                                    <Radio.Group\r\n                                    name=\"sexo\"\r\n                                    accessibilityLabel=\"sexo\"\r\n                                    value={form.sex}\r\n                                    onChange={(nextValue) => {\r\n                                        setForm({...form, sex:nextValue})\r\n                                    }}\r\n                                    >\r\n                                        <Radio value=\"M\" my={1}>\r\n                                            Masculino\r\n                                        </Radio>\r\n                                        <Radio value=\"F\" my={1}>\r\n                                            Femenino\r\n                                        </Radio>\r\n                                    </Radio.Group>\r\n                                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.sexo}</FormControl.ErrorMessage>\r\n                            </FormControl>\r\n                        \r\n                            <FormControl isInvalid={'fecha' in errors}>\r\n                                <FormControl.Label>Fecha de nacimiento</FormControl.Label>\r\n                                <Pressable onPress={()=> setForm({...form,show:true})}>\r\n                                    <Text>{form.nac}</Text>\r\n                                </Pressable>\r\n                                {form.show && (\r\n                                <DateTimePicker\r\n                                    value={new Date()}\r\n                                    mode='date'\r\n                                    display=\"default\"\r\n                                    onChange={(event, selectedDate) => {\r\n                                        const f = selectedDate;\r\n                                        const currentDate = f.getFullYear() + \"-\"+ (f.getMonth()+1) + \"-\" +f.getDate();\r\n                                        setForm({...form,nac:currentDate,show:false});\r\n                                    }}\r\n                                />\r\n                            )}\r\n                                \r\n                                <FormControl.ErrorMessage>{errors.fecha}</FormControl.ErrorMessage>\r\n                            </FormControl>\r\n\r\n                            <FormControl isInvalid={'raza' in errors}>\r\n                                <FormControl.Label>Raza</FormControl.Label>\r\n                                <Input\r\n                                    placeholder='Raza'\r\n                                    onChangeText = {(value) => setForm({...form, race:value})}\r\n                                />\r\n                                {'raza' in errors ?\r\n                                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.raza}</FormControl.ErrorMessage>:\r\n                                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\r\n                                }\r\n                            </FormControl>\r\n                            <FormControl isInvalid={'color' in errors}>\r\n                                <FormControl.Label>Color</FormControl.Label>\r\n                                <Input\r\n                                    placeholder='Color'\r\n                                    onChangeText = {(value) => setForm({...form, color:value})}\r\n                                />\r\n                                {'color' in errors ?\r\n                                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.color}</FormControl.ErrorMessage>:\r\n                                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\r\n                                }\r\n                            </FormControl>\r\n                        </VStack>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                    <Button.Group space={2}>\r\n                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setShow({...show,register:false})}> \r\n                                Cancel\r\n                            </Button>\r\n                            <Button size='lg' colorScheme='rgb(0, 247, 255)' _text={{color:'white'}}onPress={()=>handleRegister()}>Crear</Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer>\r\n                </Modal.Content>\r\n            </Modal>\r\n\r\n            <Modal isOpen={show.rep} onClose={()=>setShow({...show,rep:false})} size='lg' >\r\n                \r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header alignContent='center'>Registro reproductivo</Modal.Header>\r\n                    <Modal.Body>\r\n                        <Center>\r\n                            <Heading>ID de Embarazo</Heading>\r\n                            <Text>{list.id}</Text>\r\n                            <HStack space={2}>\r\n                                <VStack space={2}>\r\n                                    <Heading>Padre</Heading>\r\n                                    <Text>{list.dad}</Text>\r\n                                </VStack>\r\n                                <VStack space={2}>\r\n                                    <Heading>Madre</Heading>\r\n                                    <Text>{list.mom}</Text>\r\n                                </VStack>\r\n                            </HStack>\r\n                        </Center>\r\n                    </Modal.Body>\r\n                </Modal.Content>\r\n            </Modal>\r\n\r\n            <Modal isOpen={show.vac} onClose={()=>setShow({...show,vac:false})} size='lg' >\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header alignContent='center'>Vacunas</Modal.Header>\r\n                    <Modal.Body>\r\n                        <FlatList data={list}  renderItem={({item}) => \r\n                            <HStack borderBottomWidth=\"1\" space='4' >\r\n                                <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"needle\" width='20%'/>\r\n                                <VStack width=\"65%\">\r\n                                    <Heading>{item.name}</Heading>\r\n                                    <Text>{item.date}</Text>\r\n                                </VStack> \r\n                            </HStack>               \r\n                        }\r\n                        keyExtractor={item=>item.id}\r\n                        />\r\n                    </Modal.Body>\r\n                </Modal.Content>\r\n            </Modal>\r\n\r\n            <Modal isOpen={show.pesaje} onClose={()=>setShow({...show,pesaje:false})} size='lg' >\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header alignContent='center'>Pesajes</Modal.Header>\r\n                    <Modal.Body>\r\n                        <FlatList data={list}  renderItem={({item}) => \r\n                                <HStack borderBottomWidth=\"1\" space='4' >\r\n                                    <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"weight\" width='20%'/>\r\n                                    <VStack width=\"65%\">\r\n                                        <Heading>{item.kg} Kg</Heading>\r\n                                        <Text>{item.date}</Text>\r\n                                    </VStack> \r\n                                </HStack>               \r\n                            }\r\n                            keyExtractor={item=>item.id}\r\n                        />\r\n                    </Modal.Body>\r\n                </Modal.Content>\r\n            </Modal>\r\n            <Modal isOpen={show.san} onClose={()=>setShow({...show,san:false})} size='lg' >\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header alignContent='center'>Controles sanitarios</Modal.Header>\r\n                    <Modal.Body>\r\n                        <FlatList data={list}  renderItem={({item}) => \r\n                                <HStack borderBottomWidth=\"1\" space='4' >\r\n                                    <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"virus\" width='20%'/>\r\n                                    <VStack width=\"65%\">\r\n                                        <Heading>{item.name}</Heading>\r\n                                        <Text>{item.date}</Text>\r\n                                    </VStack> \r\n                                </HStack>               \r\n                            }\r\n                            keyExtractor={item=>item.id}\r\n                        />\r\n                    </Modal.Body>\r\n                </Modal.Content>\r\n            </Modal>\r\n            <Modal isOpen={show.predios} onClose={()=>setShow({...show,predios:false})} size='lg' >\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header alignContent='center'>Historial de predios</Modal.Header>\r\n                    <Modal.Body>\r\n                        <FlatList data={list}  inverted={true} renderItem={({item}) => \r\n                                <HStack borderBottomWidth=\"1\" space='4' >\r\n                                    <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"terrain\" width='20%'/>\r\n                                    <VStack width=\"65%\">\r\n                                        <Heading>{item.predio}</Heading>\r\n                                        <Text>{item.date}</Text>\r\n                                    </VStack> \r\n                                </HStack>               \r\n                            }\r\n                            keyExtractor={item=>item.id}\r\n                        />\r\n                    </Modal.Body>\r\n                </Modal.Content>\r\n            </Modal>\r\n\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\n//Screen Vacunas\r\n\r\nexport const Vacunas = ({navigation }) => {\r\n\r\n    const [form,setForm] = React.useState({show:false,date:'YYYY-MM-DD'});\r\n    const [errors, setErrors] = React.useState({});\r\n    const [show, setShow] = React.useState({vacuna:false,register:false,delete:false,animals:false,add:false,rm:false});\r\n    const [showPop, setPop] = React.useState({id:false,name:false,date:false});\r\n    const [search, setSearch] = React.useState('');\r\n    const [vacuna, setVacuna] = React.useState({id:0,name:'N/A',date:new Date()});\r\n    const [list, setList] = React.useState([]);\r\n\r\n    const tkn = useSelector(state => state.jwt);\r\n    const mt = useSelector((state) => state.mtr.vacunas);\r\n    const vacunas = useSelector((state)=> state.vacunas);\r\n    const bkp = useSelector((state) => state.bkpVacunas);\r\n    const vac_animal = useSelector((state) => state.vac_animal);\r\n    const hato = useSelector((state)=> state.hato);\r\n\r\n    const toast = useToast();\r\n    const dispatch = useDispatch();\r\n    \r\n    const filtrar = (search) => {\r\n        var resultado = bkp.filter((vacuna)=>{\r\n            if(vacuna.name.toString().toLowerCase().includes(search.toString().toLowerCase()))\r\n                return vacuna;\r\n        });\r\n        dispatch(action.setVacunas(resultado));\r\n    }\r\n    const handleSearch = txt => {\r\n        setSearch(txt);\r\n        filtrar(txt);\r\n    }\r\n    const handleVacuna = (item) =>{\r\n        setVacuna(item);\r\n        setShow({...show,vacuna:true});\r\n    }\r\n    const handleAnimals = () => {\r\n        var ids = vac_animal.filter((rel)=>{\r\n            if(rel.vacuna == vacuna.id)\r\n                return rel;\r\n        });\r\n        var lista = hato.filter((animal)=>{\r\n            for(let i=0; i<=ids.length-1; i++){\r\n                if(ids[i].arete == animal.arete)\r\n                    return true;\r\n            }\r\n        });\r\n        if(lista.length > 0){\r\n            setList(lista);\r\n            setShow({...show,animals:true});\r\n        }else\r\n            toast.show({title:'Vacio',description:'No hay animales'});\r\n    }\r\n    const handleRegister = async() =>{ \r\n        NetInfo.fetch().then(state => {\r\n            if(state.isConnected){\r\n                \r\n                action.createVacuna(tkn,{\r\n                    name:form.name,\r\n                    fecha:form.date\r\n                }).then(ins =>{\r\n                    setShow({...show,register:false});\r\n                    if(ins == true){\r\n                        toast.show({title:'Exito',status:'success',description:'Animal creado'});\r\n                        dispatch(action.getVacunas(tkn));\r\n                    }else\r\n                        toast.show({title:'Error al insertar',status:'error',description:'Intente de nuevo'});\r\n                });\r\n            }else{\r\n                dispatch(action.addTrans({type:'addVacuna',data:{\r\n                    name:form.name,\r\n                    fecha:form.date\r\n                }}));\r\n                dispatch(action.addVacuna({\r\n                    name:form.name,\r\n                    fecha:form.date\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    const handleDelete = async(id) =>{ \r\n        NetInfo.fetch().then(state => {\r\n            if(state.isConnected){\r\n                action.deleteVacuna(tkn,id).then(del =>{\r\n                    setShow({...show,delete:false});\r\n                    if(del == true){\r\n                        dispatch(action.getVacunas(tkn));\r\n                        setShow({...show,delete:false,animal:false});\r\n                        toast.show({title:'Exito',status:'info',description:'Vacuna eliminada'});\r\n                        setAnimal({});\r\n                    }else\r\n                        toast.show({title:'Error al eliminar',status:'error',description:'Intente de nuevo'});\r\n                });\r\n            }else{\r\n                dispatch(action.addTrans({type:'delVacuna',data:id}));\r\n                dispatch(action.dropVacuna(id));\r\n            }\r\n        });\r\n    }\r\n    const handleUpdate =async(type,date=null) => {\r\n        var word = '';\r\n        switch(type){\r\n            case 'name':\r\n                word =form.name ;\r\n                setVacuna({...vacuna,name:word});\r\n                break;\r\n            case 'fecha':\r\n                word = date;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        var upd = await action.updateVacuna(tkn,vacuna.id,type,word);\r\n        if(upd == true){\r\n            dispatch(action.getVacunas(tkn));\r\n            setShow({...show,vacuna:false});\r\n            toast.show({title:'Actualizacion exitosa',status:'success'});\r\n            \r\n        }else{\r\n            setShow({...show,vacuna:false});\r\n            toast.show({title:'Error con el servidor',status:'error',description:'Intente de nuevo'});\r\n        }\r\n    }\r\n    return (\r\n        <View>\r\n            <Box>\r\n                <HStack space={2}>\r\n                    <Input onChangeText={handleSearch} value={search}placeholder=\"Buscar\" variant=\"filled\" width=\"80%\" borderRadius=\"10\" borderWidth=\"0\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\r\n                    <IconButton width='15%' colorScheme='rgb(173, 0, 255)' borderRadius=\"xl\" variant=\"solid\"  size=\"lg\"\r\n                        icon={<Icon  as={MaterialCommunityIcons} name=\"plus\"/>}\r\n                        onPress={()=>setShow({...show,register:true})}\r\n                    />\r\n                </HStack>\r\n                <FlatList data={vacunas}  renderItem={({item}) => \r\n                    <Pressable onPress={() => handleVacuna(item)}>\r\n                        <HStack borderBottomWidth=\"1\" space='4' >\r\n                            <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"needle\" width='20%'/>\r\n                            <VStack width=\"65%\">\r\n                                <Heading>{item.id}</Heading>\r\n                                <Text>{item.name}</Text>\r\n                            </VStack>\r\n                        </HStack>               \r\n                    </Pressable>\r\n                }\r\n                keyExtractor={item=>item.id}\r\n                />\r\n                <Text>{mt}</Text>             \r\n            </Box>\r\n\r\n            <Modal isOpen={show.register} onClose={()=>setShow({...show,register:false})}>\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header>Registrar vacuna</Modal.Header>\r\n                    <Modal.Body>\r\n                        <VStack>\r\n                            <FormControl isInvalid={'name' in errors}>\r\n                                <FormControl.Label>Nombre</FormControl.Label>\r\n                                <Input\r\n                                    placeholder='Nombre'\r\n                                    onChangeText={(value) => setForm({...form,name:value})}\r\n                                />\r\n                                {\r\n                                    'name' in errors ? \r\n                                        <FormControl.ErrorMessage>{errors.name}</FormControl.ErrorMessage>:\r\n                                            <FormControl.HelperText></FormControl.HelperText>\r\n                                }\r\n                            </FormControl>\r\n\r\n                            <FormControl isInvalid={'fecha' in errors}>\r\n                                <FormControl.Label>Fecha de aplicaci√≥n</FormControl.Label>\r\n                                <Pressable  onPress={() => setForm({...form,show:true})}>\r\n                                    <Text fontSize='2xs'>Fecha de aplicacion</Text>\r\n                                    <Text fontSize='md'>{form.date}</Text>\r\n                                    <Divider />\r\n                                </Pressable>        \r\n                                {form.show && (\r\n                                    <DateTimePicker\r\n                                        value={new Date()}\r\n                                        mode='date'\r\n                                        display=\"default\"\r\n                                        onChange={(event, selectedDate) => {\r\n                                            const f = selectedDate;\r\n                                            const currentDate = f.getFullYear() + \"-\"+ (f.getMonth()+1)+ \"-\" +f.getDate();\r\n                                            setForm({...form,date:currentDate,show:false});\r\n                                    \r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            </FormControl>\r\n                        </VStack>\r\n                    </Modal.Body>\r\n                    \r\n                    <Modal.Footer>\r\n                        <Button.Group space={2}>\r\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow({...show,register:false})}}>\r\n                                Cancelar\r\n                            </Button >\r\n                            <Button size='lg' colorScheme='rgb(0, 247, 255)' _text={{color:'white'}} \r\n                                onPress={() => {handleRegister();}\r\n                            }>\r\n                                Registrar vacuna\r\n                            </Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer> \r\n                </Modal.Content> \r\n            </Modal>\r\n\r\n            <Modal isOpen={show.vacuna} onClose={() => setShow({...show,vacuna:false})} size='full'>\r\n                <Modal.Content >\r\n                    <Modal.CloseButton />\r\n                    <Modal.Header alignSelf=\"center\" _text={{fontSize:'xl',Overridden:'bold'}}>{vacuna.id}</Modal.Header>\r\n                    <Modal.Body >\r\n                        <VStack >\r\n                            <Pressable onPress={() => setPop({...showPop,name:true})}>\r\n                                <Text fontSize='2xs'>Nombre</Text>\r\n                                <Text fontSize='md'>{vacuna.name}</Text>\r\n                                <Divider />\r\n                            </Pressable> \r\n                            <Modal isOpen={showPop.name} onClose={() => setPop({...showPop,name:false})} size='xl'>\r\n                                <Modal.Content >\r\n                                    <Modal.Header alignContent='center'>Actualizar nombre</Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <FormControl>\r\n                                            <Input placeholder='Nuevo nombre' onChangeText={(value)=>{setForm({...form,name:value})}}/>\r\n                                        </FormControl>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer >\r\n                                        <Button.Group space={2}>\r\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setPop({...showPop,name:false})}> \r\n                                                Cancel\r\n                                            </Button>\r\n                                            <Button colorScheme=\"warning\" onPress={()=> {\r\n                                                handleUpdate('name');\r\n                                                setPop({...showPop,name:false});\r\n                                            }}>Actualizar</Button>\r\n                                        </Button.Group>\r\n                                    </Modal.Footer>\r\n                                </Modal.Content>\r\n                            </Modal>\r\n\r\n                            <Pressable  onPress={() => setPop({...showPop,date:true})}>\r\n                                <Text fontSize='2xs'>Fecha de aplicacion</Text>\r\n                                <Text fontSize='md'>{vacuna.date}</Text>\r\n                                <Divider />\r\n                            </Pressable>        \r\n                            {showPop.date && (\r\n                                <DateTimePicker\r\n                                    value={new Date(vacuna.date)}\r\n                                    mode='date'\r\n                                    display=\"default\"\r\n                                    onChange={(event, selectedDate) => {\r\n                                        const f = selectedDate;\r\n                                        const currentDate = f.getFullYear() + \"-\"+ (f.getMonth()+1)+ \"-\" +f.getDate();\r\n                                        setForm({...form,date:currentDate});\r\n                                        handleUpdate('fecha',currentDate);\r\n                                        setPop({...showPop,date:false});\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        </VStack>\r\n                        \r\n                        \r\n                        <Button \r\n                            colorScheme='rgb(0, 154, 159)' \r\n                            _text={{color:'white'}} \r\n                            leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"cow\"/>}\r\n                            onPress = {() => handleAnimals()}\r\n                        >\r\n                            Hato vacunado\r\n                        </Button>\r\n                            \r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        \r\n                        <Button.Group space={2}>\r\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\r\n                                Cancelar\r\n                            </Button >\r\n                            <Button size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}} onPress={() => {setShow({...show,delete:true});\r\n                            }}>\r\n                                Borrar\r\n                            </Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer>\r\n\r\n                    <AlertDialog  isOpen={show.delete} onClose={()=>setShow({...show,delete:false})}>\r\n                        <AlertDialog.Content>\r\n                            <AlertDialog.CloseButton />\r\n                            <AlertDialog.Header>Borrar vacuna</AlertDialog.Header>\r\n                            <AlertDialog.Body>\r\n                                Esto borrar√° todos los datos relacionados con esta vacuna. \r\n                                Esta acci√≥n no es reversible. \r\n                                Los datos borrados no podr√°n ser recuperados.\r\n                                ¬øEst√° seguro de esta acci√≥n?\r\n                            </AlertDialog.Body>\r\n                            <AlertDialog.Footer>\r\n                                <Button.Group space={2}>\r\n                                <Button variant=\"unstyled\" colorScheme=\"coolGray\" onPress={()=>setShow({...show,delete:false})}>\r\n                                    Cancelar\r\n                                </Button>\r\n                                <Button onPress={()=>{handleDelete(vacuna.id)}} size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}}>\r\n                                    Confirmar \r\n                                </Button>\r\n                                </Button.Group>\r\n                            </AlertDialog.Footer>\r\n                        </AlertDialog.Content>\r\n                    </AlertDialog>\r\n                </Modal.Content>\r\n            </Modal>\r\n\r\n            <Modal isOpen={show.animals} onClose={()=>setShow({...show,animals:false})} size='full' >\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header alignContent='center'>Animales</Modal.Header>\r\n                    <Modal.Body>\r\n                        <FlatList data={list}  renderItem={({item}) => \r\n                            <HStack borderBottomWidth=\"1\" space='4' >\r\n                                <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"cow\" width='20%'/>\r\n                                <VStack width=\"65%\">\r\n                                    <Heading>{item.arete}</Heading>\r\n                                    <Text>{item.name}</Text>\r\n                                </VStack> \r\n                            </HStack>               \r\n                        }\r\n                        keyExtractor={item=>item.id}\r\n                        />\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                                <Button.Group space={2}>\r\n                                    <Button colorScheme='orange'>Eliminar</Button>\r\n                                    <Button >Agregar</Button>\r\n                                </Button.Group>\r\n                            </Modal.Footer>  \r\n                </Modal.Content>\r\n            </Modal>\r\n        </View>\r\n    );\r\n\r\n}\r\n\r\n//Screen Sanitario\r\nexport const Sanitarios= ({navigation}) =>{\r\n    const [form,setForm] = React.useState({name:'',date:'YYYY-MM-DD'});\r\n    const [errors, setErrors] = React.useState({});\r\n    const [show, setShow] = React.useState({sanitario:false,register:false,delete:false,animals:false,add:false,rm:false});\r\n    const [showPop, setPop] = React.useState({id:false,name:false,date:false});\r\n    const [search, setSearch] = React.useState('');\r\n    const [sanitario, setSanitario] = React.useState({id:0,name:'N/A',date:new Date()});\r\n    const [list, setList] = React.useState([]);\r\n\r\n    const mt = useSelector((state) => state.mtr.sanitarios);\r\n    const sanitarios = useSelector((state)=> state.sanitarios);\r\n    const bkp = useSelector((state) => state.bkpSanitarios);\r\n    const hato = useSelector(state => state.hato);\r\n    const ctl_animal = useSelector(state => state.ctl_animal);\r\n    const tkn = useSelector(state => state.jwt);\r\n\r\n    const toast = useToast();\r\n    const dispatch = useDispatch();\r\n    \r\n    const filtrar = (search) => {\r\n        var resultado = bkp.filter((sanitario)=>{\r\n            if(sanitario.name.toString().toLowerCase().includes(search.toString().toLowerCase()))\r\n                return sanitario;\r\n        });\r\n        dispatch(action.setSanitarios(resultado));\r\n    }\r\n    const handleSearch = txt => {\r\n        setSearch(txt);\r\n        filtrar(txt);\r\n    }\r\n    const handleSanitario = (item) =>{\r\n        setSanitario(item);\r\n        setShow({...show,sanitario:true});\r\n    }\r\n    const handleAnimals = () => {\r\n        var ids = ctl_animal.filter((rel)=>{\r\n            if(rel.ctl == sanitario.id)\r\n                return rel;\r\n        });\r\n        \r\n        var lista = hato.filter((animal)=>{\r\n            for(let i=0; i<=ids.length-1; i++){\r\n                if(ids[i].arete == animal.arete)\r\n                    return true;\r\n            }\r\n        });\r\n        if(lista.length > 0){\r\n            setList(lista);\r\n            setShow({...show,animals:true});\r\n        }else\r\n            toast.show({title:'Vacio',description:'No hay animales'});\r\n    }\r\n    const handleRegister = async() =>{\r\n        const nuevo = {name:form.name,fecha:form.date};\r\n        NetInfo.fetch().then(state => {\r\n            if(state.isConnected){\r\n                action.createSanitario(tkn,nuevo).then(ins =>{\r\n                    setShow({...show,register:false});\r\n                    if(ins == true){\r\n                        toast.show({title:'Exito',status:'success',description:'Registro creado'});\r\n                        dispatch(action.getSanitarios(tkn));\r\n                    }else\r\n                        toast.show({title:'Error al insertar',status:'error',description:'Intente de nuevo'});\r\n                });\r\n            }else{\r\n                dispatch(action.addTrans({type:'addSanitario',data:nuevo}));\r\n                dispatch(action.addSanitario(nuevo));\r\n            }\r\n        });\r\n    }\r\n    const handleDelete = async(id) =>{ \r\n        NetInfo.fetch().then(state => {\r\n            if(state.isConnected){\r\n                action.deleteSanitario(tkn,id).then(del =>{\r\n                    setShow({...show,delete:false});\r\n                    if(del == true){\r\n                        dispatch(action.getSanitarios(tkn));\r\n                        setShow({...show,delete:false,sanitario:false});\r\n                        toast.show({title:'Exito',status:'info',description:'Sanitario eliminada'});\r\n                        setAnimal({});\r\n                    }else\r\n                        toast.show({title:'Error al eliminar',status:'error',description:'Intente de nuevo'});\r\n                });\r\n            }else{\r\n                dispatch(action.addTrans({type:'delSanitario',data:id}));\r\n                dispatch(action.dropSanitario(id));\r\n            }\r\n        });\r\n    }\r\n    const handleUpdate =async(type,date=null) => {\r\n        var word = '';\r\n        switch(type){\r\n            case 'name':\r\n                word =form.name;\r\n                setSanitario({...sanitario,name:word});\r\n                break;\r\n            case 'fecha':\r\n                word = date;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        var upd = await action.updateSanitario(tkn,sanitario.id,type,word);\r\n        if(upd == true){\r\n            dispatch(action.getSanitarios(tkn));\r\n            setShow({...show,sanitario:false});\r\n            toast.show({title:'Actualizacion exitosa',status:'success'});\r\n            \r\n        }else{\r\n            setShow({...show,sanitario:false});\r\n            toast.show({title:'Error con el servidor',status:'error',description:'Intente de nuevo'});\r\n        }\r\n    }\r\n    return (\r\n        <View>\r\n            <Box>\r\n                <HStack space={2}>\r\n                    <Input onChangeText={handleSearch} value={search}placeholder=\"Buscar\" variant=\"filled\" width=\"80%\" borderRadius=\"10\" borderWidth=\"0\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\r\n                    <IconButton width='15%' colorScheme='rgb(173, 0, 255)' borderRadius=\"xl\" variant=\"solid\"  size=\"lg\"\r\n                        icon={<Icon  as={MaterialCommunityIcons} name=\"plus\"/>}\r\n                        onPress={()=>setShow({...show,register:true})}\r\n                    />\r\n                </HStack>\r\n                <FlatList data={sanitarios}  renderItem={({item}) => \r\n                    <Pressable onPress={() => handleSanitario(item)}>\r\n                        <HStack borderBottomWidth=\"1\" space='4' >\r\n                            <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"virus\" width='20%'/>\r\n                            <VStack width=\"65%\">\r\n                                <Heading>{item.id}</Heading>\r\n                                <Text>{item.name}</Text>\r\n                            </VStack>\r\n                        </HStack>               \r\n                    </Pressable>\r\n                }\r\n                keyExtractor={item=>item.id}\r\n                />\r\n                <Text>{mt}</Text>             \r\n            </Box>\r\n\r\n            <Modal isOpen={show.register} onClose={()=>setShow({...show,register:false})}>\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header>Nuevo control sanitario</Modal.Header>\r\n                    <Modal.Body>\r\n                        <VStack>\r\n                            <FormControl isInvalid={'name' in errors}>\r\n                                <FormControl.Label>Nombre</FormControl.Label>\r\n                                <Input\r\n                                    placeholder='Nombre'\r\n                                    onChangeText={(value) => setForm({...form, name:value})}\r\n                                />\r\n                                {\r\n                                    'name' in errors ? \r\n                                        <FormControl.ErrorMessage>{errors.name}</FormControl.ErrorMessage>:\r\n                                            <FormControl.HelperText></FormControl.HelperText>\r\n                                }\r\n                            </FormControl>\r\n\r\n                            <FormControl isInvalid={'fecha' in errors}>\r\n                                <FormControl.Label>Fecha de aplicaci√≥n</FormControl.Label>\r\n                                <Pressable  onPress={() => setForm({...form,show:true})}>\r\n                                    <Text fontSize='2xs'>Fecha de aplicacion</Text>\r\n                                    <Text fontSize='md'>{form.date}</Text>\r\n                                    <Divider />\r\n                                </Pressable>        \r\n                                {form.show && (\r\n                                    <DateTimePicker\r\n                                        value={new Date()}\r\n                                        mode='date'\r\n                                        display=\"default\"\r\n                                        onChange={(event, selectedDate) => {\r\n                                            const f = selectedDate;\r\n                                            const currentDate = f.getFullYear() + \"-\"+ (f.getMonth()+1)+ \"-\" +f.getDate();\r\n                                            setForm({...form,show:false,date:currentDate});\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            </FormControl>\r\n                        </VStack>\r\n                    </Modal.Body>\r\n        \r\n                    <Modal.Footer>\r\n                        <Button.Group space={2}>\r\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\r\n                                Cancelar\r\n                            </Button >\r\n                            <Button size='lg' colorScheme='rgb(0, 247, 255)' _text={{color:'white'}} \r\n                                onPress={() => {handleRegister()}\r\n                            }>\r\n                                Crear\r\n                            </Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer> \r\n                </Modal.Content> \r\n            </Modal>\r\n\r\n            <Modal isOpen={show.sanitario} onClose={() => setShow({...show,sanitario:false})} size='full'>\r\n                <Modal.Content >\r\n                    <Modal.CloseButton />\r\n                    <Modal.Header alignSelf=\"center\" _text={{fontSize:'xl',Overridden:'bold'}}>{sanitario.id}</Modal.Header>\r\n                    <Modal.Body >\r\n                        <VStack >\r\n                            <Pressable onPress={() => setPop({...showPop,name:true})}>\r\n                                <Text fontSize='2xs'>Nombre</Text>\r\n                                <Text fontSize='md'>{sanitario.name}</Text>\r\n                                <Divider />\r\n                            </Pressable> \r\n                            <Modal isOpen={showPop.name} onClose={() => setPop({...showPop,name:false})} size='xl'>\r\n                                <Modal.Content >\r\n                                    <Modal.Header alignContent='center'>Actualizar nombre</Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <FormControl>\r\n                                            <Input placeholder='Nuevo nombre' \r\n                                                onChangeText={(value)=>{setForm({...form,name:value})}}\r\n                                            />\r\n                                        </FormControl>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer >\r\n                                        <Button.Group space={2}>\r\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setPop({...showPop,name:false})}> \r\n                                                Cancel\r\n                                            </Button>\r\n                                            <Button colorScheme=\"warning\" onPress={()=> {\r\n                                                handleUpdate('name');\r\n                                                setPop({...showPop,name:false});\r\n                                            }}>Actualizar</Button>\r\n                                        </Button.Group>\r\n                                    </Modal.Footer>\r\n                                </Modal.Content>\r\n                            </Modal>\r\n\r\n                            <Pressable  onPress={() => setPop({...showPop,date:true})}>\r\n                                <Text fontSize='2xs'>Fecha de aplicacion</Text>\r\n                                <Text fontSize='md'>{sanitario.date}</Text>\r\n                                <Divider />\r\n                            </Pressable>        \r\n                            {showPop.date && (\r\n                                <DateTimePicker\r\n                                    value={new Date(sanitario.date)}\r\n                                    mode='date'\r\n                                    display=\"default\"\r\n                                    onChange={(event, selectedDate) => {\r\n                                        const f = selectedDate;\r\n                                        const currentDate = f.getFullYear() + \"-\"+ (f.getMonth()+1)+ \"-\" +f.getDate();\r\n                                        setForm({...form,date:currentDate});\r\n                                        handleUpdate('fecha',currentDate);\r\n                                        setPop({...showPop,date:false});\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        </VStack>\r\n                        \r\n                        \r\n                        <Button \r\n                            colorScheme='rgb(0, 154, 159)' \r\n                            _text={{color:'white'}} \r\n                            leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"cow\"/>}\r\n                            onPress = {() => handleAnimals()}\r\n                        >\r\n                            Hato de control\r\n                        </Button>\r\n                            \r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        \r\n                        <Button.Group space={2}>\r\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\r\n                                Cancelar\r\n                            </Button >\r\n                            <Button size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}} onPress={() => {setShow({...show,delete:true});\r\n                            }}>\r\n                                Borrar\r\n                            </Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer>\r\n\r\n                    <AlertDialog  isOpen={show.delete} onClose={()=>setShow({...show,delete:false})}>\r\n                        <AlertDialog.Content>\r\n                            <AlertDialog.CloseButton />\r\n                            <AlertDialog.Header>Borrar control sanitario</AlertDialog.Header>\r\n                            <AlertDialog.Body>\r\n                                Esto borrar√° todos los datos relacionados con esta control sanitario. \r\n                                Esta acci√≥n no es reversible. \r\n                                Los datos borrados no podr√°n ser recuperados.\r\n                                ¬øEst√° seguro de esta acci√≥n?\r\n                            </AlertDialog.Body>\r\n                            <AlertDialog.Footer>\r\n                                <Button.Group space={2}>\r\n                                <Button variant=\"unstyled\" colorScheme=\"coolGray\" onPress={()=>setShow({...show,delete:false})}>\r\n                                    Cancelar\r\n                                </Button>\r\n                                <Button onPress={()=>{handleDelete(sanitario.id)}} size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}}>\r\n                                    Confirmar \r\n                                </Button>\r\n                                </Button.Group>\r\n                            </AlertDialog.Footer>\r\n                        </AlertDialog.Content>\r\n                    </AlertDialog>\r\n                </Modal.Content>\r\n            </Modal>\r\n\r\n            <Modal isOpen={show.animals} onClose={()=>setShow({...show,animals:false})} size='full' >\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header alignContent='center'>Animales</Modal.Header>\r\n                    <Modal.Body>\r\n                        <FlatList data={list}  renderItem={({item}) => \r\n                            <HStack borderBottomWidth=\"1\" space='4' >\r\n                                <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"cow\" width='20%'/>\r\n                                <VStack width=\"65%\">\r\n                                    <Heading>{item.arete}</Heading>\r\n                                    <Text>{item.name}</Text>\r\n                                </VStack> \r\n                            </HStack>               \r\n                        }\r\n                        keyExtractor={item=>item.id}\r\n                        />\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                                <Button.Group space={2}>\r\n                                    <Button colorScheme='orange'>Eliminar</Button>\r\n                                    <Button >Agregar</Button>\r\n                                </Button.Group>\r\n                            </Modal.Footer>  \r\n                </Modal.Content>\r\n            </Modal>\r\n        </View>\r\n    );\r\n}\r\n\r\n//Screen Embarazos\r\n\r\nexport const Embarazos = ({navigation}) => {\r\n    const [form,setForm] = React.useState({show:false,date:'YYYY-MM-DD'});\r\n    const [errors, setErrors] = React.useState({});\r\n    const [show, setShow] = React.useState({embarazo:false,register:false,delete:false,animals:false});\r\n    const [showPop, setPop] = React.useState({id:false,name:false,inicio:false,fin:false});\r\n    const [search, setSearch] = React.useState('');\r\n    const [embarazo, setEmbarazo] = React.useState({id:0,name:'N/A',inicio:'YYYY-MM-DD', fin:'YYYY-MM-DD'});\r\n\r\n    const mt = useSelector((state) => state.mtr.embarazos);\r\n    const embarazos = useSelector((state)=> state.embarazos);\r\n    const bkp = useSelector((state) => state.bkpEmbarazos);\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const filtrar = (search) => {\r\n        var resultado = bkp.filter((embarazo)=>{\r\n            if(embarazo.date.toString().toLowerCase().includes(search.toString().toLowerCase()))\r\n                return embarazo;\r\n        });\r\n        dispatch(action.setEmbarazos(resultado));\r\n    }\r\n    const handleSearch = txt => {\r\n        setSearch(txt);\r\n        filtrar(txt);\r\n    }\r\n    const handleEmbarazo = (item) =>{\r\n        setShow({...show,embarazo:true});\r\n    }\r\n    const handleUpdate =(type) => {\r\n        console.log(type);\r\n    }\r\n    return (\r\n        <View>\r\n            <Box>\r\n                <HStack space={2}>\r\n                    <Input onChangeText={handleSearch} value={search}placeholder=\"Buscar\" variant=\"filled\" width=\"80%\" borderRadius=\"10\" borderWidth=\"0\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\r\n                    <IconButton width='15%' colorScheme='rgb(173, 0, 255)' borderRadius=\"xl\" variant=\"solid\"  size=\"lg\"\r\n                        icon={<Icon  as={MaterialCommunityIcons} name=\"plus\"/>}\r\n                        onPress={()=>setShow({...show,register:true})}\r\n                    />\r\n                </HStack>\r\n                <FlatList data={embarazos}  renderItem={({item}) => \r\n                    <Pressable onPress={() => handleEmbarazo(item)}>\r\n                        <HStack borderBottomWidth=\"1\" space='4' >\r\n                            <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"dna\" width='20%'/>\r\n                            <VStack width=\"65%\">\r\n                                <Heading>{item.id}</Heading>\r\n                                \r\n                            </VStack>\r\n                        </HStack>               \r\n                    </Pressable>\r\n                }\r\n                keyExtractor={item=>item.id}\r\n                />\r\n                <Text>{mt}</Text>             \r\n            </Box>\r\n\r\n            <Modal isOpen={show.register} onClose={()=>setShow({...show,register:false})}>\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header>Registrar Embarazo</Modal.Header>\r\n                    <Modal.Body>\r\n                        <VStack>\r\n                            <FormControl isInvalid={'name' in errors}>\r\n                                <FormControl.Label>Nombre</FormControl.Label>\r\n                                <Input\r\n                                    placeholder='Nombre'\r\n                                    onChangeText={(value) => setData({...data, nombre:value})}\r\n                                />\r\n                                {\r\n                                    'name' in errors ? \r\n                                        <FormControl.ErrorMessage>{errors.name}</FormControl.ErrorMessage>:\r\n                                            <FormControl.HelperText></FormControl.HelperText>\r\n                                }\r\n                            </FormControl>\r\n\r\n                            <FormControl isInvalid={'fecha' in errors}>\r\n                                <FormControl.Label>Fecha de aplicaci√≥n</FormControl.Label>\r\n                                <Pressable  onPress={() => setForm({...form,show:true})}>\r\n                                    <Text fontSize='2xs'>Fecha de aplicacion</Text>\r\n                                    <Text fontSize='md'>{form.date}</Text>\r\n                                    <Divider />\r\n                                </Pressable>        \r\n                                {form.show && (\r\n                                    <DateTimePicker\r\n                                        value={new Date()}\r\n                                        mode='date'\r\n                                        display=\"default\"\r\n                                        onChange={(event, selectedDate) => {\r\n                                            const f = selectedDate;\r\n                                            const currentDate = f.getFullYear() + \"-\"+ f.getMonth()+ \"-\" +f.getDate();\r\n                                            setForm({...form,date:currentDate,show:false});\r\n                                    \r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            </FormControl>\r\n                        </VStack>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n\r\n                    </Modal.Footer>\r\n                \r\n                    <Modal.Footer>\r\n                        <Button.Group space={2}>\r\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\r\n                                Cancelar\r\n                            </Button >\r\n                            <Button size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}} onPress={() => {setShowDel(true);\r\n                            }}>\r\n                                Borrar\r\n                            </Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer> \r\n                </Modal.Content> \r\n            </Modal>\r\n        </View>\r\n    );\r\n}\r\n\r\n//Screen Pesajes\r\n\r\nexport const Pesajes = ({navigation}) => {\r\n    const [form,setForm] = React.useState({show:false, date:'YYYY-MM-DD', kg:0});\r\n    const [errors, setErrors] = React.useState({});\r\n    const [show, setShow] = React.useState({pesaje:false,register:false,delete:false});\r\n    const [showPop, setPop] = React.useState({date:false,kg:false});\r\n    const [search, setSearch] = React.useState('');\r\n    const [pesaje, setPesaje] = React.useState({id:0,arete:'N/A',kg:0,date:new Date()});\r\n\r\n    const mt = useSelector((state) => state.mtr.pesajes);\r\n    const pesajes = useSelector((state)=> state.pesajes);\r\n    const bkp = useSelector((state) => state.bkpPesajes);\r\n    const tkn = useSelector(state => state.jwt);\r\n    const dispatch = useDispatch();\r\n    const toast = useToast();\r\n    const filtrar = (search) => {\r\n        var resultado = bkp.filter((pesaje)=>{\r\n            if(pesaje.arete.toString().toLowerCase().includes(search.toString().toLowerCase()))\r\n                return pesaje;\r\n        });\r\n        dispatch(action.setPesajes(resultado));\r\n    }\r\n    const handleSearch = txt => {\r\n        setSearch(txt);\r\n        filtrar(txt);\r\n    }\r\n    const handlePesaje= (item) =>{\r\n        setPesaje(item);\r\n        setShow({...show,pesaje:true});\r\n    }\r\n    const handleRegister = async() =>{\r\n        const nuevo = {arete:form.arete, kg:form.kg,fecha:form.date};\r\n        NetInfo.fetch().then(state => {\r\n            if(state.isConnected){\r\n                action.createPesaje(tkn,nuevo).then(ins =>{\r\n                    setShow({...show,register:false});\r\n                    if(ins == true){\r\n                        toast.show({title:'Exito',status:'success',description:'Pesaje creado'});\r\n                        dispatch(action.getPesajes(tkn));\r\n                    }else\r\n                        toast.show({title:'Error al insertar',status:'error',description:'Intente de nuevo'});\r\n                });\r\n            }else{\r\n                dispatch(action.addTrans({type:'addPesaje',data:nuevo}));\r\n                dispatch(action.addPesaje(nuevo));\r\n            }\r\n        });\r\n    }\r\n    const handleDelete = async(id) =>{ \r\n        NetInfo.fetch().then(state => {\r\n            if(state.isConnected){\r\n                action.deletePesaje(tkn,id).then(del =>{\r\n                    setShow({...show,delete:false});\r\n                    if(del == true){\r\n                        dispatch(action.getPesajes(tkn));\r\n                        setShow({...show,delete:false,pesaje:false});\r\n                        toast.show({title:'Exito',status:'info',description:'Pesaje eliminada'});\r\n                        \r\n                    }else\r\n                        toast.show({title:'Error al eliminar',status:'error',description:'Intente de nuevo'});\r\n                });\r\n            }else{\r\n                dispatch(action.addTrans({type:'delPesaje',data:id}));\r\n                dispatch(action.dropPesaje(id));\r\n            }\r\n        });\r\n    }\r\n   \r\n    return (\r\n        <View>\r\n            <Box>\r\n                <HStack space={2}>\r\n                    <Input onChangeText={handleSearch} value={search}placeholder=\"Buscar\" variant=\"filled\" width=\"80%\" borderRadius=\"10\" borderWidth=\"0\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\r\n                    <IconButton width='15%' colorScheme='rgb(173, 0, 255)' borderRadius=\"xl\" variant=\"solid\"  size=\"lg\"\r\n                        icon={<Icon  as={MaterialCommunityIcons} name=\"plus\"/>}\r\n                        onPress={()=>setShow({...show,register:true})}\r\n                    />\r\n                </HStack>\r\n                <FlatList data={pesajes}  renderItem={({item}) => \r\n                    <Pressable onPress={() => handlePesaje(item)}>\r\n                        <HStack borderBottomWidth=\"1\" space='4' >\r\n                            <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"weight\" width='20%'/>\r\n                            <VStack width=\"65%\">\r\n                                <Heading>{item.arete}</Heading>\r\n                                <Text>{item.kg}</Text>\r\n                            </VStack>\r\n                        </HStack>               \r\n                    </Pressable>\r\n                }\r\n                keyExtractor={item=>item.id}\r\n                />\r\n                <Text>{mt}</Text>             \r\n            </Box>\r\n\r\n            <Modal isOpen={show.register} onClose={()=>setShow({...show,register:false})}>\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header>Nuevo pesaje</Modal.Header>\r\n                    <Modal.Body>\r\n                        <VStack>\r\n                            <FormControl isInvalid={'arete' in errors}>\r\n                                <FormControl.Label>Arete</FormControl.Label>\r\n                                <Input\r\n                                    placeholder='Arete'\r\n                                    onChangeText={(value) => setForm({...form, arete:value})}\r\n                                />\r\n                                {\r\n                                    'arete' in errors ? \r\n                                        <FormControl.ErrorMessage>{errors.arete}</FormControl.ErrorMessage>:\r\n                                            <FormControl.HelperText></FormControl.HelperText>\r\n                                }\r\n                            </FormControl>\r\n\r\n                            <FormControl isInvalid={'kg' in errors}>\r\n                                <FormControl.Label>Peso</FormControl.Label>\r\n                                <Input\r\n                                    placeholder='Peso'\r\n                                    keyboardType='numeric'\r\n                                    onChangeText={(value) => setForm({...form, kg:value})}\r\n                                />\r\n                                {\r\n                                    'arete' in errors ? \r\n                                        <FormControl.ErrorMessage>{errors.kg}</FormControl.ErrorMessage>:\r\n                                            <FormControl.HelperText></FormControl.HelperText>\r\n                                }\r\n                            </FormControl>\r\n\r\n                            <FormControl isInvalid={'fecha' in errors}>\r\n                                <FormControl.Label>Fecha </FormControl.Label>\r\n                                <Pressable  onPress={() => setForm({...form,show:true})}>\r\n                                    <Text fontSize='md'>{form.date}</Text>\r\n                                    <Divider />\r\n                                </Pressable>        \r\n                                {form.show && (\r\n                                    <DateTimePicker\r\n                                        value={new Date()}\r\n                                        mode='date'\r\n                                        display=\"default\"\r\n                                        onChange={(event, selectedDate) => {\r\n                                            const f = selectedDate;\r\n                                            const currentDate = f.getFullYear() + \"-\"+ f.getMonth()+ \"-\" +f.getDate();\r\n                                            setForm({...form,show:false,date:currentDate});\r\n                                           \r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            </FormControl>\r\n                        </VStack>\r\n                    </Modal.Body>\r\n        \r\n                    <Modal.Footer>\r\n                        <Button.Group space={2}>\r\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\r\n                                Cancelar\r\n                            </Button >\r\n                            <Button size='lg' colorScheme='rgb(0, 247, 255)' _text={{color:'white'}} \r\n                                onPress={() => {handleRegister();}}>\r\n                                Crear\r\n                            </Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer> \r\n                </Modal.Content> \r\n            </Modal>\r\n\r\n            <Modal isOpen={show.pesaje} onClose={() => setShow({...show,pesaje:false})} size='full'>\r\n                <Modal.Content >\r\n                    <Modal.CloseButton />\r\n                    <Modal.Header alignSelf=\"center\" _text={{fontSize:'xl',Overridden:'bold'}}>{pesaje.arete}</Modal.Header>\r\n                    <Modal.Body >\r\n                        <VStack >\r\n                            <Text fontSize='2xs'>Peso</Text>\r\n                            <Text fontSize='md'>{pesaje.kg}</Text>\r\n                            <Divider />\r\n                            <Text fontSize='2xs'>Fecha de registro</Text>\r\n                            <Text fontSize='md'>{pesaje.date}</Text>\r\n                            <Divider />\r\n                        </VStack>         \r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button.Group space={2}>\r\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\r\n                                Cancelar\r\n                            </Button >\r\n                            <Button size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}} onPress={() => {setShow({...show,delete:true});\r\n                            }}>\r\n                                Borrar\r\n                            </Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer>\r\n\r\n                    <AlertDialog  isOpen={show.delete} onClose={()=>setShow({...show,delete:false})}>\r\n                        <AlertDialog.Content>\r\n                            <AlertDialog.CloseButton />\r\n                            <AlertDialog.Header>Borrar pesaje</AlertDialog.Header>\r\n                            <AlertDialog.Body>\r\n                                Esto borrar√° todos los datos relacionados con esta pesaje. \r\n                                Esta acci√≥n no es reversible. \r\n                                Los datos borrados no podr√°n ser recuperados.\r\n                                ¬øEst√° seguro de esta acci√≥n?\r\n                            </AlertDialog.Body>\r\n                            <AlertDialog.Footer>\r\n                                <Button.Group space={2}>\r\n                                <Button variant=\"unstyled\" colorScheme=\"coolGray\" onPress={()=>setShow({...show,delete:false})}>\r\n                                    Cancelar\r\n                                </Button>\r\n                                <Button onPress={()=>{handleDelete(pesaje.id)}}  size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}}>\r\n                                    Confirmar \r\n                                </Button>\r\n                                </Button.Group>\r\n                            </AlertDialog.Footer>\r\n                        </AlertDialog.Content>\r\n                    </AlertDialog>\r\n                </Modal.Content>\r\n            </Modal>\r\n        </View>\r\n    );\r\n}\r\n\r\n//Screen Predios\r\n\r\nexport const Predios = ( {navitagion}) => {\r\n    const [form,setForm] = React.useState({agua:1,pasto:1});\r\n    const [errors, setErrors] = React.useState({});\r\n    const [show, setShow] = React.useState({predio:false,register:false,delete:false,animals:false});\r\n    const [showPop, setPop] = React.useState({id:false,name:false,agua:false,pasto:false});\r\n    const [search, setSearch] = React.useState('');\r\n    const [predio, setPredio] = React.useState({id:0,name:'N/A',agua:1,pasto:1});\r\n    const [list, setList] = React.useState([]);\r\n    const mt = useSelector((state) => state.mtr.predios);\r\n    const predios = useSelector((state)=> state.predios);\r\n    const bkp = useSelector((state) => state.bkpPredios);\r\n    const pre_animal = useSelector((state) => state.pre_animal);\r\n    const hato = useSelector(state => state.hato);\r\n    const tkn = useSelector(state => state.jwt);\r\n\r\n    const dispatch = useDispatch();\r\n    const toast = useToast();\r\n\r\n    const filtrar = (search) => {\r\n        var resultado = bkp.filter((predio)=>{\r\n            if(predio.name.toString().toLowerCase().includes(search.toString().toLowerCase()))\r\n                return predio;\r\n        });\r\n        dispatch(action.setPredios(resultado));\r\n    }\r\n    const handleSearch = txt => {\r\n        setSearch(txt);\r\n        filtrar(txt);\r\n    }\r\n    const handlePredio = (item) =>{\r\n        setPredio(item);\r\n        setShow({...show,predio:true});\r\n    }\r\n    const handleAnimals = () => {\r\n        \r\n        var trans = pre_animal.filter((rel)=>{\r\n            if(rel.predio == predio.id)\r\n                return rel;\r\n        });\r\n        \r\n        var rec = trans.filter((tran)=>{\r\n            var ultimo = true;\r\n            var ani = pre_animal.filter((rel)=> {\r\n                if(rel.arete == tran.arete && rel.predio != tran.predio)\r\n                    return true;\r\n            });\r\n            console.log(ani);\r\n            for (i =0; i<=ani.length-1;i++)\r\n                if(new Date(ani[i].date).getDate() > new Date(tran.date).getDate())\r\n                    ultimo = false;\r\n            console.log(ultimo);\r\n            return ultimo\r\n        })\r\n        var lista = hato.filter((animal)=>{\r\n            for(let i=0; i<=rec.length-1; i++){\r\n                if(rec[i].arete == animal.arete)\r\n                    return true;\r\n            }\r\n        });\r\n        if(lista.length > 0){\r\n            setList(lista);\r\n            setShow({...show,animals:true});\r\n        }else\r\n            toast.show({title:'Vacio',description:'No hay animales'});\r\n    } \r\n    const handleRegister = async() =>{\r\n        const nuevo = {name:form.name,agua:form.agua,pasto:form.pasto};\r\n        NetInfo.fetch().then(state => {\r\n            if(state.isConnected){\r\n                action.createPredio(tkn,nuevo).then(ins =>{\r\n                    setShow({...show,register:false});\r\n                    if(ins == true){\r\n                        toast.show({title:'Exito',status:'success',description:'Predio creado'});\r\n                        dispatch(action.getPredios(tkn));\r\n                    }else\r\n                        toast.show({title:'Error al insertar',status:'error',description:'Intente de nuevo'});\r\n                });\r\n            }else{\r\n                dispatch(action.addTrans({type:'addPredio',data:nuevo}));\r\n                dispatch(action.createPredio(nuevo));\r\n            }\r\n        });\r\n    }\r\n    const handleDelete = async(id) =>{ \r\n        NetInfo.fetch().then(state => {\r\n            if(state.isConnected){\r\n                action.deletePredio(tkn,id).then(del =>{\r\n                    setShow({...show,delete:false});\r\n                    if(del == true){\r\n                        dispatch(action.getPredios(tkn));\r\n                        setShow({...show,delete:false,predio:false});\r\n                        toast.show({title:'Exito',status:'info',description:'Predio eliminada'});\r\n                        setAnimal({});\r\n                    }else\r\n                        toast.show({title:'Error al eliminar',status:'error',description:'Intente de nuevo'});\r\n                });\r\n            }else{\r\n                dispatch(action.addTrans({type:'delPredio',data:id}));\r\n                dispatch(action.deletePredio(id));\r\n            }\r\n        });\r\n    }\r\n    const handleUpdate =async(type,date=null) => {\r\n        var word = '';\r\n        switch(type){\r\n            case 'name':\r\n                word =form.name;\r\n                setPredio({...predio,name:word});\r\n                break;\r\n            case 'agua':\r\n                word = form.agua;\r\n                break;\r\n            case 'pasto':\r\n                word = form.pasto;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        var upd = await action.updatePredio(tkn,predio.id,type,word);\r\n        if(upd == true){\r\n            dispatch(action.getPredios(tkn));\r\n            setShow({...show,predio:false});\r\n            toast.show({title:'Actualizacion exitosa',status:'success'});\r\n            \r\n        }else{\r\n            setShow({...show,predio:false});\r\n            toast.show({title:'Error con el servidor',status:'error',description:'Intente de nuevo'});\r\n        }\r\n    }\r\n    return (\r\n        <View>\r\n            <Box>\r\n                <HStack space={2}>\r\n                    <Input onChangeText={handleSearch} value={search}placeholder=\"Buscar\" variant=\"filled\" width=\"80%\" borderRadius=\"10\" borderWidth=\"0\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\r\n                    <IconButton width='15%' colorScheme='rgb(173, 0, 255)' borderRadius=\"xl\" variant=\"solid\"  size=\"lg\"\r\n                        icon={<Icon  as={MaterialCommunityIcons} name=\"plus\"/>}\r\n                        onPress={()=>setShow({...show,register:true})}\r\n                    />\r\n                </HStack>\r\n                <FlatList data={predios}  renderItem={({item}) => \r\n                    <Pressable onPress={() => handlePredio(item)}>\r\n                        <HStack borderBottomWidth=\"1\" space='4' >\r\n                            <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"terrain\" width='20%'/>\r\n                            <VStack width=\"65%\">\r\n                                <Heading>{item.id}</Heading>\r\n                                <Text>{item.name}</Text>\r\n                            </VStack>\r\n                        </HStack>               \r\n                    </Pressable>\r\n                }\r\n                keyExtractor={item=>item.id}\r\n                />\r\n                <Text>{mt}</Text>             \r\n            </Box>\r\n\r\n            <Modal isOpen={show.register} onClose={()=>setShow({...show,register:false})}>\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header>Nuevo predio</Modal.Header>\r\n                    <Modal.Body>\r\n                        <VStack>\r\n                            <FormControl isInvalid={'name' in errors}>\r\n                                <FormControl.Label>Nombre</FormControl.Label>\r\n                                <Input\r\n                                    placeholder='Nombre'\r\n                                    onChangeText={(value) => setForm({...form, name:value})}\r\n                                />\r\n                                {\r\n                                    'name' in errors ? \r\n                                        <FormControl.ErrorMessage>{errors.name}</FormControl.ErrorMessage>:\r\n                                            <FormControl.HelperText></FormControl.HelperText>\r\n                                }\r\n                            </FormControl>\r\n\r\n                        </VStack>\r\n                    </Modal.Body>\r\n        \r\n                    <Modal.Footer>\r\n                        <Button.Group space={2}>\r\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\r\n                                Cancelar\r\n                            </Button >\r\n                            <Button size='lg' colorScheme='rgb(0, 247, 255)' _text={{color:'white'}} \r\n                                onPress={() => {handleRegister();}\r\n                            }>\r\n                                Crear\r\n                            </Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer> \r\n                </Modal.Content> \r\n            </Modal>\r\n\r\n            <Modal isOpen={show.predio} onClose={() => setShow({...show,predio:false})} size='full'>\r\n                <Modal.Content >\r\n                    <Modal.CloseButton />\r\n                    <Modal.Header alignSelf=\"center\" _text={{fontSize:'xl',Overridden:'bold'}}>{predio.id}</Modal.Header>\r\n                    <Modal.Body >\r\n                        <VStack >\r\n                            <Pressable onPress={() => setPop({...showPop,name:true})}>\r\n                                <Text fontSize='2xs'>Nombre</Text>\r\n                                <Text fontSize='md'>{predio.name}</Text>\r\n                                <Divider />\r\n                            </Pressable> \r\n                            <Modal isOpen={showPop.name} onClose={() => setPop({...showPop,name:false})} size='xl'>\r\n                                <Modal.Content >\r\n                                    <Modal.Header alignContent='center'>Actualizar nombre</Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <FormControl>\r\n                                            <Input placeholder='Nuevo nombre' onChangeText={(value)=>{setForm({...form,name:value})}}/>\r\n                                        </FormControl>\r\n                                    </Modal.Body>\r\n                                    <Modal.Footer >\r\n                                        <Button.Group space={2}>\r\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setPop({...showPop,name:false})}> \r\n                                                Cancel\r\n                                            </Button>\r\n                                            <Button colorScheme=\"warning\" onPress={()=> {\r\n                                                handleUpdate('name');\r\n                                                setPop({...showPop,name:false});\r\n                                            }}>Actualizar</Button>\r\n                                        </Button.Group>\r\n                                    </Modal.Footer>\r\n                                </Modal.Content>\r\n                            </Modal>\r\n\r\n                           \r\n                        </VStack>\r\n                        \r\n                        \r\n                        <Button \r\n                            colorScheme='rgb(0, 154, 159)' \r\n                            _text={{color:'white'}} \r\n                            leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"cow\"/>}\r\n                            onPress = {() => handleAnimals()}\r\n                        >\r\n                            Ver Hato\r\n                        </Button>\r\n                            \r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        \r\n                        <Button.Group space={2}>\r\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\r\n                                Cancelar\r\n                            </Button >\r\n                            <Button size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}} onPress={() => {setShow({...show,delete:true});\r\n                            }}>\r\n                                Borrar\r\n                            </Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer>\r\n\r\n                    <AlertDialog  isOpen={show.delete} onClose={()=>setShow({...show,delete:false})}>\r\n                        <AlertDialog.Content>\r\n                            <AlertDialog.CloseButton />\r\n                            <AlertDialog.Header>Borrar predio</AlertDialog.Header>\r\n                            <AlertDialog.Body>\r\n                                Esto borrar√° todos los datos relacionados con este predio. \r\n                                Esta acci√≥n no es reversible. \r\n                                Los datos borrados no podr√°n ser recuperados.\r\n                                ¬øEst√° seguro de esta acci√≥n?\r\n                            </AlertDialog.Body>\r\n                            <AlertDialog.Footer>\r\n                                <Button.Group space={2}>\r\n                                <Button variant=\"unstyled\" colorScheme=\"coolGray\" onPress={()=>setShow({...show,delete:false})}>\r\n                                    Cancelar\r\n                                </Button>\r\n                                <Button onPress={()=>{handleDelete(predio.id);}} size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}}>\r\n                                    Confirmar \r\n                                </Button>\r\n                                </Button.Group>\r\n                            </AlertDialog.Footer>\r\n                        </AlertDialog.Content>\r\n                    </AlertDialog>\r\n\r\n                    <Modal isOpen={show.animals} onClose={() => setShow({...show,animals:false})} size='full'>\r\n                        <Modal.Content>\r\n                            <Modal.CloseButton/>\r\n                            <Modal.Header>Hato en el predio</Modal.Header>\r\n                            <Modal.Body>\r\n                            </Modal.Body>\r\n                            <Modal.Footer>\r\n                                <Button.Group space={2}>\r\n                                    <Button colorScheme='orange'>Eliminar</Button>\r\n                                    <Button >Transferir</Button>\r\n                                </Button.Group>\r\n                            </Modal.Footer>    \r\n                        </Modal.Content>\r\n                    </Modal>\r\n                </Modal.Content>\r\n            </Modal>\r\n            <Modal isOpen={show.animals} onClose={()=>setShow({...show,animals:false})} size='full' >\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header alignContent='center'>Animales</Modal.Header>\r\n                    <Modal.Body>\r\n                        <FlatList data={list}  renderItem={({item}) => \r\n                            <HStack borderBottomWidth=\"1\" space='4' >\r\n                                <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"cow\" width='20%'/>\r\n                                <VStack width=\"65%\">\r\n                                    <Heading>{item.arete}</Heading>\r\n                                    <Text>{item.name}</Text>\r\n                                </VStack> \r\n                            </HStack>               \r\n                        }\r\n                        keyExtractor={item=>item.arete}\r\n                        />\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                                <Button.Group space={2}>\r\n                                    <Button colorScheme='orange'>Eliminar</Button>\r\n                                    <Button >Agregar</Button>\r\n                                </Button.Group>\r\n                            </Modal.Footer>  \r\n                </Modal.Content>\r\n            </Modal>\r\n        </View>\r\n    );\r\n}\r\n\r\n//Screens \"Embarques\"\r\nexport const Embarque = ({navigation}) => {\r\n    const pesajes = useSelector(state => state.pesajes);\r\n    const [hato,setHato] = React.useState([]);\r\n    const [embarque,setEmbarque] = React.useState([]);\r\n    const [vehicles, setVehicles] = React.useState([]);\r\n    const [show, setShow] = React.useState({vehicle:false,solucion:false});\r\n    const [cap, setCap] = React.useState(0);\r\n    const toast = useToast();\r\n    const [solucion,setSolucion] = React.useState([]);\r\n\r\n    const embarcar = (arete,peso) =>{\r\n        if(embarque.length < 1)\r\n            setEmbarque([{id:arete,kg:peso}].concat(embarque));\r\n        else{\r\n            let check = embarque.filter(animal =>{\r\n                if(animal.id == arete)\r\n                    return true\r\n            });\r\n            if(check.length > 0){\r\n                let newEmb = embarque.filter(animal =>{\r\n                    if(animal.id != arete)\r\n                        return true\r\n                });\r\n                setEmbarque(newEmb);\r\n            }else\r\n                setEmbarque([{id:arete,kg:peso}].concat(embarque));\r\n        } \r\n    }\r\n    const addVehicle = (capacidad) =>{\r\n        num = vehicles.length;\r\n        setVehicles([{id:num,kg:parseInt(capacidad)}].concat(vehicles));\r\n        setShow({...show,vehicle:false});\r\n    }\r\n    const delVehicle = (id) => {\r\n        list = vehicles.filter(vehicle =>{\r\n            if(vehicle.id != id)\r\n                return true\r\n        })\r\n        setVehicles(list);\r\n    }\r\n    const filterPesajes = () => {\r\n        let tem = [];\r\n        pesajes.forEach(pesaje => {\r\n            if(tem.length === 0)\r\n                tem.push(pesaje);\r\n            else{\r\n                for(var i = 0; i<=tem.length-1; i++){\r\n                    if(pesaje.arete == tem[i].arete){\r\n                        if(pesaje.date > tem[i].date){\r\n                            tem[i].kg = pesaje.kg;\r\n                            tem[i].date = pesaje.date;\r\n                        }\r\n                    }\r\n                    else if(i == tem.length-1){\r\n                        tem.push({...pesaje,check:false})\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        setHato(tem);\r\n    }\r\n    const getSolucion = async (h,v) => {\r\n        try {\r\n            h_params = '?h='+h.join('&h=')\r\n            v_params = '&v='+v.join('&v=')\r\n            const response = await fetch(\r\n                'http://192.168.1.250:5000/traslado'.concat(h_params,v_params)\r\n                \r\n            );\r\n            const solucion = await response.json();\r\n            if (solucion != false){\r\n                setSolucion([{title:'Vehiculos',data:solucion.vehiculos},{title:'Hato',data:solucion.hato}]);\r\n                setShow({...show,solucion:true});\r\n            }else{\r\n                console.log(solucion);\r\n                toast.show({title:'Error con solucion',status:'warning',description:'Intente de nuevo'});\r\n                return false;\r\n            }\r\n                \r\n        } catch (error) {\r\n            console.log(error);\r\n            toast.show({title:'Error con el servidor',status:'warning'});\r\n            return false;\r\n        }\r\n    };\r\n    const handleOptimizar = () => {\r\n        if(embarque.length < 1)\r\n            toast.show({title:'Hato vacio',status:'error',description:'Agrega ganado al embarque'});\r\n        else\r\n            if(vehicles.length < 1)\r\n                toast.show({title:'No hay vehiculo',status:'error',description:'Agrega transporte al embarque'});\r\n            else{\r\n                let h = [];\r\n                let v = [];\r\n                embarque.forEach(animal =>{\r\n                    h.push(animal.kg);\r\n                });\r\n                vehicles.forEach(vehicle =>{\r\n                    v.push(vehicle.kg);\r\n                });\r\n                getSolucion(h,v);\r\n            }\r\n    }\r\n    React.useEffect(()=>{filterPesajes()},[]);\r\n    return(\r\n        <Box display=\"flex\" flexDirection=\"column\" minH='100%'>\r\n            <Box maxH='40%'>\r\n                <Heading>Hato</Heading>\r\n                <FlatList data={hato}  renderItem={({item}) => \r\n                    <Checkbox value={item.kg} onChange={()=>{embarcar(item.arete,item.kg)}}colorScheme=\"orange\" size=\"md\" icon={<Icon as={<MaterialCommunityIcons name=\"truck\" />} />}>\r\n                        {item.arete}:{item.kg} kg\r\n                    </Checkbox>\r\n                    }\r\n                    keyExtractor={item=>item.id}\r\n                /> \r\n            </Box>\r\n            <Box maxH='40%'>\r\n                <HStack w=\"100%\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                    <Heading>Vehiculos</Heading>\r\n                    <IconButton colorScheme=\"trueGray\" \r\n                        icon={<Icon as={MaterialCommunityIcons} name=\"plus\" size=\"md\" color=\"trueGray.400\" />} \r\n                    onPress={() => setShow({...show,vehicle:true})} \r\n                    />\r\n                </HStack>\r\n        \r\n                <FlatList data={vehicles} inverted={true}  renderItem={({item}) => \r\n                    <HStack w=\"100%\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                        <Text >\r\n                            {item.id+1}: {item.kg} kg\r\n                        </Text>\r\n                        <IconButton colorScheme=\"trueGray\" \r\n                            icon={<Icon as={MaterialCommunityIcons} name=\"minus\" size=\"sm\" color=\"trueGray.400\" />} \r\n                            onPress={() => delVehicle(item.id)} \r\n                        />\r\n                    </HStack>\r\n                    }\r\n                    keyExtractor={item=>item}    \r\n                />     \r\n            </Box>\r\n            <Box>\r\n                <Button onPress={()=> handleOptimizar()}>Optimizar</Button>   \r\n            </Box>\r\n                     \r\n            <Modal size='md' isOpen={show.vehicle} onClose={()=>setShow({...show,vehicle:false})}>\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header>Nuevo vehiculo</Modal.Header>\r\n                    <Modal.Body>\r\n                        <Input\r\n                            placeholder='Capacidad'\r\n                            keyboardType='numeric'\r\n                            onChangeText={(value) => setCap(value)}\r\n                        />\r\n                    </Modal.Body>\r\n        \r\n                    <Modal.Footer>\r\n                        <Button.Group space={2}>\r\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\r\n                                Cancelar\r\n                            </Button >\r\n                            <Button size='lg' colorScheme='rgb(0, 247, 255)' \r\n                                _text={{color:'white'}} \r\n                                onPress={() => {addVehicle(cap)}}s\r\n                            >\r\n                                Agregar\r\n                            </Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer> \r\n                </Modal.Content> \r\n            </Modal>\r\n            <Modal size='md' isOpen={show.solucion} onClose={()=>setShow({...show,solucion:false})}>\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header>Embarque optimizado</Modal.Header>\r\n                    <Modal.Body>\r\n                    <SectionList  sections={solucion} \r\n                        keyExtractor={(item, index) => item + index} \r\n                        renderItem={({ item }) => <Text>{item}</Text>}\r\n                        renderSectionHeader={({ section: { title } }) => (\r\n                            <Heading>{title}</Heading>\r\n                        )}\r\n                    \r\n                    />\r\n                    </Modal.Body>\r\n        \r\n                    <Modal.Footer>\r\n                        <Button size='lg' colorScheme='rgb(0, 247, 255)' \r\n                            _text={{color:'white'}} \r\n                            onPress={() => {setShow({...show,solucion:false})}}\r\n                        >\r\n                            Aceptar\r\n                        </Button>\r\n                    </Modal.Footer> \r\n                </Modal.Content> \r\n            </Modal>\r\n        </Box>\r\n     \r\n           \r\n      \r\n    );\r\n}\r\n\r\n//Screen Configuracion\r\n\r\nexport const Configuracion = ({navigation}) => {\r\n    const tkn = useSelector(state => state.jwt);\r\n    const perfil = useSelector(state => state.perfil);\r\n    const dispatch = useDispatch();\r\n        // user,name,pass,cpass,address, phone.\r\n    const [show, setShow] = React.useState(false);\r\n    const [errors, setError] = React.useState({});\r\n    const [update, setUpdate] = React.useState({});\r\n    const [pass, setPass] = React.useState({show:false});\r\n    const toast = useToast();\r\n    const handleUpdate =async() => {\r\n        if(update.id == 'username')\r\n            toast.show({title:'Imposible actualizar username',status:'error',description:'Ponerse en contacto con el administrador'});\r\n        else{\r\n            var upd = await action.updatePerfil(tkn,{type:update.id,word:update.nValue});\r\n            if(upd == true){\r\n                dispatch(action.getPerfil(tkn));\r\n                if(update.type != 'pass')\r\n                    setShow(false);\r\n                else\r\n                    setPass({...pass,show:false});\r\n                toast.show({title:'Actualizacion exitosa',status:'success'});\r\n                \r\n            }else{\r\n                if(update.type != 'pass')\r\n                    setShow(false);\r\n                else\r\n                    setPass({...pass,show:false});\r\n                toast.show({title:'Error con el servidor',status:'error',description:'Intente de nuevo'});\r\n            }\r\n        }    \r\n    }\r\n    const handleParam = (item) =>{\r\n        setUpdate(item);\r\n        setShow(true);\r\n    }\r\n    const handlePass = () => {\r\n        if(pass.word == pass.cword){\r\n            setUpdate({id:'pass',nValue:pass.word});\r\n            handleUpdate();\r\n        }else\r\n            toast.show({title:'Las contrase√±as no coinciden',status:'error',description:'Intente de nuevo'})\r\n    }\r\n    const closeSession = () => {\r\n        dispatch({type:'@close/session'});\r\n        navigation.navigate('login');\r\n    }\r\n    return (\r\n        <Box >\r\n            <Box bgColor='gray' >\r\n                <Center>\r\n                    <Heading size='lg'>Actualizar perfil</Heading>\r\n                </Center>\r\n            </Box>\r\n            <FlatList\r\n                margin={1}\r\n                data={perfil}\r\n                renderItem={({item}) => (\r\n                    <Pressable onPress={() => handleParam(item)}>\r\n                        <HStack borderBottomWidth=\"1\" space='4' >\r\n                            <VStack width=\"65%\">\r\n                                <Heading>{item.value}</Heading>\r\n                                <Text>{item.id}</Text>\r\n                            </VStack>\r\n                        </HStack>               \r\n                    </Pressable>\r\n                )}\r\n                keyExtractor={(item) => item.id}\r\n            />\r\n            <Divider marginY={2}/>\r\n\r\n            <VStack alignItems='center'  space={1}>\r\n                <Button style='outline' width='95%' colorScheme='purple' onPress={() => setPass({...pass,show:true})}>Cambiar contrase√±a</Button>\r\n                <Button width='95%' onPress={() => closeSession()} colorScheme='orange'>Cerrar sesi√≥n</Button>\r\n                <Divider></Divider>\r\n                <Button width='95%' colorScheme='red'>Eliminar cuenta</Button>\r\n            </VStack>\r\n            <Modal onClose={()=>setShow(false)} isOpen={show} >\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header >Nuevo {update.id}</Modal.Header>\r\n                    <Modal.Body>\r\n                        <FormControl>\r\n                            <Input placeholder={update.value} onChangeText={(value)=>{setUpdate({...update,nValue:value})}}/>\r\n                        </FormControl>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                    <Button.Group space={2}>\r\n                        <Button \r\n                            colorScheme=\"coolGray\" \r\n                            variant=\"ghost\" \r\n                            onPress={()=>setShow(false)}> \r\n                            Cancelar\r\n                        </Button>\r\n                            <Button colorScheme=\"warning\" \r\n                                onPress={()=> {\r\n                                handleUpdate();\r\n                            }}>Actualizar</Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer>\r\n                </Modal.Content>\r\n            </Modal>\r\n            <Modal onClose={()=>setPass({...pass,show:false})} isOpen={pass.show} >\r\n                <Modal.Content>\r\n                    <Modal.CloseButton/>\r\n                    <Modal.Header >Nuevo contrase√±a</Modal.Header>\r\n                    <Modal.Body>\r\n                        <FormControl>\r\n                            <Input placeholder='Nueva contrase√±a' type='password' onChangeText={(value)=>{setPass({...pass,word:value})}}/>\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <Input placeholder='Confirmar contrase√±a' type='password' onChangeText={(value)=>{setPass({...pass,cword:value})}}/>\r\n                        </FormControl>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                    <Button.Group space={2}>\r\n                        <Button \r\n                            colorScheme=\"coolGray\" \r\n                            variant=\"ghost\" \r\n                            onPress={()=>{setPass({...pass,show:false});}}> \r\n                            Cancelar\r\n                        </Button>\r\n                            <Button colorScheme=\"warning\"  onPress={()=>{handlePass();}}>Actualizar</Button>\r\n                        </Button.Group>\r\n                    </Modal.Footer>\r\n                </Modal.Content>\r\n            </Modal>\r\n        </Box>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}