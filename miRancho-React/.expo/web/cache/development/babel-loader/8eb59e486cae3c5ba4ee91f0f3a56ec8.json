{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect } from 'react';\nimport { Button, NativeBaseProvider, Box, Input, FormControl, VStack, Checkbox, Link, Slider, Select, Radio, ScrollView, Divider, Center, Text, FlatList, Heading, Icon, KeyboardAvoidingView, Alert, IconButton, CloseIcon, Collapse, HStack, Modal, useToast, Pressable, View, AlertDialog, Spinner, Spacer } from 'native-base';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { MaterialCommunityIcons, Ionicons } from '@expo/vector-icons';\nimport NetInfo from \"@react-native-community/netinfo\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as action from \"./ranchoActions\";\nimport { set } from 'react-native-reanimated';\nimport { enableScreens } from 'react-native-screens';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar api = 'http://192.168.1.250/request/';\nexport var LogIn = function LogIn(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useDispatch();\n  var session = useSelector(function (state) {\n    return state.jwt;\n  });\n  var toast = useToast();\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cntLogin = _React$useState2[0],\n      setCounter = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      data = _React$useState4[0],\n      setData = _React$useState4[1];\n\n  var _React$useState5 = React.useState({}),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      errors = _React$useState6[0],\n      setError = _React$useState6[1];\n\n  React.useEffect(function () {\n    if (session != false) navigation.navigate('getData');\n  });\n\n  var HandleLogin = function HandleLogin() {\n    if (cntLogin > 10) toast.show({\n      title: 'Intente mas tarde',\n      status: 'error',\n      description: \"Demasiados intentos\"\n    });else NetInfo.fetch().then(function (state) {\n      if (state.isConnected) {\n        setCounter(cntLogin + 1);\n        dispatch(action.getSession(data.user, data.pass)).then(function (s) {\n          if (session === false) toast.show({\n            title: 'Credenciales incorrectas',\n            status: 'warning',\n            description: \"Intente de nuevo\"\n          });\n        });\n      } else toast.show({\n        title: 'No hay conexi√≥n',\n        status: 'warning',\n        description: \"Intente mas tarde\"\n      });\n    });\n  };\n\n  return _jsxs(Box, {\n    justifyContent: \"center\",\n    flex: 1,\n    children: [_jsxs(VStack, {\n      children: [_jsxs(FormControl, {\n        isRequired: true,\n        isInvalid: 'user' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Nombre de Usuario\"\n        }), _jsx(Input, {\n          placeholder: \"Usuario\",\n          onChangeText: function onChangeText(value) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              user: value\n            }));\n          }\n        }), 'user' in errors ? _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.user\n        }) : _jsx(FormControl.HelperText, {\n          _text: {\n            fontSize: 'xs'\n          },\n          children: \"Diferenciar MAYUS de MINUS\"\n        })]\n      }), _jsxs(FormControl, {\n        isRequired: true,\n        isInvalid: 'pass' in errors,\n        children: [_jsx(FormControl.Label, {\n          children: \"Contrase\\xF1a\"\n        }), _jsx(Input, {\n          placeholder: \"Contrase\\xF1a\",\n          type: \"password\",\n          onChangeText: function onChangeText(value) {\n            return setData(_objectSpread(_objectSpread({}, data), {}, {\n              pass: value\n            }));\n          }\n        }), 'pass' in errors ? _jsx(FormControl.ErrorMessage, {\n          _text: {\n            fontSize: 'xs',\n            color: 'error.500',\n            fontWeight: 500\n          },\n          children: errors.pass\n        }) : _jsx(FormControl.HelperText, {\n          _text: {\n            fontSize: 'xs'\n          },\n          children: \"Diferenciar MAYUS de MINUS\"\n        })]\n      })]\n    }), _jsx(Divider, {\n      my: 1\n    }), _jsx(Button, {\n      colorScheme: \"success\",\n      onPress: HandleLogin,\n      size: \"lg\",\n      children: \"Entrar\"\n    }), _jsx(Divider, {\n      my: 3\n    }), _jsx(Button, {\n      size: \"md\",\n      colorScheme: \"teal\",\n      variant: \"outline\",\n      onPress: function onPress() {\n        return navigation.navigate('recPass');\n      },\n      children: \"Olvide mi contrase\\xF1a\"\n    }), _jsx(Divider, {\n      my: 1\n    }), _jsx(Button, {\n      size: \"md\",\n      colorScheme: \"teal\",\n      variant: \"outline\",\n      onPress: function onPress() {\n        return navigation.navigate('singin');\n      },\n      children: \"No tengo cuenta\"\n    })]\n  });\n};\nexport var SingIn = function SingIn(_ref2) {\n  var navigation = _ref2.navigation;\n  var toast = useToast();\n\n  var _React$useState7 = React.useState({}),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      data = _React$useState8[0],\n      setData = _React$useState8[1];\n\n  var _React$useState9 = React.useState({}),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      errors = _React$useState10[0],\n      setError = _React$useState10[1];\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      terms = _React$useState12[0],\n      setTerms = _React$useState12[1];\n\n  var _React$useState13 = React.useState(false),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      showModal = _React$useState14[0],\n      setShow = _React$useState14[1];\n\n  var _React$useState15 = React.useState(''),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      tkn = _React$useState16[0],\n      setTkn = _React$useState16[1];\n\n  var createUser = function createUser() {\n    var response, msj;\n    return _regeneratorRuntime.async(function createUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch('https://turancho.com.mx/request/cUser.php', {\n              method: 'POST',\n              body: JSON.stringify({\n                u: data.user,\n                p: data.pass,\n                n: data.name,\n                a: data.address,\n                m: data.mail\n              })\n            }));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 6:\n            msj = _context.sent;\n            if (msj < 1) navigation.navigate('login');\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", false);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 10]], Promise);\n  };\n\n  var verifyUser = function verifyUser() {\n    var response, responseTxt;\n    return _regeneratorRuntime.async(function verifyUser$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch(api + 'vUser.php?u=' + data.user));\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 6:\n            responseTxt = _context2.sent;\n\n            if (!(responseTxt < 1)) {\n              _context2.next = 13;\n              break;\n            }\n\n            delete errors.user;\n            setError(_objectSpread({}, errors));\n            return _context2.abrupt(\"return\", true);\n\n          case 13:\n            setError(_objectSpread(_objectSpread({}, errors), {}, {\n              user: 'Usuario en uso'\n            }));\n            return _context2.abrupt(\"return\", false);\n\n          case 15:\n            _context2.next = 20;\n            break;\n\n          case 17:\n            _context2.prev = 17;\n            _context2.t0 = _context2[\"catch\"](0);\n            setError(_objectSpread(_objectSpread({}, errors), {}, {\n              user: _context2.t0\n            }));\n\n          case 20:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n\n  var verifyMail = function verifyMail() {\n    var response, responseTxt;\n    return _regeneratorRuntime.async(function verifyMail$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch(api + 'vMail.php?m=' + data.mail));\n\n          case 3:\n            response = _context3.sent;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(response.text());\n\n          case 6:\n            responseTxt = _context3.sent;\n\n            if (!(responseTxt < 1)) {\n              _context3.next = 13;\n              break;\n            }\n\n            delete errors.mail;\n            setError(_objectSpread({}, errors));\n            return _context3.abrupt(\"return\", true);\n\n          case 13:\n            setError(_objectSpread(_objectSpread({}, errors), {}, {\n              mail: 'Correo electr√≥nico en uso'\n            }));\n            return _context3.abrupt(\"return\", false);\n\n          case 15:\n            _context3.next = 20;\n            break;\n\n          case 17:\n            _context3.prev = 17;\n            _context3.t0 = _context3[\"catch\"](0);\n            setError(_objectSpread(_objectSpread({}, errors), {}, {\n              mail: _context3.t0\n            }));\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n\n  function validForm() {\n    if (captcha == '') setError(_objectSpread(_objectSpread({}, errors), {}, {\n      captcha: 'Es un robot?'\n    }));else delete errors.captcha;\n\n    if (data.user === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        user: 'Se necesita usuario'\n      }));\n      return false;\n    } else delete errors.user;\n\n    if (data.pass === undefined || data.cpass === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        pass: 'Se necesita contrase√±a'\n      }));\n      return false;\n    } else delete errors.pass;\n\n    if (data.name === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        name: 'Se necesita el nombre'\n      }));\n      return false;\n    } else delete errors.name;\n\n    if (data.address === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        address: 'Se necesita domicilio'\n      }));\n      return false;\n    } else delete errors.address;\n\n    if (data.mail === undefined) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        mail: 'Se necesita cuenta de correo electr√≥nico'\n      }));\n      return false;\n    } else delete errors.mail;\n\n    if (terms === undefined || terms == false) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        terms: 'Necesitas aceptar los t√©rminos y condiciones de uso'\n      }));\n      return false;\n    } else delete errors.terms;\n\n    if (data.pass != data.cpass) {\n      setError(_objectSpread(_objectSpread({}, errors), {}, {\n        pass: 'Las contrase√±as no coinciden'\n      }));\n      return false;\n    } else delete errors.pass;\n\n    return true;\n  }\n\n  var HandleRegister = function HandleRegister() {\n    return _regeneratorRuntime.async(function HandleRegister$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            NetInfo.fetch().then(function (state) {\n              if (state.isConnected) {\n                verifyUser().then(function (validUser) {\n                  if (validUser) {\n                    verifyMail().then(function (validMail) {\n                      if (validMail) setShow(true);\n                    });\n                  }\n                });\n              } else toast({\n                title: 'No hay conexi√≥n',\n                status: 'warning',\n                description: 'Se necesita conexion'\n              });\n            });\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(KeyboardAvoidingView, {\n    behavior: Platform.OS === \"ios\" ? \"height\" : \"\",\n    keyboardVerticalOffset: 100,\n    children: _jsxs(ScrollView, {\n      children: [_jsx(Box, {\n        justifyContent: \"center\",\n        flex: 1,\n        children: _jsxs(VStack, {\n          children: [_jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'user' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Nombre de Usuario (Se sugiere usar la CURP)\"\n            }), _jsx(Input, {\n              placeholder: \"Usuario\",\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  user: value\n                }));\n              },\n              maxLength: 20\n            }), 'user' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.user\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          }), _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'pass' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Contrase\\xF1a\"\n            }), _jsx(Input, {\n              p: 2,\n              placeholder: \"Contrase\\xF1a\",\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  pass: value\n                }));\n              },\n              type: \"password\"\n            }), _jsx(Input, {\n              p: 2,\n              placeholder: \"Confirmar contrase\\xF1a\",\n              onChangeText: function onChangeText(value) {\n                setData(_objectSpread(_objectSpread({}, data), {}, {\n                  cpass: value\n                }));\n              },\n              type: \"password\"\n            }), 'pass' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.pass\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          }), _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'name' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Nombre Completo\"\n            }), _jsx(Input, {\n              p: 2,\n              placeholder: \"Nombre\",\n              onChangeText: function onChangeText(value) {\n                setData(_objectSpread(_objectSpread({}, data), {}, {\n                  name: value\n                }));\n              }\n            }), 'name' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.name\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Escriba nombre completo\"\n            })]\n          }), _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'address' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Domicilio\"\n            }), _jsx(Input, {\n              p: 2,\n              placeholder: \"Domicilio\",\n              onChangeText: function onChangeText(value) {\n                setData(_objectSpread(_objectSpread({}, data), {}, {\n                  address: value\n                }));\n              }\n            }), 'address' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.address\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Agregue un domicilio\"\n            })]\n          }), _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'mail' in errors,\n            children: [_jsx(FormControl.Label, {\n              children: \"Correo electr\\xF3nico\"\n            }), _jsx(Input, {\n              p: 2,\n              keyboardType: \"email-address\",\n              placeholder: \"Correo\",\n              onChangeText: function onChangeText(value) {\n                return setData(_objectSpread(_objectSpread({}, data), {}, {\n                  mail: value\n                }));\n              }\n            }), 'mail' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.mail\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Diferenciar MAYUS de MINUS\"\n            })]\n          }), _jsxs(FormControl, {\n            isRequired: true,\n            isInvalid: 'terms' in errors,\n            children: [_jsxs(Checkbox, {\n              size: \"md\",\n              onChange: function onChange(value) {\n                return setTerms(value);\n              },\n              children: [\"Aceptar\", _jsx(Link, {\n                onPress: function onPress() {\n                  return navigation.navigate('terms');\n                },\n                children: \"  terminos y condiciones de uso\"\n              })]\n            }), 'terms' in errors ? _jsx(FormControl.ErrorMessage, {\n              _text: {\n                fontSize: 'xs',\n                color: 'error.500',\n                fontWeight: 500\n              },\n              children: errors.terms\n            }) : _jsx(FormControl.HelperText, {\n              _text: {\n                fontSize: 'xs'\n              },\n              children: \"Es necesario aceptar\"\n            })]\n          }), _jsx(Divider, {\n            my: 2\n          }), _jsx(Button, {\n            colorScheme: \"success\",\n            size: \"lg\",\n            onPress: HandleRegister,\n            children: \"Registrar\"\n          })]\n        })\n      }), _jsx(Modal, {\n        isOpen: showModal,\n        onClose: function onClose() {\n          return setShow(false);\n        },\n        children: _jsxs(Modal.Content, {\n          children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n            children: \"Verificar correo electr\\xF3nico\"\n          }), _jsx(Modal.Body, {\n            size: \"full\",\n            children: _jsxs(FormControl, {\n              isRequired: true,\n              isInvalid: 'token' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"C\\xF3digo de verificaci\\xF3n\"\n              }), _jsx(Input, {\n                placeholder: \"Ingresar c\\xF3digo\",\n                onChangeText: function onChangeText(value) {\n                  return setTkn(value);\n                },\n                maxLength: 5\n              }), 'token' in errors ? _jsx(FormControl.ErrorMessage, {\n                _text: {\n                  fontSize: 'xs',\n                  color: 'error.500',\n                  fontWeight: 500\n                },\n                children: errors.token\n              }) : _jsx(FormControl.HelperText, {\n                _text: {\n                  fontSize: 'xs'\n                },\n                children: \"Si no encuentras el correo revisar SPAM\"\n              })]\n            })\n          }), _jsx(Modal.Footer, {\n            children: _jsxs(Button.Group, {\n              space: 2,\n              children: [_jsx(Button, {\n                variant: \"ghost\",\n                colorScheme: \"blueGray\",\n                size: \"md\",\n                onPress: function onPress() {\n                  setShowModal(false);\n                },\n                children: \"Cancelar\"\n              }), _jsx(Button, {\n                onPress: function onPress() {\n                  setShowModal(false);\n                },\n                children: \"Verificar\"\n              })]\n            })\n          })]\n        })\n      })]\n    })\n  });\n};\nexport var Terms = function Terms(_ref3) {\n  var navigation = _ref3.navigation;\n  return _jsx(NativeBaseProvider, {\n    children: _jsx(Box, {\n      children: \"Aqui estan los terminos y condiciones jeje\"\n    })\n  });\n};\nexport var GetRancho = function GetRancho(_ref4) {\n  var navigation = _ref4.navigation;\n  var tkn = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NTAzOTQ0MTgsInVzZXIiOiJwcnVlYmEifQ.E-GqgWjS4L7YpdOXObgySX4XgwFMyxOqtXtEoxKmEGQ';\n\n  var _React$useState17 = React.useState(false),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      show = _React$useState18[0],\n      setShow = _React$useState18[1];\n\n  var dispatch = useDispatch();\n  var errors = useSelector(function (state) {\n    return state.errors;\n  });\n  var toast = useToast();\n\n  var getData = function getData() {\n    NetInfo.fetch().then(function (state) {\n      if (state.isConnected) dispatch(action.getRancho(tkn)).then(function (msj) {\n        if (msj != false) navigation.navigate('rancho');else toast.show({\n          title: 'Error con el servidor',\n          status: 'warning',\n          description: 'Intente de nuevo'\n        });\n      });else setShow(true);\n    });\n  };\n\n  React.useEffect(function () {\n    getData();\n  }, []);\n  return _jsxs(Box, {\n    justifyContent: \"center\",\n    flex: 1,\n    children: [_jsxs(VStack, {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      space: 2,\n      children: [_jsx(Spinner, {\n        color: \"cyan.500\",\n        size: \"lg\"\n      }), _jsx(Heading, {\n        color: \"primary.500\",\n        fontSize: \"md\",\n        children: \"Cargando...\"\n      })]\n    }), _jsx(Modal, {\n      isOpen: show,\n      onClose: function onClose() {\n        setShow(false);\n      },\n      bgColor: \"red.400\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \" No hay conexion!\"\n        }), _jsx(Modal.Body, {\n          children: \"Porfavor intente de nuevo, hubo un problema con la red.\"\n        })]\n      })\n    })]\n  });\n};\nexport var Hato = function Hato(_ref5) {\n  var navigation = _ref5.navigation;\n  var tkn = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NDYzNDYzNjgsInVzZXIiOiJwcnVlYmEifQ.Un0DPMUCQRtmzqIzx7_eUdXU8cPDoyQuQWlumZmyMY4';\n  var hato = useSelector(function (state) {\n    return state.hato;\n  });\n  var bkp = useSelector(function (state) {\n    return state.bkpHato;\n  });\n  var mt = useSelector(function (state) {\n    return state.mtr.hato;\n  });\n  var dispatch = useDispatch();\n\n  var _React$useState19 = React.useState(''),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      search = _React$useState20[0],\n      setSearch = _React$useState20[1];\n\n  var _React$useState21 = React.useState({\n    animal: false,\n    register: false,\n    delete: false,\n    vac: false,\n    pesaje: false,\n    rep: false,\n    san: false\n  }),\n      _React$useState22 = _slicedToArray(_React$useState21, 2),\n      show = _React$useState22[0],\n      setShow = _React$useState22[1];\n\n  var _React$useState23 = React.useState({\n    name: false,\n    nac: false,\n    date: false,\n    sex: false,\n    race: false,\n    color: false,\n    predio: false\n  }),\n      _React$useState24 = _slicedToArray(_React$useState23, 2),\n      showPop = _React$useState24[0],\n      setPop = _React$useState24[1];\n\n  var _React$useState25 = React.useState({\n    name: '',\n    nac: new Date(),\n    sex: 'M',\n    race: '',\n    color: ''\n  }),\n      _React$useState26 = _slicedToArray(_React$useState25, 2),\n      animal = _React$useState26[0],\n      setAnimal = _React$useState26[1];\n\n  var _React$useState27 = React.useState({\n    show: false,\n    nac: 'YYYY-MM-DD'\n  }),\n      _React$useState28 = _slicedToArray(_React$useState27, 2),\n      form = _React$useState28[0],\n      setForm = _React$useState28[1];\n\n  var _React$useState29 = React.useState({}),\n      _React$useState30 = _slicedToArray(_React$useState29, 2),\n      errors = _React$useState30[0],\n      setError = _React$useState30[1];\n\n  var SexIcon = function SexIcon(props) {\n    var sex = props.sex;\n    if (sex == 'M') return _jsx(Icon, {\n      size: \"xl\",\n      as: MaterialCommunityIcons,\n      name: \"gender-male\",\n      color: \"#62A0EA\",\n      width: \"15%\"\n    });else return _jsx(Icon, {\n      size: \"xl\",\n      as: MaterialCommunityIcons,\n      name: \"gender-female\",\n      color: \"#DC8ADD\",\n      width: \"15%\"\n    });\n  };\n\n  var filtrar = function filtrar(search) {\n    var resultado = bkp.filter(function (animal) {\n      if (animal.arete.toString().toLowerCase().includes(search.toString().toLowerCase()) || animal.name.toString().toLowerCase().includes(search.toString().toLocaleLowerCase())) return animal;\n    });\n    dispatch(action.setHato(resultado));\n  };\n\n  var handleSearch = function handleSearch(txt) {\n    setSearch(txt);\n    filtrar(txt);\n  };\n\n  var handleAnimal = function handleAnimal(item) {\n    setAnimal(item);\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      animal: true\n    }));\n  };\n\n  var handleUpdate = function handleUpdate(type) {\n    switch (type) {\n      case 'name':\n        console.log(form.name);\n        break;\n\n      case 'nac':\n        console.log(form.nac.toString());\n        break;\n\n      case 'sex':\n        console.log(form.sex);\n        break;\n\n      case 'race':\n        console.log(form.race);\n        break;\n\n      case 'color':\n        console.log(form.color);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Box, {\n      children: [_jsxs(HStack, {\n        space: 2,\n        children: [_jsx(Input, {\n          onChangeText: handleSearch,\n          value: search,\n          placeholder: \"Buscar\",\n          variant: \"filled\",\n          width: \"80%\",\n          borderRadius: \"10\",\n          borderWidth: \"0\",\n          InputLeftElement: _jsx(Icon, {\n            ml: \"2\",\n            size: \"4\",\n            color: \"gray.400\",\n            as: _jsx(Ionicons, {\n              name: \"ios-search\"\n            })\n          })\n        }), _jsx(IconButton, {\n          width: \"15%\",\n          colorScheme: \"rgb(173, 0, 255)\",\n          borderRadius: \"xl\",\n          variant: \"solid\",\n          size: \"lg\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\"\n          }),\n          onPress: function onPress() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              register: true\n            }));\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: hato,\n        renderItem: function renderItem(_ref6) {\n          var item = _ref6.item;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              return handleAnimal(item);\n            },\n            children: _jsxs(HStack, {\n              borderBottomWidth: \"1\",\n              space: \"4\",\n              children: [_jsx(Icon, {\n                size: \"xl\",\n                as: MaterialCommunityIcons,\n                name: \"cow\",\n                width: \"20%\"\n              }), _jsxs(VStack, {\n                width: \"65%\",\n                children: [_jsx(Heading, {\n                  children: item.arete\n                }), _jsx(Text, {\n                  children: item.name\n                })]\n              }), _jsx(SexIcon, {\n                sex: item.sex\n              })]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.arete;\n        }\n      }), _jsx(Text, {\n        children: mt\n      })]\n    }), _jsx(Modal, {\n      isOpen: show.animal,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          animal: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignSelf: \"center\",\n          _text: {\n            fontSize: 'xl',\n            Overridden: 'bold'\n          },\n          children: animal.arete\n        }), _jsxs(Modal.Body, {\n          children: [_jsxs(VStack, {\n            children: [_jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Nombre\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: animal.name\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.name,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: false\n                }));\n              },\n              size: \"xl\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar nombre\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsx(Input, {\n                      placeholder: \"Nuevo nombre\",\n                      onChangeText: function onChangeText(value) {\n                        setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          name: value\n                        }));\n                      }\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        handleUpdate('name');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  nac: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Nacimiento\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: animal.nac\n              }), _jsx(Divider, {})]\n            }), showPop.nac && _jsx(DateTimePicker, {\n              value: new Date(animal.nac),\n              mode: \"date\",\n              display: \"default\",\n              onChange: function onChange(event, selectedDate) {\n                var f = selectedDate;\n                var currentDate = f.getFullYear() + \"-\" + f.getMonth() + \"-\" + f.getDate();\n                setForm(_objectSpread(_objectSpread({}, form), {}, {\n                  nac: currentDate\n                }));\n                handleUpdate('nac').then(setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  nac: false\n                })));\n              }\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  sex: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Sexo\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: animal.sex\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.sex,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  sex: false\n                }));\n              },\n              size: \"xl\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar sexo\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsxs(Select, {\n                      selectedValue: form.sex,\n                      onValueChange: function onValueChange(itemValue) {\n                        setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          sex: itemValue\n                        }));\n                        handleUpdate('sex');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          sex: false\n                        }));\n                      },\n                      children: [_jsx(Select.Item, {\n                        label: \"Macho\",\n                        value: \"M\"\n                      }), _jsx(Select.Item, {\n                        label: \"Hembra\",\n                        value: \"H\"\n                      })]\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  justifyContent: \"flex-end\",\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          sex: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        return handleUpdate('sex');\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  race: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Raza\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: animal.race\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.race,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  race: false\n                }));\n              },\n              size: \"xl\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar raza\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsx(Input, {\n                      placeholder: \"Nueva raza\",\n                      onChangeText: function onChangeText(value) {\n                        return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          race: value\n                        }));\n                      }\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  justifyContent: \"flex-end\",\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          race: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        handleUpdate('race');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          race: false\n                        }));\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  color: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Color\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: animal.color\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.color,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  color: false\n                }));\n              },\n              size: \"xl\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar color\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsx(Input, {\n                      placeholder: \"Nuevo color\",\n                      onChangeText: function onChangeText(value) {\n                        setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          color: value\n                        }));\n                      }\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  justifyContent: \"flex-end\",\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        handleUpdate('color');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          color: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        handleUpdate('color');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          color: false\n                        }));\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            })]\n          }), _jsxs(Button.Group, {\n            colorScheme: \"info\",\n            my: 2,\n            direction: \"column\",\n            children: [_jsxs(HStack, {\n              space: \"sm\",\n              children: [_jsx(Button, {\n                colorScheme: \"rgb(0, 154, 159)\",\n                _text: {\n                  color: 'white'\n                },\n                leftIcon: _jsx(Icon, {\n                  size: \"md\",\n                  as: MaterialCommunityIcons,\n                  name: \"dna\"\n                }),\n                onPress: function onPress() {\n                  return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    rep: true\n                  }));\n                },\n                children: \"Registros reproductivos\"\n              }), _jsx(Button, {\n                colorScheme: \"rgb(0, 154, 159)\",\n                _text: {\n                  color: 'white'\n                },\n                leftIcon: _jsx(Icon, {\n                  size: \"md\",\n                  as: MaterialCommunityIcons,\n                  name: \"needle\"\n                }),\n                onPress: function onPress() {\n                  return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    vac: true\n                  }));\n                },\n                children: \"Vacunas\"\n              })]\n            }), _jsxs(HStack, {\n              space: \"sm\",\n              children: [_jsx(Button, {\n                width: \"40%\",\n                colorScheme: \"rgb(0, 154, 159)\",\n                _text: {\n                  color: 'white'\n                },\n                leftIcon: _jsx(Icon, {\n                  size: \"md\",\n                  as: MaterialCommunityIcons,\n                  name: \"weight\"\n                }),\n                onPress: function onPress() {\n                  return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    pesaje: true\n                  }));\n                },\n                children: \"Pesajes\"\n              }), _jsx(Button, {\n                colorScheme: \"rgb(0, 154, 159)\",\n                _text: {\n                  color: 'white'\n                },\n                leftIcon: _jsx(Icon, {\n                  size: \"md\",\n                  as: MaterialCommunityIcons,\n                  name: \"virus\"\n                }),\n                onPress: function onPress() {\n                  return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                    san: true\n                  }));\n                },\n                children: \"Controles sanitarios\"\n              })]\n            })]\n          })]\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 3,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(255, 37, 0)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShowDel(true);\n              },\n              children: \"Borrar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"orange\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShowDel(true);\n              },\n              children: \"Transferir\"\n            })]\n          })\n        }), _jsx(AlertDialog, {\n          isOpen: show.delete,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              delete: false\n            }));\n          },\n          children: _jsxs(AlertDialog.Content, {\n            children: [_jsx(AlertDialog.CloseButton, {}), _jsx(AlertDialog.Header, {\n              children: \"Borrar animal\"\n            }), _jsx(AlertDialog.Body, {\n              children: \"Esto borrar\\xE1 todos los datos relacionados con este animal. Esta acci\\xF3n no es reversible. Los datos borrados no podr\\xE1n ser recuperados. \\xBFEst\\xE1 seguro de esta acci\\xF3n?\"\n            }), _jsx(AlertDialog.Footer, {\n              children: _jsxs(Button.Group, {\n                space: 2,\n                children: [_jsx(Button, {\n                  variant: \"unstyled\",\n                  colorScheme: \"coolGray\",\n                  onPress: function onPress() {\n                    return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false\n                    }));\n                  },\n                  children: \"Cancelar\"\n                }), _jsx(Button, {\n                  size: \"lg\",\n                  colorScheme: \"rgb(255, 37, 0)\",\n                  _text: {\n                    color: 'white'\n                  },\n                  children: \"Confirmar\"\n                })]\n              })\n            })]\n          })\n        }), _jsx(Modal, {\n          isOpen: show.vac,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              vac: false\n            }));\n          },\n          size: \"full\",\n          children: _jsxs(Modal.Content, {\n            children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n              children: \"Registros de vacunaci\\xF3n\"\n            }), _jsx(Modal.Body, {}), _jsx(Modal.Footer, {\n              children: _jsx(Button.Group, {\n                space: 2\n              })\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.register,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          register: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Registrar animal\"\n        }), _jsx(Modal.Body, {\n          children: _jsxs(VStack, {\n            children: [_jsxs(FormControl, {\n              isInvalid: 'arete' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Arete\"\n              }), _jsx(Input, {\n                placeholder: \"Arete - ID\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    arete: value\n                  }));\n                }\n              }), 'arete' in errors ? _jsx(FormControl.ErrorMessage, {\n                _text: {\n                  fontSize: 'xs',\n                  color: 'error.500',\n                  fontWeight: 500\n                },\n                children: errors.arete\n              }) : _jsx(FormControl.HelperText, {\n                _text: {\n                  fontSize: 'xs'\n                },\n                children: \"Diferenciar MAYUS de MINUS\"\n              })]\n            }), _jsxs(FormControl, {\n              isInvalid: 'nombre' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Nombre\"\n              }), _jsx(Input, {\n                placeholder: \"Nombre\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    name: value\n                  }));\n                }\n              }), 'nombre' in errors ? _jsx(FormControl.ErrorMessage, {\n                _text: {\n                  fontSize: 'xs',\n                  color: 'error.500',\n                  fontWeight: 500\n                },\n                children: errors.nombre\n              }) : _jsx(FormControl.HelperText, {\n                _text: {\n                  fontSize: 'xs'\n                },\n                children: \"Diferenciar MAYUS de MINUS\"\n              })]\n            }), _jsxs(FormControl, {\n              isInvalid: 'sexo' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Sexo\"\n              }), _jsxs(Radio.Group, {\n                name: \"sexo\",\n                accessibilityLabel: \"sexo\",\n                value: form.sex,\n                onChange: function onChange(nextValue) {\n                  setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    sex: nextValue\n                  }));\n                },\n                children: [_jsx(Radio, {\n                  value: \"M\",\n                  my: 1,\n                  children: \"Masculino\"\n                }), _jsx(Radio, {\n                  value: \"F\",\n                  my: 1,\n                  children: \"Femenino\"\n                })]\n              }), _jsx(FormControl.ErrorMessage, {\n                _text: {\n                  fontSize: 'xs',\n                  color: 'error.500',\n                  fontWeight: 500\n                },\n                children: errors.sexo\n              })]\n            }), _jsxs(FormControl, {\n              isInvalid: 'fecha' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Fecha de nacimiento\"\n              }), _jsx(Pressable, {\n                onPress: function onPress() {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    show: true\n                  }));\n                },\n                children: _jsx(Text, {\n                  children: form.nac\n                })\n              }), form.show && _jsx(DateTimePicker, {\n                value: new Date(),\n                mode: \"date\",\n                display: \"default\",\n                onChange: function onChange(event, selectedDate) {\n                  var f = selectedDate;\n                  var currentDate = f.getFullYear() + \"-\" + (f.getMonth() + 1) + \"-\" + f.getDate();\n                  setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    nac: currentDate,\n                    show: false\n                  }));\n                }\n              }), _jsx(FormControl.ErrorMessage, {\n                children: errors.fecha\n              })]\n            }), _jsxs(FormControl, {\n              isInvalid: 'raza' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Raza\"\n              }), _jsx(Input, {\n                placeholder: \"Raza\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    race: value\n                  }));\n                }\n              }), 'raza' in errors ? _jsx(FormControl.ErrorMessage, {\n                _text: {\n                  fontSize: 'xs',\n                  color: 'error.500',\n                  fontWeight: 500\n                },\n                children: errors.raza\n              }) : _jsx(FormControl.HelperText, {\n                _text: {\n                  fontSize: 'xs'\n                },\n                children: \"Diferenciar MAYUS de MINUS\"\n              })]\n            }), _jsxs(FormControl, {\n              isInvalid: 'color' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Color\"\n              }), _jsx(Input, {\n                placeholder: \"Color\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    color: value\n                  }));\n                }\n              }), 'color' in errors ? _jsx(FormControl.ErrorMessage, {\n                _text: {\n                  fontSize: 'xs',\n                  color: 'error.500',\n                  fontWeight: 500\n                },\n                children: errors.color\n              }) : _jsx(FormControl.HelperText, {\n                _text: {\n                  fontSize: 'xs'\n                },\n                children: \"Diferenciar MAYUS de MINUS\"\n              })]\n            }), _jsxs(FormControl, {\n              isInvalid: 'predio' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Predio\"\n              }), _jsx(Input, {\n                placeholder: \"Predio\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    predio: value\n                  }));\n                }\n              }), 'predio' in errors ? _jsx(FormControl.ErrorMessage, {\n                _text: {\n                  fontSize: 'xs',\n                  color: 'error.500',\n                  fontWeight: 500\n                },\n                children: errors.predio\n              }) : _jsx(FormControl.HelperText, {\n                _text: {\n                  fontSize: 'xs'\n                },\n                children: \"Diferenciar MAYUS de MINUS\"\n              })]\n            })]\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              colorScheme: \"coolGray\",\n              variant: \"ghost\",\n              onPress: function onPress() {\n                return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                  register: false\n                }));\n              },\n              children: \"Cancel\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(0, 247, 255)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                return handleUpdate('name');\n              },\n              children: \"Crear\"\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.rep,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          rep: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Registro reproductivo\"\n        }), _jsx(Modal.Body, {})]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.vac,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          vac: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Vacunas\"\n        }), _jsx(Modal.Body, {})]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.pesaje,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          pesaje: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Pesajes\"\n        }), _jsx(Modal.Body, {})]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.san,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          san: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignContent: \"center\",\n          children: \"Controles sanitarios\"\n        }), _jsx(Modal.Body, {})]\n      })\n    })]\n  });\n};\nexport var Vacunas = function Vacunas(_ref7) {\n  var navigation = _ref7.navigation;\n\n  var _React$useState31 = React.useState({\n    show: false,\n    date: 'YYYY-MM-DD'\n  }),\n      _React$useState32 = _slicedToArray(_React$useState31, 2),\n      form = _React$useState32[0],\n      setForm = _React$useState32[1];\n\n  var _React$useState33 = React.useState({}),\n      _React$useState34 = _slicedToArray(_React$useState33, 2),\n      errors = _React$useState34[0],\n      setErrors = _React$useState34[1];\n\n  var _React$useState35 = React.useState({\n    vacuna: false,\n    register: false,\n    delete: false,\n    animals: false,\n    add: false,\n    rm: false\n  }),\n      _React$useState36 = _slicedToArray(_React$useState35, 2),\n      show = _React$useState36[0],\n      setShow = _React$useState36[1];\n\n  var _React$useState37 = React.useState({\n    id: false,\n    name: false,\n    date: false\n  }),\n      _React$useState38 = _slicedToArray(_React$useState37, 2),\n      showPop = _React$useState38[0],\n      setPop = _React$useState38[1];\n\n  var _React$useState39 = React.useState(''),\n      _React$useState40 = _slicedToArray(_React$useState39, 2),\n      search = _React$useState40[0],\n      setSearch = _React$useState40[1];\n\n  var _React$useState41 = React.useState({\n    id: 0,\n    name: 'N/A',\n    date: new Date()\n  }),\n      _React$useState42 = _slicedToArray(_React$useState41, 2),\n      vacuna = _React$useState42[0],\n      setVacuna = _React$useState42[1];\n\n  var mt = useSelector(function (state) {\n    return state.mtr.vacunas;\n  });\n  var vacunas = useSelector(function (state) {\n    return state.vacunas;\n  });\n  var bkp = useSelector(function (state) {\n    return state.bkpVacunas;\n  });\n  var dispatch = useDispatch();\n\n  var filtrar = function filtrar(search) {\n    var resultado = bkp.filter(function (vacuna) {\n      if (vacuna.name.toString().toLowerCase().includes(search.toString().toLowerCase())) return vacuna;\n    });\n    dispatch(action.setVacunas(resultado));\n  };\n\n  var handleSearch = function handleSearch(txt) {\n    setSearch(txt);\n    filtrar(txt);\n  };\n\n  var handleVacuna = function handleVacuna(item) {\n    setVacuna(item);\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      vacuna: true\n    }));\n  };\n\n  var handleUpdate = function handleUpdate(type) {\n    console.log(type);\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Box, {\n      children: [_jsxs(HStack, {\n        space: 2,\n        children: [_jsx(Input, {\n          onChangeText: handleSearch,\n          value: search,\n          placeholder: \"Buscar\",\n          variant: \"filled\",\n          width: \"80%\",\n          borderRadius: \"10\",\n          borderWidth: \"0\",\n          InputLeftElement: _jsx(Icon, {\n            ml: \"2\",\n            size: \"4\",\n            color: \"gray.400\",\n            as: _jsx(Ionicons, {\n              name: \"ios-search\"\n            })\n          })\n        }), _jsx(IconButton, {\n          width: \"15%\",\n          colorScheme: \"rgb(173, 0, 255)\",\n          borderRadius: \"xl\",\n          variant: \"solid\",\n          size: \"lg\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\"\n          }),\n          onPress: function onPress() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              register: true\n            }));\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: vacunas,\n        renderItem: function renderItem(_ref8) {\n          var item = _ref8.item;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              return handleVacuna(item);\n            },\n            children: _jsxs(HStack, {\n              borderBottomWidth: \"1\",\n              space: \"4\",\n              children: [_jsx(Icon, {\n                size: \"xl\",\n                as: MaterialCommunityIcons,\n                name: \"needle\",\n                width: \"20%\"\n              }), _jsxs(VStack, {\n                width: \"65%\",\n                children: [_jsx(Heading, {\n                  children: item.id\n                }), _jsx(Text, {\n                  children: item.name\n                })]\n              })]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        }\n      }), _jsx(Text, {\n        children: mt\n      })]\n    }), _jsx(Modal, {\n      isOpen: show.register,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          register: false\n        }));\n      },\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Registrar vacuna\"\n        }), _jsx(Modal.Body, {\n          children: _jsxs(VStack, {\n            children: [_jsxs(FormControl, {\n              isInvalid: 'name' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Nombre\"\n              }), _jsx(Input, {\n                placeholder: \"Nombre\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    name: value\n                  }));\n                }\n              }), 'name' in errors ? _jsx(FormControl.ErrorMessage, {\n                children: errors.name\n              }) : _jsx(FormControl.HelperText, {})]\n            }), _jsxs(FormControl, {\n              isInvalid: 'fecha' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Fecha de aplicaci\\xF3n\"\n              }), _jsxs(Pressable, {\n                onPress: function onPress() {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    show: true\n                  }));\n                },\n                children: [_jsx(Text, {\n                  fontSize: \"2xs\",\n                  children: \"Fecha de aplicacion\"\n                }), _jsx(Text, {\n                  fontSize: \"md\",\n                  children: form.date\n                }), _jsx(Divider, {})]\n              }), form.show && _jsx(DateTimePicker, {\n                value: new Date(),\n                mode: \"date\",\n                display: \"default\",\n                onChange: function onChange(event, selectedDate) {\n                  var f = selectedDate;\n                  var currentDate = f.getFullYear() + \"-\" + f.getMonth() + \"-\" + f.getDate();\n                  setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    date: currentDate,\n                    show: false\n                  }));\n                }\n              })]\n            })]\n          })\n        }), _jsx(Modal.Footer, {}), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(0, 247, 255)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShowDel(true);\n              },\n              children: \"Registrar vacuna\"\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.vacuna,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          vacuna: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignSelf: \"center\",\n          _text: {\n            fontSize: 'xl',\n            Overridden: 'bold'\n          },\n          children: vacuna.id\n        }), _jsxs(Modal.Body, {\n          children: [_jsxs(VStack, {\n            children: [_jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Nombre\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: vacuna.name\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.name,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: false\n                }));\n              },\n              size: \"xl\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar nombre\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsx(Input, {\n                      placeholder: \"Nuevo nombre\",\n                      onChangeText: function onChangeText(value) {\n                        setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          name: value\n                        }));\n                      }\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        handleUpdate('name');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  date: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Fecha de aplicacion\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: vacuna.date\n              }), _jsx(Divider, {})]\n            }), showPop.date && _jsx(DateTimePicker, {\n              value: new Date(vacuna.date),\n              mode: \"date\",\n              display: \"default\",\n              onChange: function onChange(event, selectedDate) {\n                var f = selectedDate;\n                var currentDate = f.getFullYear() + \"-\" + f.getMonth() + \"-\" + f.getDate();\n                setForm(_objectSpread(_objectSpread({}, form), {}, {\n                  date: currentDate\n                }));\n                handleUpdate('nac');\n                setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  date: false\n                }));\n              }\n            })]\n          }), _jsx(Button, {\n            colorScheme: \"rgb(0, 154, 159)\",\n            _text: {\n              color: 'white'\n            },\n            leftIcon: _jsx(Icon, {\n              size: \"md\",\n              as: MaterialCommunityIcons,\n              name: \"cow\"\n            }),\n            onPress: function onPress() {\n              return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                animals: true\n              }));\n            },\n            children: \"Hato vacunado\"\n          })]\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(255, 37, 0)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShowDel(true);\n              },\n              children: \"Borrar\"\n            })]\n          })\n        }), _jsx(AlertDialog, {\n          isOpen: show.delete,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              delete: false\n            }));\n          },\n          children: _jsxs(AlertDialog.Content, {\n            children: [_jsx(AlertDialog.CloseButton, {}), _jsx(AlertDialog.Header, {\n              children: \"Borrar animal\"\n            }), _jsx(AlertDialog.Body, {\n              children: \"Esto borrar\\xE1 todos los datos relacionados con este animal. Esta acci\\xF3n no es reversible. Los datos borrados no podr\\xE1n ser recuperados. \\xBFEst\\xE1 seguro de esta acci\\xF3n?\"\n            }), _jsx(AlertDialog.Footer, {\n              children: _jsxs(Button.Group, {\n                space: 2,\n                children: [_jsx(Button, {\n                  variant: \"unstyled\",\n                  colorScheme: \"coolGray\",\n                  onPress: function onPress() {\n                    return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false\n                    }));\n                  },\n                  children: \"Cancelar\"\n                }), _jsx(Button, {\n                  size: \"lg\",\n                  colorScheme: \"rgb(255, 37, 0)\",\n                  _text: {\n                    color: 'white'\n                  },\n                  children: \"Confirmar\"\n                })]\n              })\n            })]\n          })\n        }), _jsx(Modal, {\n          isOpen: show.animals,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              animals: false\n            }));\n          },\n          size: \"full\",\n          children: _jsxs(Modal.Content, {\n            children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n              children: \"Hato vacunado\"\n            }), _jsx(Modal.Body, {}), _jsx(Modal.Footer, {\n              children: _jsxs(Button.Group, {\n                space: 2,\n                children: [_jsx(Button, {\n                  colorScheme: \"orange\",\n                  children: \"Eliminar\"\n                }), _jsx(Button, {\n                  children: \"Agregar\"\n                })]\n              })\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nexport var Sanitarios = function Sanitarios(_ref9) {\n  var navigation = _ref9.navigation;\n\n  var _React$useState43 = React.useState({\n    name: '',\n    date: 'YYYY-MM-DD'\n  }),\n      _React$useState44 = _slicedToArray(_React$useState43, 2),\n      form = _React$useState44[0],\n      setForm = _React$useState44[1];\n\n  var _React$useState45 = React.useState({}),\n      _React$useState46 = _slicedToArray(_React$useState45, 2),\n      errors = _React$useState46[0],\n      setErrors = _React$useState46[1];\n\n  var _React$useState47 = React.useState({\n    sanitario: false,\n    register: false,\n    delete: false,\n    animals: false,\n    add: false,\n    rm: false\n  }),\n      _React$useState48 = _slicedToArray(_React$useState47, 2),\n      show = _React$useState48[0],\n      setShow = _React$useState48[1];\n\n  var _React$useState49 = React.useState({\n    id: false,\n    name: false,\n    date: false\n  }),\n      _React$useState50 = _slicedToArray(_React$useState49, 2),\n      showPop = _React$useState50[0],\n      setPop = _React$useState50[1];\n\n  var _React$useState51 = React.useState(''),\n      _React$useState52 = _slicedToArray(_React$useState51, 2),\n      search = _React$useState52[0],\n      setSearch = _React$useState52[1];\n\n  var _React$useState53 = React.useState({\n    id: 0,\n    name: 'N/A',\n    date: new Date()\n  }),\n      _React$useState54 = _slicedToArray(_React$useState53, 2),\n      sanitario = _React$useState54[0],\n      setSanitario = _React$useState54[1];\n\n  var mt = useSelector(function (state) {\n    return state.mtr.sanitarios;\n  });\n  var sanitarios = useSelector(function (state) {\n    return state.sanitarios;\n  });\n  var bkp = useSelector(function (state) {\n    return state.bkpSanitarios;\n  });\n  var dispatch = useDispatch();\n\n  var filtrar = function filtrar(search) {\n    var resultado = bkp.filter(function (sanitario) {\n      if (sanitario.name.toString().toLowerCase().includes(search.toString().toLowerCase())) return sanitario;\n    });\n    dispatch(action.setSanitarios(resultado));\n  };\n\n  var handleSearch = function handleSearch(txt) {\n    setSearch(txt);\n    filtrar(txt);\n  };\n\n  var handleSanitario = function handleSanitario(item) {\n    setSanitario(item);\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      sanitario: true\n    }));\n  };\n\n  var handleUpdate = function handleUpdate(type) {\n    console.log(type);\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Box, {\n      children: [_jsxs(HStack, {\n        space: 2,\n        children: [_jsx(Input, {\n          onChangeText: handleSearch,\n          value: search,\n          placeholder: \"Buscar\",\n          variant: \"filled\",\n          width: \"80%\",\n          borderRadius: \"10\",\n          borderWidth: \"0\",\n          InputLeftElement: _jsx(Icon, {\n            ml: \"2\",\n            size: \"4\",\n            color: \"gray.400\",\n            as: _jsx(Ionicons, {\n              name: \"ios-search\"\n            })\n          })\n        }), _jsx(IconButton, {\n          width: \"15%\",\n          colorScheme: \"rgb(173, 0, 255)\",\n          borderRadius: \"xl\",\n          variant: \"solid\",\n          size: \"lg\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\"\n          }),\n          onPress: function onPress() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              register: true\n            }));\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: sanitarios,\n        renderItem: function renderItem(_ref10) {\n          var item = _ref10.item;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              return handleSanitario(item);\n            },\n            children: _jsxs(HStack, {\n              borderBottomWidth: \"1\",\n              space: \"4\",\n              children: [_jsx(Icon, {\n                size: \"xl\",\n                as: MaterialCommunityIcons,\n                name: \"virus\",\n                width: \"20%\"\n              }), _jsxs(VStack, {\n                width: \"65%\",\n                children: [_jsx(Heading, {\n                  children: item.id\n                }), _jsx(Text, {\n                  children: item.name\n                })]\n              })]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        }\n      }), _jsx(Text, {\n        children: mt\n      })]\n    }), _jsx(Modal, {\n      isOpen: show.register,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          register: false\n        }));\n      },\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Control sanitario\"\n        }), _jsx(Modal.Body, {\n          children: _jsxs(VStack, {\n            children: [_jsxs(FormControl, {\n              isInvalid: 'name' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Nombre\"\n              }), _jsx(Input, {\n                placeholder: \"Nombre\",\n                onChangeText: function onChangeText(value) {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    name: value\n                  }));\n                }\n              }), 'name' in errors ? _jsx(FormControl.ErrorMessage, {\n                children: errors.name\n              }) : _jsx(FormControl.HelperText, {})]\n            }), _jsxs(FormControl, {\n              isInvalid: 'fecha' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Fecha de aplicaci\\xF3n\"\n              }), _jsxs(Pressable, {\n                onPress: function onPress() {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    show: true\n                  }));\n                },\n                children: [_jsx(Text, {\n                  fontSize: \"2xs\",\n                  children: \"Fecha de aplicacion\"\n                }), _jsx(Text, {\n                  fontSize: \"md\",\n                  children: form.date\n                }), _jsx(Divider, {})]\n              }), form.show && _jsx(DateTimePicker, {\n                value: new Date(),\n                mode: \"date\",\n                display: \"default\",\n                onChange: function onChange(event, selectedDate) {\n                  var f = selectedDate;\n                  var currentDate = f.getFullYear() + \"-\" + f.getMonth() + \"-\" + f.getDate();\n                  setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    show: false,\n                    date: currentDate\n                  }));\n                }\n              })]\n            })]\n          })\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(0, 247, 255)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShowDel(true);\n              },\n              children: \"Crear\"\n            })]\n          })\n        })]\n      })\n    }), _jsx(Modal, {\n      isOpen: show.sanitario,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          sanitario: false\n        }));\n      },\n      size: \"full\",\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          alignSelf: \"center\",\n          _text: {\n            fontSize: 'xl',\n            Overridden: 'bold'\n          },\n          children: sanitario.id\n        }), _jsxs(Modal.Body, {\n          children: [_jsxs(VStack, {\n            children: [_jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Nombre\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: sanitario.name\n              }), _jsx(Divider, {})]\n            }), _jsx(Modal, {\n              isOpen: showPop.name,\n              onClose: function onClose() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  name: false\n                }));\n              },\n              size: \"xl\",\n              children: _jsxs(Modal.Content, {\n                children: [_jsx(Modal.Header, {\n                  alignContent: \"center\",\n                  children: \"Actualizar nombre\"\n                }), _jsx(Modal.Body, {\n                  children: _jsx(FormControl, {\n                    children: _jsx(Input, {\n                      placeholder: \"Nuevo nombre\",\n                      onChangeText: function onChangeText(value) {\n                        setForm(_objectSpread(_objectSpread({}, form), {}, {\n                          name: value\n                        }));\n                      }\n                    })\n                  })\n                }), _jsx(Modal.Footer, {\n                  children: _jsxs(Button.Group, {\n                    space: 2,\n                    children: [_jsx(Button, {\n                      colorScheme: \"coolGray\",\n                      variant: \"ghost\",\n                      onPress: function onPress() {\n                        return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Cancel\"\n                    }), _jsx(Button, {\n                      colorScheme: \"warning\",\n                      onPress: function onPress() {\n                        handleUpdate('name');\n                        setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                          name: false\n                        }));\n                      },\n                      children: \"Actualizar\"\n                    })]\n                  })\n                })]\n              })\n            }), _jsxs(Pressable, {\n              onPress: function onPress() {\n                return setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  date: true\n                }));\n              },\n              children: [_jsx(Text, {\n                fontSize: \"2xs\",\n                children: \"Fecha de aplicacion\"\n              }), _jsx(Text, {\n                fontSize: \"md\",\n                children: sanitario.date\n              }), _jsx(Divider, {})]\n            }), showPop.date && _jsx(DateTimePicker, {\n              value: new Date(sanitario.date),\n              mode: \"date\",\n              display: \"default\",\n              onChange: function onChange(event, selectedDate) {\n                var f = selectedDate;\n                var currentDate = f.getFullYear() + \"-\" + f.getMonth() + \"-\" + f.getDate();\n                setForm(_objectSpread(_objectSpread({}, form), {}, {\n                  date: currentDate\n                }));\n                handleUpdate('nac');\n                setPop(_objectSpread(_objectSpread({}, showPop), {}, {\n                  date: false\n                }));\n              }\n            })]\n          }), _jsx(Button, {\n            colorScheme: \"rgb(0, 154, 159)\",\n            _text: {\n              color: 'white'\n            },\n            leftIcon: _jsx(Icon, {\n              size: \"md\",\n              as: MaterialCommunityIcons,\n              name: \"cow\"\n            }),\n            onPress: function onPress() {\n              return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                animals: true\n              }));\n            },\n            children: \"Hato de control\"\n          })]\n        }), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(255, 37, 0)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShowDel(true);\n              },\n              children: \"Borrar\"\n            })]\n          })\n        }), _jsx(AlertDialog, {\n          isOpen: show.delete,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              delete: false\n            }));\n          },\n          children: _jsxs(AlertDialog.Content, {\n            children: [_jsx(AlertDialog.CloseButton, {}), _jsx(AlertDialog.Header, {\n              children: \"Borrar animal\"\n            }), _jsx(AlertDialog.Body, {\n              children: \"Esto borrar\\xE1 todos los datos relacionados con esta control sanitario. Esta acci\\xF3n no es reversible. Los datos borrados no podr\\xE1n ser recuperados. \\xBFEst\\xE1 seguro de esta acci\\xF3n?\"\n            }), _jsx(AlertDialog.Footer, {\n              children: _jsxs(Button.Group, {\n                space: 2,\n                children: [_jsx(Button, {\n                  variant: \"unstyled\",\n                  colorScheme: \"coolGray\",\n                  onPress: function onPress() {\n                    return setShow(_objectSpread(_objectSpread({}, show), {}, {\n                      delete: false\n                    }));\n                  },\n                  children: \"Cancelar\"\n                }), _jsx(Button, {\n                  size: \"lg\",\n                  colorScheme: \"rgb(255, 37, 0)\",\n                  _text: {\n                    color: 'white'\n                  },\n                  children: \"Confirmar\"\n                })]\n              })\n            })]\n          })\n        }), _jsx(Modal, {\n          isOpen: show.animals,\n          onClose: function onClose() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              animals: false\n            }));\n          },\n          size: \"full\",\n          children: _jsxs(Modal.Content, {\n            children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n              children: \"Hato de control sanitario\"\n            }), _jsx(Modal.Body, {}), _jsx(Modal.Footer, {\n              children: _jsxs(Button.Group, {\n                space: 2,\n                children: [_jsx(Button, {\n                  colorScheme: \"orange\",\n                  children: \"Eliminar\"\n                }), _jsx(Button, {\n                  children: \"Aplicar control\"\n                })]\n              })\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nexport var Embarazos = function Embarazos(_ref11) {\n  var navigation = _ref11.navigation;\n\n  var _React$useState55 = React.useState({\n    show: false,\n    date: 'YYYY-MM-DD'\n  }),\n      _React$useState56 = _slicedToArray(_React$useState55, 2),\n      form = _React$useState56[0],\n      setForm = _React$useState56[1];\n\n  var _React$useState57 = React.useState({}),\n      _React$useState58 = _slicedToArray(_React$useState57, 2),\n      errors = _React$useState58[0],\n      setErrors = _React$useState58[1];\n\n  var _React$useState59 = React.useState({\n    embarazo: false,\n    register: false,\n    delete: false,\n    animals: false\n  }),\n      _React$useState60 = _slicedToArray(_React$useState59, 2),\n      show = _React$useState60[0],\n      setShow = _React$useState60[1];\n\n  var _React$useState61 = React.useState({\n    id: false,\n    name: false,\n    inicio: false,\n    fin: false\n  }),\n      _React$useState62 = _slicedToArray(_React$useState61, 2),\n      showPop = _React$useState62[0],\n      setPop = _React$useState62[1];\n\n  var _React$useState63 = React.useState(''),\n      _React$useState64 = _slicedToArray(_React$useState63, 2),\n      search = _React$useState64[0],\n      setSearch = _React$useState64[1];\n\n  var _React$useState65 = React.useState({\n    id: 0,\n    name: 'N/A',\n    inicio: 'YYYY-MM-DD',\n    fin: 'YYYY-MM-DD'\n  }),\n      _React$useState66 = _slicedToArray(_React$useState65, 2),\n      embarazo = _React$useState66[0],\n      setEmbarazo = _React$useState66[1];\n\n  var mt = useSelector(function (state) {\n    return state.mtr.embarazos;\n  });\n  var embarazos = useSelector(function (state) {\n    return state.embarazos;\n  });\n  var bkp = useSelector(function (state) {\n    return state.bkpEmbarazos;\n  });\n  var dispatch = useDispatch();\n\n  var filtrar = function filtrar(search) {\n    var resultado = bkp.filter(function (embarazo) {\n      if (embarazo.date.toString().toLowerCase().includes(search.toString().toLowerCase())) return embarazo;\n    });\n    dispatch(action.setEmbarazos(resultado));\n  };\n\n  var handleSearch = function handleSearch(txt) {\n    setSearch(txt);\n    filtrar(txt);\n  };\n\n  var handleEmbarazo = function handleEmbarazo(item) {\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      embarazo: true\n    }));\n  };\n\n  var handleUpdate = function handleUpdate(type) {\n    console.log(type);\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Box, {\n      children: [_jsxs(HStack, {\n        space: 2,\n        children: [_jsx(Input, {\n          onChangeText: handleSearch,\n          value: search,\n          placeholder: \"Buscar\",\n          variant: \"filled\",\n          width: \"80%\",\n          borderRadius: \"10\",\n          borderWidth: \"0\",\n          InputLeftElement: _jsx(Icon, {\n            ml: \"2\",\n            size: \"4\",\n            color: \"gray.400\",\n            as: _jsx(Ionicons, {\n              name: \"ios-search\"\n            })\n          })\n        }), _jsx(IconButton, {\n          width: \"15%\",\n          colorScheme: \"rgb(173, 0, 255)\",\n          borderRadius: \"xl\",\n          variant: \"solid\",\n          size: \"lg\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\"\n          }),\n          onPress: function onPress() {\n            return setShow(_objectSpread(_objectSpread({}, show), {}, {\n              register: true\n            }));\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: embarazos,\n        renderItem: function renderItem(_ref12) {\n          var item = _ref12.item;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              return handleEmbarazo(item);\n            },\n            children: _jsxs(HStack, {\n              borderBottomWidth: \"1\",\n              space: \"4\",\n              children: [_jsx(Icon, {\n                size: \"xl\",\n                as: MaterialCommunityIcons,\n                name: \"dna\",\n                width: \"20%\"\n              }), _jsx(VStack, {\n                width: \"65%\",\n                children: _jsx(Heading, {\n                  children: item.id\n                })\n              })]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        }\n      }), _jsx(Text, {\n        children: mt\n      })]\n    }), _jsx(Modal, {\n      isOpen: show.register,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          register: false\n        }));\n      },\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Registrar Embarazo\"\n        }), _jsx(Modal.Body, {\n          children: _jsxs(VStack, {\n            children: [_jsxs(FormControl, {\n              isInvalid: 'name' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Nombre\"\n              }), _jsx(Input, {\n                placeholder: \"Nombre\",\n                onChangeText: function onChangeText(value) {\n                  return setData(_objectSpread(_objectSpread({}, data), {}, {\n                    nombre: value\n                  }));\n                }\n              }), 'name' in errors ? _jsx(FormControl.ErrorMessage, {\n                children: errors.name\n              }) : _jsx(FormControl.HelperText, {})]\n            }), _jsxs(FormControl, {\n              isInvalid: 'fecha' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Fecha de aplicaci\\xF3n\"\n              }), _jsxs(Pressable, {\n                onPress: function onPress() {\n                  return setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    show: true\n                  }));\n                },\n                children: [_jsx(Text, {\n                  fontSize: \"2xs\",\n                  children: \"Fecha de aplicacion\"\n                }), _jsx(Text, {\n                  fontSize: \"md\",\n                  children: form.date\n                }), _jsx(Divider, {})]\n              }), form.show && _jsx(DateTimePicker, {\n                value: new Date(),\n                mode: \"date\",\n                display: \"default\",\n                onChange: function onChange(event, selectedDate) {\n                  var f = selectedDate;\n                  var currentDate = f.getFullYear() + \"-\" + f.getMonth() + \"-\" + f.getDate();\n                  setForm(_objectSpread(_objectSpread({}, form), {}, {\n                    date: currentDate,\n                    show: false\n                  }));\n                }\n              })]\n            })]\n          })\n        }), _jsx(Modal.Footer, {}), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(255, 37, 0)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShowDel(true);\n              },\n              children: \"Borrar\"\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nexport var Pesajes = function Pesajes(_ref13) {\n  var navigation = _ref13.navigation;\n\n  var _React$useState67 = React.useState({}),\n      _React$useState68 = _slicedToArray(_React$useState67, 2),\n      form = _React$useState68[0],\n      setForm = _React$useState68[1];\n\n  var _React$useState69 = React.useState({}),\n      _React$useState70 = _slicedToArray(_React$useState69, 2),\n      errors = _React$useState70[0],\n      setErrors = _React$useState70[1];\n\n  var _React$useState71 = React.useState({\n    pesaje: false,\n    register: false,\n    delete: false\n  }),\n      _React$useState72 = _slicedToArray(_React$useState71, 2),\n      show = _React$useState72[0],\n      setShow = _React$useState72[1];\n\n  var _React$useState73 = React.useState({\n    id: false,\n    name: false,\n    date: false\n  }),\n      _React$useState74 = _slicedToArray(_React$useState73, 2),\n      showPop = _React$useState74[0],\n      setPop = _React$useState74[1];\n\n  var _React$useState75 = React.useState(''),\n      _React$useState76 = _slicedToArray(_React$useState75, 2),\n      search = _React$useState76[0],\n      setSearch = _React$useState76[1];\n\n  var _React$useState77 = React.useState({\n    id: 0,\n    arete: 'N/A',\n    kg: 0,\n    date: new Date()\n  }),\n      _React$useState78 = _slicedToArray(_React$useState77, 2),\n      pesaje = _React$useState78[0],\n      setPesaje = _React$useState78[1];\n\n  var mt = useSelector(function (state) {\n    return state.mtr.pesajes;\n  });\n  var pesajes = useSelector(function (state) {\n    return state.pesajes;\n  });\n  var bkp = useSelector(function (state) {\n    return state.bkpPesajes;\n  });\n  var dispatch = useDispatch();\n\n  var filtrar = function filtrar(search) {\n    var resultado = bkp.filter(function (pesaje) {\n      if (pesaje.arete.toString().toLowerCase().includes(search.toString().toLowerCase())) return pesaje;\n    });\n    dispatch(action.setPesajes(resultado));\n  };\n\n  var handleSearch = function handleSearch(txt) {\n    setSearch(txt);\n    filtrar(txt);\n  };\n\n  var handlePesaje = function handlePesaje(item) {\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      pesaje: true\n    }));\n  };\n\n  var handleUpdate = function handleUpdate(type) {\n    console.log(type);\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Box, {\n      children: [_jsxs(HStack, {\n        space: 2,\n        children: [_jsx(Input, {\n          onChangeText: handleSearch,\n          value: search,\n          placeholder: \"Buscar\",\n          variant: \"filled\",\n          width: \"80%\",\n          borderRadius: \"10\",\n          borderWidth: \"0\",\n          InputLeftElement: _jsx(Icon, {\n            ml: \"2\",\n            size: \"4\",\n            color: \"gray.400\",\n            as: _jsx(Ionicons, {\n              name: \"ios-search\"\n            })\n          })\n        }), _jsx(IconButton, {\n          width: \"15%\",\n          colorScheme: \"rgb(173, 0, 255)\",\n          borderRadius: \"xl\",\n          variant: \"solid\",\n          size: \"lg\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\"\n          }),\n          onPress: function onPress() {\n            return setShowReg(true);\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: pesajes,\n        renderItem: function renderItem(_ref14) {\n          var item = _ref14.item;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              return handlePredio(item);\n            },\n            children: _jsxs(HStack, {\n              borderBottomWidth: \"1\",\n              space: \"4\",\n              children: [_jsx(Icon, {\n                size: \"xl\",\n                as: MaterialCommunityIcons,\n                name: \"weight\",\n                width: \"20%\"\n              }), _jsxs(VStack, {\n                width: \"65%\",\n                children: [_jsx(Heading, {\n                  children: item.arete\n                }), _jsx(Text, {\n                  children: item.kg\n                })]\n              })]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        }\n      }), _jsx(Text, {\n        children: mt\n      })]\n    }), _jsx(Modal, {\n      isOpen: show.register,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          register: false\n        }));\n      },\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Registrar Pesaje\"\n        }), _jsx(Modal.Body, {\n          children: _jsxs(VStack, {\n            children: [_jsxs(FormControl, {\n              isInvalid: 'name' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Nombre\"\n              }), _jsx(Input, {\n                placeholder: \"Nombre\",\n                onChangeText: function onChangeText(value) {\n                  return setData(_objectSpread(_objectSpread({}, data), {}, {\n                    nombre: value\n                  }));\n                }\n              }), 'name' in errors ? _jsx(FormControl.ErrorMessage, {\n                children: errors.name\n              }) : _jsx(FormControl.HelperText, {})]\n            }), _jsx(FormControl, {\n              isInvalid: 'fecha' in errors,\n              children: _jsx(FormControl.Label, {\n                children: \"Fecha de aplicaci\\xF3n\"\n              })\n            })]\n          })\n        }), _jsx(Modal.Footer, {}), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(255, 37, 0)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShowDel(true);\n              },\n              children: \"Borrar\"\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nexport var Predios = function Predios(_ref15) {\n  var navitagion = _ref15.navitagion;\n\n  var _React$useState79 = React.useState({}),\n      _React$useState80 = _slicedToArray(_React$useState79, 2),\n      form = _React$useState80[0],\n      setForm = _React$useState80[1];\n\n  var _React$useState81 = React.useState({}),\n      _React$useState82 = _slicedToArray(_React$useState81, 2),\n      errors = _React$useState82[0],\n      setErrors = _React$useState82[1];\n\n  var _React$useState83 = React.useState({\n    predio: false,\n    register: false,\n    delete: false,\n    animals: false\n  }),\n      _React$useState84 = _slicedToArray(_React$useState83, 2),\n      show = _React$useState84[0],\n      setShow = _React$useState84[1];\n\n  var _React$useState85 = React.useState({\n    id: false,\n    name: false,\n    date: false\n  }),\n      _React$useState86 = _slicedToArray(_React$useState85, 2),\n      showPop = _React$useState86[0],\n      setPop = _React$useState86[1];\n\n  var _React$useState87 = React.useState(''),\n      _React$useState88 = _slicedToArray(_React$useState87, 2),\n      search = _React$useState88[0],\n      setSearch = _React$useState88[1];\n\n  var _React$useState89 = React.useState({\n    id: 0,\n    name: 'N/A',\n    agua: 1,\n    pasto: 1\n  }),\n      _React$useState90 = _slicedToArray(_React$useState89, 2),\n      predio = _React$useState90[0],\n      setPredio = _React$useState90[1];\n\n  var mt = useSelector(function (state) {\n    return state.mtr.predios;\n  });\n  var predios = useSelector(function (state) {\n    return state.predios;\n  });\n  var bkp = useSelector(function (state) {\n    return state.bkpPredios;\n  });\n  var dispatch = useDispatch();\n\n  var filtrar = function filtrar(search) {\n    var resultado = bkp.filter(function (predio) {\n      if (predio.name.toString().toLowerCase().includes(search.toString().toLowerCase())) return predio;\n    });\n    dispatch(action.setPredios(resultado));\n  };\n\n  var handleSearch = function handleSearch(txt) {\n    setSearch(txt);\n    filtrar(txt);\n  };\n\n  var handlePredio = function handlePredio(item) {\n    setShow(_objectSpread(_objectSpread({}, show), {}, {\n      predio: true\n    }));\n  };\n\n  var handleUpdate = function handleUpdate(type) {\n    console.log(type);\n  };\n\n  return _jsxs(View, {\n    children: [_jsxs(Box, {\n      children: [_jsxs(HStack, {\n        space: 2,\n        children: [_jsx(Input, {\n          onChangeText: handleSearch,\n          value: search,\n          placeholder: \"Buscar\",\n          variant: \"filled\",\n          width: \"80%\",\n          borderRadius: \"10\",\n          borderWidth: \"0\",\n          InputLeftElement: _jsx(Icon, {\n            ml: \"2\",\n            size: \"4\",\n            color: \"gray.400\",\n            as: _jsx(Ionicons, {\n              name: \"ios-search\"\n            })\n          })\n        }), _jsx(IconButton, {\n          width: \"15%\",\n          colorScheme: \"rgb(173, 0, 255)\",\n          borderRadius: \"xl\",\n          variant: \"solid\",\n          size: \"lg\",\n          icon: _jsx(Icon, {\n            as: MaterialCommunityIcons,\n            name: \"plus\"\n          }),\n          onPress: function onPress() {\n            return setShowReg(true);\n          }\n        })]\n      }), _jsx(FlatList, {\n        data: predios,\n        renderItem: function renderItem(_ref16) {\n          var item = _ref16.item;\n          return _jsx(Pressable, {\n            onPress: function onPress() {\n              return handlePredio(item);\n            },\n            children: _jsxs(HStack, {\n              borderBottomWidth: \"1\",\n              space: \"4\",\n              children: [_jsx(Icon, {\n                size: \"xl\",\n                as: MaterialCommunityIcons,\n                name: \"terrain\",\n                width: \"20%\"\n              }), _jsxs(VStack, {\n                width: \"65%\",\n                children: [_jsx(Heading, {\n                  children: item.id\n                }), _jsx(Text, {\n                  children: item.name\n                })]\n              })]\n            })\n          });\n        },\n        keyExtractor: function keyExtractor(item) {\n          return item.id;\n        }\n      }), _jsx(Text, {\n        children: mt\n      })]\n    }), _jsx(Modal, {\n      isOpen: show.register,\n      onClose: function onClose() {\n        return setShow(_objectSpread(_objectSpread({}, show), {}, {\n          register: false\n        }));\n      },\n      children: _jsxs(Modal.Content, {\n        children: [_jsx(Modal.CloseButton, {}), _jsx(Modal.Header, {\n          children: \"Registrar Predio\"\n        }), _jsx(Modal.Body, {\n          children: _jsxs(VStack, {\n            children: [_jsxs(FormControl, {\n              isInvalid: 'name' in errors,\n              children: [_jsx(FormControl.Label, {\n                children: \"Nombre\"\n              }), _jsx(Input, {\n                placeholder: \"Nombre\",\n                onChangeText: function onChangeText(value) {\n                  return setData(_objectSpread(_objectSpread({}, data), {}, {\n                    nombre: value\n                  }));\n                }\n              }), 'name' in errors ? _jsx(FormControl.ErrorMessage, {\n                children: errors.name\n              }) : _jsx(FormControl.HelperText, {})]\n            }), _jsx(FormControl, {\n              isInvalid: 'fecha' in errors,\n              children: _jsx(FormControl.Label, {\n                children: \"Fecha de aplicaci\\xF3n\"\n              })\n            })]\n          })\n        }), _jsx(Modal.Footer, {}), _jsx(Modal.Footer, {\n          children: _jsxs(Button.Group, {\n            space: 2,\n            children: [_jsx(Button, {\n              variant: \"ghost\",\n              colorScheme: \"blueGray\",\n              size: \"md\",\n              onPress: function onPress() {\n                setShow(false);\n              },\n              children: \"Cancelar\"\n            }), _jsx(Button, {\n              size: \"lg\",\n              colorScheme: \"rgb(255, 37, 0)\",\n              _text: {\n                color: 'white'\n              },\n              onPress: function onPress() {\n                setShowDel(true);\n              },\n              children: \"Borrar\"\n            })]\n          })\n        })]\n      })\n    })]\n  });\n};\nexport var newEmbarque = function newEmbarque(_ref17) {\n  var navigation = _ref17.navigation;\n\n  var _React$useState91 = React.useState({\n    type: 'pesos',\n    vehicles: 0,\n    units: 0\n  }),\n      _React$useState92 = _slicedToArray(_React$useState91, 2),\n      data = _React$useState92[0],\n      setData = _React$useState92[1];\n\n  var _React$useState93 = React.useState(false),\n      _React$useState94 = _slicedToArray(_React$useState93, 2),\n      getUnits = _React$useState94[0],\n      setUnits = _React$useState94[1];\n\n  var handleCrear = function handleCrear() {\n    switch (data.type) {\n      case 'pesos':\n        navigation.navigate('setEmbarque', {\n          nUnits: data.units,\n          nVehicles: data.vehicles\n        });\n        break;\n\n      case 'nombre':\n        navigation.navigate('setEmbarque', {\n          nUnits: 0,\n          nVehicles: data.vehicles\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return _jsxs(Box, {\n    bg: \"#DEDDDA\",\n    rounded: \"lg\",\n    borderColor: \"#9A9996\",\n    borderWidth: 2,\n    children: [_jsxs(FormControl, {\n      children: [_jsx(FormControl.Label, {\n        children: \"Tipo de embarque\"\n      }), _jsxs(Select, {\n        selectedValue: data.type,\n        mt: 1,\n        onValueChange: function onValueChange(itemValue) {\n          setData(_objectSpread(_objectSpread({}, data), {}, {\n            type: itemValue\n          }));\n          if (itemValue == 'nombre') setUnits(true);else setUnits(false);\n        },\n        children: [_jsx(Select.Item, {\n          label: \"Agregar por nombre\",\n          value: \"nombre\"\n        }), _jsx(Select.Item, {\n          label: \"Agregar pesos\",\n          value: \"pesos\"\n        })]\n      })]\n    }), _jsxs(FormControl, {\n      isDisabled: true,\n      children: [_jsx(FormControl.Label, {\n        children: \"Tama\\xF1o de embarque\"\n      }), _jsxs(Center, {\n        children: [_jsx(Text, {\n          children: data.units\n        }), _jsxs(Slider, {\n          defaultValue: data.units,\n          size: \"sm\",\n          colorScheme: \"white\",\n          maxValue: 500,\n          onChange: function onChange(value) {\n            setData(_objectSpread(_objectSpread({}, data), {}, {\n              units: value\n            }));\n          },\n          width: \"85%\",\n          children: [_jsx(Slider.Track, {\n            bg: \"white\",\n            children: _jsx(Slider.FilledTrack, {\n              bg: \"black\"\n            })\n          }), _jsx(Slider.Thumb, {\n            borderWidth: \"0\",\n            bg: \"transparent\",\n            children: _jsx(Icon, {\n              as: MaterialCommunityIcons,\n              name: \"cow\",\n              color: \"black\",\n              size: \"sm\"\n            })\n          })]\n        })]\n      })]\n    }), _jsxs(FormControl, {\n      children: [_jsx(FormControl.Label, {\n        children: \"N\\xFAmero de vehiculos\"\n      }), _jsxs(Center, {\n        children: [_jsx(Text, {\n          children: data.vehicles\n        }), _jsxs(Slider, {\n          defaultValue: data.units,\n          size: \"sm\",\n          colorScheme: \"white\",\n          maxValue: 50,\n          onChange: function onChange(value) {\n            setData(_objectSpread(_objectSpread({}, data), {}, {\n              vehicles: value\n            }));\n          },\n          width: \"85%\",\n          children: [_jsx(Slider.Track, {\n            bg: \"white\",\n            children: _jsx(Slider.FilledTrack, {\n              bg: \"black\"\n            })\n          }), _jsx(Slider.Thumb, {\n            borderWidth: \"0\",\n            bg: \"transparent\",\n            children: _jsx(Icon, {\n              as: MaterialCommunityIcons,\n              name: \"truck\",\n              color: \"black\",\n              size: \"sm\"\n            })\n          })]\n        })]\n      })]\n    }), _jsx(Divider, {\n      my: 2\n    }), _jsx(Button, {\n      colorScheme: \"success\",\n      onPress: handleCrear,\n      children: \"Crear Embarque\"\n    })]\n  });\n};\nexport var setEmbarque = function setEmbarque(_ref18) {\n  var route = _ref18.route,\n      navigation = _ref18.navigation;\n  var _route$params = route.params,\n      nUnits = _route$params.nUnits,\n      nVehicles = _route$params.nVehicles;\n\n  var _React$useState95 = React.useState(true),\n      _React$useState96 = _slicedToArray(_React$useState95, 2),\n      show = _React$useState96[0],\n      setShow = _React$useState96[1];\n\n  var _React$useState97 = React.useState({\n    vehiclesInputs: []\n  }),\n      _React$useState98 = _slicedToArray(_React$useState97, 2),\n      vehicles = _React$useState98[0],\n      setVehicles = _React$useState98[1];\n\n  var _React$useState99 = React.useState({\n    unitInputs: []\n  }),\n      _React$useState100 = _slicedToArray(_React$useState99, 2),\n      units = _React$useState100[0],\n      setUnits = _React$useState100[1];\n\n  var iUnits = [];\n  var iVehicles = [];\n\n  for (var i = 0; i < nVehicles; i++) {\n    iVehicles.push(i);\n  }\n\n  if (nUnits > 0) {\n    for (var i = 0; i < nUnits; i++) {\n      iUnits.push(i);\n    }\n  } else {}\n\n  var setVehiculsInputs = function setVehiculsInputs(value, index) {\n    var vehiclesInputs = vehicles.vehiclesInputs;\n    vehiclesInputs[index] = value;\n    setVehicles({\n      vehiclesInputs: vehiclesInputs\n    });\n  };\n\n  var setUnitsInputs = function setUnitsInputs(value, index) {\n    var unitInputs = vehicles.unitInputs;\n    unitInputs[index] = value;\n    setUnits({\n      unitInputs: unitInputs\n    });\n  };\n\n  return _jsx(KeyboardAvoidingView, {\n    keyboardVerticalOffset: 100,\n    behavior: Platform.OS === \"ios\" ? \"height\" : \"\",\n    children: _jsxs(Box, {\n      children: [_jsx(Collapse, {\n        isOpen: show,\n        children: _jsx(Alert, {\n          variant: \"outline\",\n          children: _jsxs(HStack, {\n            alignItems: \"center\",\n            children: [_jsx(Text, {\n              fontSize: \"md\",\n              children: \"Utilizar la misma unidad de medida.\"\n            }), _jsx(IconButton, {\n              icon: _jsx(CloseIcon, {\n                size: \"3\",\n                color: \"coolGray.600\"\n              }),\n              onPress: function onPress() {\n                return setShow(false);\n              }\n            })]\n          })\n        })\n      }), _jsxs(Box, {\n        maxH: \"92%\",\n        children: [_jsx(Heading, {\n          children: \"Vehiculos\"\n        }), _jsx(FlatList, {\n          data: iVehicles,\n          renderItem: function renderItem(_ref19) {\n            var item = _ref19.item,\n                index = _ref19.index;\n            return _jsxs(VStack, {\n              children: [_jsx(Text, {\n                children: index + 1\n              }), _jsx(Input, {\n                placeholder: \"Capacidad\",\n                value: vehicles.vehiclesInputs[index],\n                onChangeText: function onChangeText(value) {\n                  setVehiculsInputs(value, index);\n                }\n              })]\n            });\n          },\n          keyExtractor: function keyExtractor(item) {\n            return item;\n          }\n        }), _jsx(Heading, {\n          children: \"Unidades embarcadas\"\n        }), _jsx(FlatList, {\n          data: iUnits,\n          renderItem: function renderItem(_ref20) {\n            var item = _ref20.item,\n                index = _ref20.index;\n            return _jsxs(VStack, {\n              children: [_jsx(Text, {\n                children: index + 1\n              }), _jsx(Input, {\n                placeholder: \"Peso\",\n                value: units.unitInputs[index],\n                onChangeText: function onChangeText(value) {\n                  setUnitsInputs(value, index);\n                }\n              })]\n            });\n          },\n          keyExtractor: function keyExtractor(item) {\n            return item;\n          }\n        })]\n      }), _jsx(Button, {\n        colorScheme: \"success\",\n        children: \"Optimizar embarque\"\n      })]\n    })\n  });\n};\nexport var getEmbarque = function getEmbarque(_ref21) {\n  var navigation = _ref21.navigation;\n};\nexport var setConfig = function setConfig(_ref22) {\n  var route = _ref22.route,\n      navigation = _ref22.navigation;\n  var _route$params2 = route.params,\n      type = _route$params2.type,\n      data = _route$params2.data;\n\n  var _React$useState101 = React.useState({}),\n      _React$useState102 = _slicedToArray(_React$useState101, 2),\n      ndata = _React$useState102[0],\n      setData = _React$useState102[1];\n\n  switch (type) {\n    case 'Usuario':\n      return _jsxs(Box, {\n        children: [_jsxs(FormControl, {\n          children: [_jsx(FormControl.Label, {\n            children: \"Establecer nuevo\"\n          }), _jsx(Input, {\n            placeholder: type,\n            value: ndata,\n            onChangeText: function onChangeText(value) {\n              return setData(value);\n            }\n          })]\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        })]\n      });\n      break;\n\n    case 'Nombre':\n      return _jsxs(Box, {\n        children: [_jsxs(FormControl, {\n          children: [_jsx(FormControl.Label, {\n            children: \"Establecer nuevo\"\n          }), _jsx(Input, {\n            placeholder: type,\n            value: ndata,\n            onChangeText: function onChangeText(value) {\n              return setData(value);\n            }\n          })]\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        })]\n      });\n      break;\n\n    case 'Contrase√±a':\n      var _React$useState103 = React.useState(''),\n          _React$useState104 = _slicedToArray(_React$useState103, 2),\n          cpass = _React$useState104[0],\n          setPass = _React$useState104[1];\n\n      return _jsxs(Box, {\n        children: [_jsxs(FormControl, {\n          children: [_jsx(FormControl.Label, {\n            children: \"Establecer nueva\"\n          }), _jsx(Input, {\n            placeholder: type,\n            type: \"password\",\n            value: ndata,\n            onChangeText: function onChangeText(value) {\n              return setData(value);\n            }\n          }), _jsx(Input, {\n            placeholder: \"Confirmar\",\n            type: \"password\",\n            value: cpass,\n            onChangeText: function onChangeText(value) {\n              return setPass(value);\n            }\n          })]\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        })]\n      });\n      break;\n\n    case 'Direcci√≥n':\n      return _jsxs(Box, {\n        children: [_jsxs(FormControl, {\n          children: [_jsx(FormControl.Label, {\n            children: \"Establecer nueva\"\n          }), _jsx(Input, {\n            placeholder: type,\n            value: ndata,\n            onChangeText: function onChangeText(value) {\n              return setData(value);\n            }\n          })]\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        })]\n      });\n      break;\n\n    case 'Tel√©fono':\n      return _jsxs(Box, {\n        children: [_jsxs(FormControl, {\n          children: [_jsx(FormControl.Label, {\n            children: \"Establecer nuevo\"\n          }), _jsx(Input, {\n            placeholder: type,\n            keyboardType: \"numeric\",\n            value: ndata,\n            onChangeText: function onChangeText(value) {\n              return setData(value);\n            }\n          })]\n        }), _jsx(Button, {\n          colorScheme: \"warning\",\n          children: \"Actualizar\"\n        })]\n      });\n      break;\n  }\n};\nexport var Configuracion = function Configuracion(_ref23) {\n  var navigation = _ref23.navigation;\n  var tkn = useSelector(function (state) {\n    return state.jwt;\n  });\n  var perfil = useSelector(function (state) {\n    return state.perfil;\n  });\n  var dispatch = useDispatch();\n\n  var _React$useState105 = React.useState({}),\n      _React$useState106 = _slicedToArray(_React$useState105, 2),\n      errors = _React$useState106[0],\n      setError = _React$useState106[1];\n\n  var handleParam = function handleParam(type) {};\n\n  return _jsxs(Box, {\n    children: [_jsx(Box, {\n      bgColor: \"#DEDDDA\",\n      children: _jsx(Center, {\n        children: _jsx(Heading, {\n          size: \"sm\",\n          children: \"Actualizar datos\"\n        })\n      })\n    }), _jsx(FlatList, {\n      data: perfil,\n      renderItem: function renderItem(_ref24) {\n        var item = _ref24.item;\n        return _jsx(Pressable, {\n          onPress: function onPress() {\n            return handleParam(item);\n          },\n          children: _jsx(HStack, {\n            borderBottomWidth: \"1\",\n            space: \"4\",\n            children: _jsxs(VStack, {\n              width: \"65%\",\n              children: [_jsx(Heading, {\n                children: item.value\n              }), _jsx(Text, {\n                children: item.id\n              })]\n            })\n          })\n        });\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      }\n    }), _jsx(Button.Group, {\n      space: 2,\n      children: _jsxs(VStack, {\n        width: \"100%\",\n        children: [_jsx(Button, {\n          variant: \"outline\",\n          colorScheme: \"orange\",\n          children: \"Cerrar sesi\\xF3n\"\n        }), _jsx(Button, {\n          variant: \"outline\",\n          colorScheme: \"red\",\n          children: \"Eliminar cuenta\"\n        })]\n      })\n    })]\n  });\n};","map":{"version":3,"sources":["/home/doncrow/miRancho/miRancho-React/screens.js"],"names":["React","useEffect","Button","NativeBaseProvider","Box","Input","FormControl","VStack","Checkbox","Link","Slider","Select","Radio","ScrollView","Divider","Center","Text","FlatList","Heading","Icon","KeyboardAvoidingView","Alert","IconButton","CloseIcon","Collapse","HStack","Modal","useToast","Pressable","View","AlertDialog","Spinner","Spacer","DateTimePicker","MaterialCommunityIcons","Ionicons","NetInfo","ReCAPTCHA","useDispatch","useSelector","action","set","enableScreens","api","LogIn","navigation","dispatch","session","state","jwt","toast","useState","cntLogin","setCounter","data","setData","errors","setError","navigate","HandleLogin","show","title","status","description","fetch","then","isConnected","getSession","user","pass","s","value","fontSize","color","fontWeight","SingIn","terms","setTerms","showModal","setShow","tkn","setTkn","createUser","method","body","JSON","stringify","u","p","n","name","a","address","m","mail","response","text","msj","verifyUser","responseTxt","verifyMail","validForm","captcha","undefined","cpass","HandleRegister","validUser","validMail","Platform","OS","token","setShowModal","Terms","GetRancho","getData","getRancho","Hato","hato","bkp","bkpHato","mt","mtr","search","setSearch","animal","register","delete","vac","pesaje","rep","san","nac","date","sex","race","predio","showPop","setPop","Date","setAnimal","form","setForm","SexIcon","props","filtrar","resultado","filter","arete","toString","toLowerCase","includes","toLocaleLowerCase","setHato","handleSearch","txt","handleAnimal","item","handleUpdate","type","console","log","Overridden","event","selectedDate","f","currentDate","getFullYear","getMonth","getDate","itemValue","setShowDel","nombre","nextValue","sexo","fecha","raza","Vacunas","setErrors","vacuna","animals","add","rm","id","setVacuna","vacunas","bkpVacunas","setVacunas","handleVacuna","Sanitarios","sanitario","setSanitario","sanitarios","bkpSanitarios","setSanitarios","handleSanitario","Embarazos","embarazo","inicio","fin","setEmbarazo","embarazos","bkpEmbarazos","setEmbarazos","handleEmbarazo","Pesajes","kg","setPesaje","pesajes","bkpPesajes","setPesajes","handlePesaje","setShowReg","handlePredio","Predios","navitagion","agua","pasto","setPredio","predios","bkpPredios","setPredios","newEmbarque","vehicles","units","getUnits","setUnits","handleCrear","nUnits","nVehicles","setEmbarque","route","params","vehiclesInputs","setVehicles","unitInputs","iUnits","iVehicles","i","push","setVehiculsInputs","index","setUnitsInputs","getEmbarque","setConfig","ndata","setPass","Configuracion","perfil","handleParam"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { Button, NativeBaseProvider, Box, Input, FormControl, VStack, Checkbox, Link, Slider, Select, Radio, ScrollView, Divider, Center, Text, FlatList,Heading, Icon, KeyboardAvoidingView,Alert, IconButton, CloseIcon, Collapse, HStack, Modal,useToast, Pressable, View, AlertDialog, Spinner, Spacer} from 'native-base';\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { MaterialCommunityIcons, Ionicons } from '@expo/vector-icons';\nimport NetInfo from \"@react-native-community/netinfo\";\nimport { Platform } from 'react-native';\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as action from './ranchoActions';\nimport { set } from 'react-native-reanimated';\nimport { enableScreens } from 'react-native-screens';\n\n// CONSTANTES GLOBALES\nconst api = 'http://192.168.1.250/request/';\n\n///////////////////////////////////////\n  // Screens - Navegacion de Inicio //\n/////////////////////////////////////\n\n//Screen LogIn\nexport const LogIn = ({navigation}) => {\n    const dispatch = useDispatch();\n    const session = useSelector(state => state.jwt);\n    const toast = useToast();\n    \n    const [cntLogin, setCounter] = React.useState(0);\n    const [data, setData] = React.useState({});\n    const [errors, setError] = React.useState({});\n\n    React.useEffect(() => {\n        if(session != false)\n            navigation.navigate('getData');  \n    })\n    const HandleLogin = () => {\n        if(cntLogin > 10)\n            toast.show({ title:'Intente mas tarde',status:'error', description: \"Demasiados intentos\" })\n        else\n            NetInfo.fetch().then(state=>{\n                if(state.isConnected){\n                    setCounter(cntLogin+1);\n                    dispatch(action.getSession(data.user, data.pass)).then(s => {\n                        if(session === false)\n                            toast.show({title:'Credenciales incorrectas',status:'warning', description: \"Intente de nuevo\"})\n                        })\n                }\n                else\n                    toast.show({title:'No hay conexi√≥n',status:'warning', description: \"Intente mas tarde\"})\n            })\n    }\n    return(\n        < Box justifyContent='center'  flex= {1}>\n            <VStack>\n                <FormControl isRequired isInvalid={'user' in errors}>\n                    <FormControl.Label>Nombre de Usuario</FormControl.Label>\n                    <Input \n                        placeholder='Usuario'\n                        onChangeText={(value) => setData({...data, user:value})}\n                    />\n                    {'user' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.user}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl>\n\n                <FormControl isRequired isInvalid={'pass' in errors}>\n                    <FormControl.Label>Contrase√±a</FormControl.Label>\n                    <Input \n                        placeholder='Contrase√±a'\n                        type = 'password'\n                        onChangeText={(value) => setData({...data, pass:value})}\n                    />\n                    {'pass' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.pass}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl>\n            </VStack>\n\n            <Divider my={1}/>\n            <Button colorScheme='success' onPress={HandleLogin} size = 'lg'>Entrar</Button>\n            <Divider my={3}/>\n            <Button size = 'md' colorScheme='teal' variant = 'outline' onPress={() => navigation.navigate('recPass')}>Olvide mi contrase√±a</Button>\n            <Divider my={1}/>\n            <Button size = 'md' colorScheme='teal' variant = 'outline' onPress={() => navigation.navigate('singin')}>No tengo cuenta</Button>  \n        </Box>\n    );\n}\n\n//Screen SignIn\nexport const SingIn = ({navigation}) => {\n    const toast = useToast();\n    const [data, setData] = React.useState({});\n        // user,name,pass,cpass,address, mail, terms.\n    const [errors, setError] = React.useState({});\n    const [terms, setTerms] = React.useState(false);\n    const [showModal, setShow] = React.useState(false);\n    const [tkn, setTkn] = React.useState('');\n\n    const createUser = async () => {\n        try {\n            const response = await fetch(\n                'https://turancho.com.mx/request/cUser.php', \n                {\n                    method: 'POST',\n                    body: JSON.stringify(\n                        {\n                            u:data.user,\n                            p:data.pass,\n                            n:data.name,\n                            a:data.address,\n                            m:data.mail\n                        }\n                    )\n                }\n            );\n            const msj = await response.text();\n            if (msj < 1)\n                navigation.navigate('login');\n                \n        } catch (error) {\n            return false;\n        }\n    };\n    const verifyUser = async () => {\n        try{\n            const response = await fetch(api+'vUser.php?u='+data.user);\n            const responseTxt = await response.text();\n            if(responseTxt < 1){\n                delete errors.user;\n                setError({...errors});\n                return true;\n            }\n            else{\n                setError({...errors, user:'Usuario en uso'});\n                return false;\n            }\n\n        }catch(error){\n            setError({...errors, user:error})\n        }\n    };\n    const verifyMail = async() => {\n        try{\n            const response = await fetch(api+'vMail.php?m='+data.mail);\n            const responseTxt = await response.text();\n            if(responseTxt < 1){\n                delete errors.mail;\n                setError({...errors});\n                return true;\n            }\n            else{\n                setError({...errors, mail:'Correo electr√≥nico en uso'});\n                return false;\n            }\n\n        }catch(error){\n            setError({...errors, mail:error})\n        }\n    };\n    function validForm () {\n        if(captcha == '')\n            setError({...errors,captcha:'Es un robot?'})\n        else\n            delete errors.captcha;    \n        if (data.user === undefined) {\n            setError({...errors, user:'Se necesita usuario'})\n            return false;\n        }else\n            delete errors.user;\n        if (data.pass === undefined|| data.cpass === undefined ) {\n            setError({...errors, pass:'Se necesita contrase√±a'})\n            return false;\n        }else\n            delete errors.pass;\n        if (data.name === undefined) {\n            setError({...errors, name:'Se necesita el nombre'});\n            return false;\n        }else\n            delete errors.name\n        if (data.address === undefined) {\n            setError({...errors, address:'Se necesita domicilio'});\n            return false;\n        }else\n            delete errors.address\n        if (data.mail === undefined) {\n            setError({...errors, mail:'Se necesita cuenta de correo electr√≥nico'});\n            return false;\n        }else\n            delete errors.mail\n        if (terms === undefined || terms == false) {\n            setError({...errors, terms:'Necesitas aceptar los t√©rminos y condiciones de uso'});\n            return false;\n        }else\n            delete errors.terms\n        if (data.pass != data.cpass){\n            setError({...errors, pass:'Las contrase√±as no coinciden'})\n            return false;\n        }else\n            delete errors.pass\n        return true;\n    }\n    const HandleRegister = async() =>{\n            NetInfo.fetch().then(state => {\n                if(state.isConnected){\n                    verifyUser().then( validUser =>{\n                        if (validUser){\n                            verifyMail().then(validMail =>{\n                                if(validMail)\n                                    setShow(true);\n                            });    \n                        }\n                    }); \n                }else\n                    toast({title:'No hay conexi√≥n',status:'warning',description:'Se necesita conexion'});\n              });\n    }\n    return (\n        <KeyboardAvoidingView behavior={Platform.OS === \"ios\" ? \"height\" : \"\"} keyboardVerticalOffset={100} >\n        <ScrollView>\n        <Box justifyContent='center'  flex= {1}>\n            <VStack>\n                <FormControl isRequired isInvalid={'user' in errors}>\n                    <FormControl.Label>Nombre de Usuario (Se sugiere usar la CURP)</FormControl.Label>\n                    <Input \n                        placeholder='Usuario'\n                        onChangeText={(value) => setData({...data, user:value})}\n                        maxLength={20}\n                    />\n                    {'user' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.user}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl>\n\n                <FormControl isRequired isInvalid={'pass' in errors}>\n                    <FormControl.Label>Contrase√±a</FormControl.Label>\n                    <Input \n                        p={2} \n                        placeholder='Contrase√±a'\n                        onChangeText={(value) => setData({...data, pass:value})}\n                        type = 'password'\n                        \n                    />\n                    <Input\n                        p={2}\n                        placeholder='Confirmar contrase√±a'\n                        onChangeText={(value)=> {setData({...data, cpass:value})}}\n                        type = 'password'\n                    />\n                    {'pass' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.pass}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl>\n            \n                <FormControl isRequired isInvalid={'name' in errors}>\n                    <FormControl.Label>Nombre Completo</FormControl.Label>\n                    <Input \n                        p={2} \n                        placeholder='Nombre'\n                        onChangeText={(value) => {setData({...data, name:value})}}\n                    />\n                    {'name' in errors ?\n                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.name}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Escriba nombre completo</FormControl.HelperText>\n                    }\n                </FormControl>\n\n                <FormControl isRequired isInvalid={'address' in errors}>\n                    <FormControl.Label>Domicilio</FormControl.Label>\n                    <Input \n                        p={2} \n                        placeholder='Domicilio'\n                        onChangeText={(value) => {setData( {...data,address:value})}}\n                    />\n\n                    {'address' in errors ?\n                        <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.address}</FormControl.ErrorMessage>:\n                            <FormControl.HelperText _text={{fontSize: 'xs'}}>Agregue un domicilio</FormControl.HelperText>\n                        }\n                </FormControl>\n            \n                <FormControl isRequired isInvalid={'mail' in errors}>\n                    <FormControl.Label>Correo electr√≥nico</FormControl.Label>\n                    <Input \n                        p={2} \n                        keyboardType='email-address'\n                        placeholder='Correo'\n                        onChangeText={(value) => setData( {...data,mail:value})}\n                    />\n                    {'mail' in errors ?\n                        <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.mail}</FormControl.ErrorMessage>:\n                            <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                    }\n                </FormControl>\n\n                <FormControl isRequired isInvalid={'terms' in errors}>\n                    <Checkbox  size = 'md' onChange={(value) => setTerms(value)}>\n                        Aceptar \n                        <Link onPress={()=>navigation.navigate('terms')}>  terminos y condiciones de uso</Link>\n                    </Checkbox>\n                    {'terms' in errors ?\n                        <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.terms}</FormControl.ErrorMessage>:\n                        <FormControl.HelperText _text={{fontSize: 'xs'}}>Es necesario aceptar</FormControl.HelperText>\n                    } \n                </FormControl>\n                <Divider my={2}/>\n                <Button colorScheme='success' size = 'lg' onPress={HandleRegister}>Registrar</Button>\n            </VStack>\n        </Box>\n\n        <Modal isOpen={showModal} onClose={() => setShow(false)}>\n            <Modal.Content>\n                <Modal.CloseButton />\n                <Modal.Header>Verificar correo electr√≥nico</Modal.Header>\n                <Modal.Body size='full'>\n                    <FormControl isRequired isInvalid={'token' in errors}>\n                        <FormControl.Label>C√≥digo de verificaci√≥n</FormControl.Label>\n                        <Input \n                            placeholder='Ingresar c√≥digo'\n                            onChangeText={(value) => setTkn(value)}\n                            maxLength={5}\n                        />\n                        {'token' in errors ?\n                        <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.token}</FormControl.ErrorMessage>:\n                            <FormControl.HelperText _text={{fontSize: 'xs'}}>Si no encuentras el correo revisar SPAM</FormControl.HelperText>\n                        }\n                    </FormControl>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button.Group space={2}>\n                        <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {\n                        setShowModal(false);\n                        }}>\n                            Cancelar\n                        </Button >\n                        <Button onPress={() => {\n                        setShowModal(false);\n                        }}>\n                            Verificar\n                        </Button>\n                    </Button.Group>\n                </Modal.Footer>\n            </Modal.Content>\n        </Modal>\n        </ScrollView>\n        </KeyboardAvoidingView>\n    );\n}\n//Screen Terms\nexport const Terms = ({navigation}) => {\n    return(\n        <NativeBaseProvider>\n            <Box>\n                Aqui estan los terminos y condiciones jeje\n            </Box>\n        </NativeBaseProvider>\n    );\n}\n\n//Screen getData-Rancho\nexport const GetRancho = ({navigation}) => {\n    const tkn = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NTAzOTQ0MTgsInVzZXIiOiJwcnVlYmEifQ.E-GqgWjS4L7YpdOXObgySX4XgwFMyxOqtXtEoxKmEGQ';\n    const [show, setShow] = React.useState(false);\n    const dispatch = useDispatch();\n    const errors = useSelector((state) =>state.errors);\n    const toast = useToast();\n    const getData = () => {\n        NetInfo.fetch().then((state) => { \n            if(state.isConnected)\n                dispatch(action.getRancho(tkn)).then(msj => {\n                    if(msj != false)\n                        navigation.navigate('rancho');\n                    else\n                        toast.show({title:'Error con el servidor',status:'warning' ,description:'Intente de nuevo'});\n                })\n            else\n                setShow(true);\n        })\n    }\n    React.useEffect(() => {getData()},[]);\n        \n    return (\n        <Box justifyContent='center'  flex= {1}>\n            <VStack justifyContent=\"center\" alignItems=\"center\" space={2}>\n                <Spinner color=\"cyan.500\" size='lg' />\n                <Heading color=\"primary.500\" fontSize=\"md\">\n                    Cargando...\n                </Heading>\n            </VStack>\n            \n            <Modal isOpen={show} onClose={()=>{setShow(false)}} bgColor='red.400' >\n                <Modal.Content>\n                    <Modal.CloseButton/>\n                    <Modal.Header> No hay conexion!</Modal.Header>\n                    <Modal.Body>\n                        Porfavor intente de nuevo, hubo un problema con la red.\n                    </Modal.Body>\n                </Modal.Content>\n            </Modal>\n        </Box> \n    );\n}\n\n////////////////////////////////////\n// Screens - Navegacion \"Rancho\" //\n////////////////////////// ///////\n\n//Screen Ganado\n\nexport const Hato = ({navigation}) => {\n    const tkn = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NDYzNDYzNjgsInVzZXIiOiJwcnVlYmEifQ.Un0DPMUCQRtmzqIzx7_eUdXU8cPDoyQuQWlumZmyMY4';\n    // useSelector((state)=>state.jwt);\n    const hato = useSelector((state)=> state.hato);\n    const bkp = useSelector((state) => state.bkpHato);\n    const mt = useSelector((state) => state.mtr.hato);\n    const dispatch = useDispatch();\n    const [search, setSearch] = React.useState('');\n\n    const [show, setShow] = React.useState({animal:false,register:false,delete:false,vac:false,pesaje:false,rep:false,san:false})   \n    const [showPop, setPop] = React.useState({name:false,nac:false,date:false,sex:false,race:false,color:false,predio:false});\n    \n    const [animal, setAnimal] = React.useState({name:'',nac:new Date(),sex:'M',race:'',color:''});\n    const [form, setForm] = React.useState({show:false,nac:'YYYY-MM-DD'});\n    const [errors, setError] = React.useState({});\n\n    const SexIcon = props =>{\n        let { sex } = props;\n        if(sex == 'M')\n            return <Icon size=\"xl\" as={MaterialCommunityIcons} name='gender-male' color='#62A0EA' width='15%'/>\n        else\n            return <Icon size=\"xl\" as={MaterialCommunityIcons} name='gender-female' color='#DC8ADD' width='15%'/>\n    }\n\n    const filtrar = (search) => {\n        var resultado = bkp.filter((animal)=>{\n            if(animal.arete.toString().toLowerCase().includes(search.toString().toLowerCase()) || animal.name.toString().toLowerCase().includes(search.toString().toLocaleLowerCase()))\n                return animal;\n        });\n        dispatch(action.setHato(resultado));\n    }\n    const handleSearch = txt => {\n        setSearch(txt);\n        filtrar(txt);\n    }\n    const handleAnimal = (item) =>{\n        setAnimal(item);\n        setShow({...show,animal:true});\n    }\n    const handleUpdate =(type) => {\n        switch(type){\n            case 'name':\n                console.log(form.name);\n                break;\n            case 'nac':\n                console.log(form.nac.toString());\n                break;\n            case 'sex':\n                console.log(form.sex);\n                break;\n            case 'race':\n                console.log(form.race);\n                break;\n            case 'color':\n                console.log(form.color);\n                break;\n            default:\n                break;\n        }\n    }\n    return(\n        <View>\n            <Box>\n                <HStack space={2}>\n                    <Input onChangeText={handleSearch} value={search}placeholder=\"Buscar\" variant=\"filled\" width=\"80%\" borderRadius=\"10\" borderWidth=\"0\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\n                    <IconButton width='15%' colorScheme='rgb(173, 0, 255)' borderRadius=\"xl\" variant=\"solid\"  size=\"lg\"\n                        icon={<Icon  as={MaterialCommunityIcons} name=\"plus\"/>}\n                        onPress={()=>setShow({...show,register:true})}\n                    />\n                </HStack>\n                <FlatList data={hato}  renderItem={({item}) => \n                    <Pressable onPress={() => handleAnimal(item)}>\n                        <HStack borderBottomWidth=\"1\" space='4' >\n                            <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"cow\" width='20%'/>\n                            <VStack width=\"65%\">\n                                <Heading>{item.arete}</Heading>\n                                <Text>{item.name}</Text>\n                            </VStack>\n                            <SexIcon sex={item.sex}/>\n                        </HStack>               \n                    </Pressable>\n                }\n                keyExtractor={item=>item.arete}\n                />\n                <Text>{mt}</Text>             \n            </Box>\n            \n            <Modal isOpen={show.animal} onClose={() => setShow({...show,animal:false})} size='full'>\n                <Modal.Content >\n                    <Modal.CloseButton />\n                    <Modal.Header alignSelf=\"center\" _text={{fontSize:'xl',Overridden:'bold'}}>{animal.arete}</Modal.Header>\n                    <Modal.Body >\n                        <VStack >\n                            <Pressable onPress={() => setPop({...showPop,name:true})}>\n                                <Text fontSize='2xs'>Nombre</Text>\n                                <Text fontSize='md'>{animal.name}</Text>\n                                <Divider />\n                            </Pressable> \n                            <Modal isOpen={showPop.name} onClose={() => setPop({...showPop,name:false})} size='xl'>\n                                <Modal.Content >\n                                    <Modal.Header alignContent='center'>Actualizar nombre</Modal.Header>\n                                    <Modal.Body>\n                                        <FormControl>\n                                            <Input placeholder='Nuevo nombre' onChangeText={(value)=>{setForm({...form,name:value})}}/>\n                                        </FormControl>\n                                    </Modal.Body>\n                                    <Modal.Footer >\n                                        <Button.Group space={2}>\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setPop({...showPop,name:false})}> \n                                                Cancel\n                                            </Button>\n                                            <Button colorScheme=\"warning\" onPress={()=> {\n                                                handleUpdate('name');\n                                                setPop({...showPop,name:false});\n                                            }}>Actualizar</Button>\n                                        </Button.Group>\n                                    </Modal.Footer>\n                                </Modal.Content>\n                            </Modal>\n\n                            <Pressable  onPress={() => setPop({...showPop,nac:true})}>\n                                <Text fontSize='2xs'>Nacimiento</Text>\n                                <Text fontSize='md'>{animal.nac}</Text>\n                                <Divider />\n                            </Pressable>        \n                            {showPop.nac && (\n                                <DateTimePicker\n                                    value={new Date(animal.nac)}\n                                    mode='date'\n                                    display=\"default\"\n                                    onChange={(event, selectedDate) => {\n                                        const f = selectedDate;\n                                        const currentDate = f.getFullYear() + \"-\"+ f.getMonth()+ \"-\" +f.getDate();\n                                        setForm({...form,nac:currentDate});\n                                        handleUpdate('nac').then(setPop({...showPop,nac:false}));\n                                    }}\n                                />\n                            )}\n                                   \n                            <Pressable  onPress={() => setPop({...showPop,sex:true})}>\n                                <Text fontSize='2xs'>Sexo</Text>\n                                <Text fontSize='md'>{animal.sex}</Text>\n                                <Divider />\n                            </Pressable>    \n                            <Modal isOpen={showPop.sex} onClose={() => setPop({...showPop,sex:false})} size='xl'>                    \n                                <Modal.Content >\n                                    <Modal.Header alignContent='center'>Actualizar sexo</Modal.Header>\n                                    <Modal.Body>\n                                        <FormControl>\n                                            <Select\n                                                selectedValue={form.sex}\n                                                onValueChange={(itemValue) => {\n                                                    setForm({...form, sex:itemValue});\n                                                    handleUpdate('sex');\n                                                    (setPop({...showPop,sex:false}));\n                                                }}\n                                                \n                                            >\n                                                <Select.Item label=\"Macho\" value=\"M\" />\n                                                <Select.Item label=\"Hembra\" value=\"H\" />\n                                            </Select>\n                                        </FormControl>\n                                    </Modal.Body>\n                                    <Modal.Footer justifyContent=\"flex-end\">\n                                        <Button.Group space={2}>\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setPop({...showPop,sex:false})}> \n                                                Cancel\n                                            </Button>\n                                            <Button colorScheme=\"warning\" onPress={()=>handleUpdate('sex')}>Actualizar</Button>\n                                        </Button.Group>\n                                    </Modal.Footer>\n                                </Modal.Content>\n                            </Modal>\n\n                            <Pressable onPress={() => setPop({...showPop,race:true})}>\n                                <Text fontSize='2xs'>Raza</Text>\n                                <Text fontSize='md'>{animal.race}</Text>\n                                <Divider />\n                            </Pressable>    \n                            <Modal isOpen={showPop.race} onClose={() => setPop({...showPop,race:false})} size='xl'>\n                                <Modal.Content >\n                                    <Modal.Header alignContent='center'>Actualizar raza</Modal.Header>\n                                    <Modal.Body>\n                                        <FormControl>\n                                            <Input placeholder='Nueva raza' onChangeText={(value)=>setForm({...form,race:value})}/>\n                                        </FormControl>\n                                    </Modal.Body>\n                                    <Modal.Footer justifyContent=\"flex-end\">\n                                        <Button.Group space={2}>\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setPop({...showPop,race:false})}> \n                                                Cancel\n                                            </Button>\n                                            <Button colorScheme=\"warning\" onPress={()=>{\n                                                handleUpdate('race');\n                                                setPop({...showPop,race:false});\n                                            }}>Actualizar</Button>\n                                        </Button.Group>\n                                    </Modal.Footer>\n                                </Modal.Content>\n                            </Modal>\n                            \n                            <Pressable onPress={() => setPop({...showPop,color:true})}>\n                                <Text fontSize='2xs'>Color</Text>\n                                <Text fontSize='md'>{animal.color}</Text>\n                                <Divider />\n                            </Pressable>    \n                            <Modal isOpen={showPop.color} onClose={() => setPop({...showPop,color:false})} size='xl'>\n                                <Modal.Content>\n                                    <Modal.Header alignContent='center'>Actualizar color</Modal.Header>\n                                    <Modal.Body>\n                                        <FormControl>\n                                            <Input placeholder='Nuevo color' onChangeText={(value)=>{setForm({...form,color:value})}}/>\n                                        </FormControl>\n                                    </Modal.Body>\n                                    <Modal.Footer justifyContent=\"flex-end\">\n                                        <Button.Group space={2}>\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=> {\n                                                handleUpdate('color');\n                                                setPop({...showPop,color:false});\n                                            }}> \n                                                Cancel\n                                            </Button>\n                                            <Button colorScheme=\"warning\" onPress={()=>{\n                                                handleUpdate('color');\n                                                setPop({...showPop,color:false});\n                                            }}>Actualizar</Button>\n                                        </Button.Group>\n                                    </Modal.Footer>\n                                </Modal.Content>\n                            </Modal>                            \n                        </VStack>\n                        \n                        <Button.Group colorScheme=\"info\" my ={2} direction='column'>\n                            <HStack space='sm'>\n                                <Button \n                                    colorScheme='rgb(0, 154, 159)' \n                                    _text={{color:'white'}} \n                                    leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"dna\"/>}\n                                    onPress = {() => setShow({...show,rep:true})}\n                                >\n                                    Registros reproductivos\n                                </Button>\n                                <Button \n                                    colorScheme='rgb(0, 154, 159)' \n                                    _text={{color:'white'}} \n                                    leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"needle\"/>}\n                                    onPress = {() => setShow({...show,vac:true})}\n                                >\n                                    Vacunas\n                                </Button>\n                            </HStack>\n                            <HStack space='sm'>\n                                <Button width='40%'\n                                    colorScheme='rgb(0, 154, 159)' \n                                    _text={{color:'white'}} \n                                    leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"weight\"/>}\n                                    onPress = {() => setShow({...show,pesaje:true})}\n                                >\n                                    Pesajes\n                                </Button>\n                                <Button \n                                    colorScheme='rgb(0, 154, 159)' \n                                    _text={{color:'white'}} \n                                    leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"virus\"/>}\n                                    onPress = {() => setShow({...show,san:true})}\n                                >\n                                    Controles sanitarios\n                                </Button>\n                            </HStack>\n                        </Button.Group>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        \n                        <Button.Group space={3}>\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\n                                Cancelar\n                            </Button >\n                            <Button size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}} onPress={() => {setShowDel(true);\n                            }}>\n                                Borrar\n                            </Button>\n                            <Button size='lg' colorScheme='orange' _text={{color:'white'}} onPress={() => {setShowDel(true);\n                            }}>\n                                Transferir\n                            </Button>\n                        </Button.Group>\n                    </Modal.Footer>\n\n                    <AlertDialog  isOpen={show.delete} onClose={()=>setShow({...show,delete:false})}>\n                        <AlertDialog.Content>\n                            <AlertDialog.CloseButton />\n                            <AlertDialog.Header>Borrar animal</AlertDialog.Header>\n                            <AlertDialog.Body>\n                                Esto borrar√° todos los datos relacionados con este animal. \n                                Esta acci√≥n no es reversible. \n                                Los datos borrados no podr√°n ser recuperados.\n                                ¬øEst√° seguro de esta acci√≥n?\n                            </AlertDialog.Body>\n                            <AlertDialog.Footer>\n                                <Button.Group space={2}>\n                                <Button variant=\"unstyled\" colorScheme=\"coolGray\" onPress={()=>setShow({...show,delete:false})}>\n                                    Cancelar\n                                </Button>\n                                <Button  size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}}>\n                                    Confirmar \n                                </Button>\n                                </Button.Group>\n                            </AlertDialog.Footer>\n                        </AlertDialog.Content>\n                    </AlertDialog>\n\n                    <Modal isOpen={show.vac} onClose={() => setShow({...show,vac:false})} size='full'>\n                        <Modal.Content>\n                            <Modal.CloseButton/>\n                            <Modal.Header>Registros de vacunaci√≥n</Modal.Header>\n                            <Modal.Body>\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Button.Group space={2}>\n\n                                </Button.Group>\n                            </Modal.Footer>    \n                        </Modal.Content>\n                    </Modal>\n                </Modal.Content>\n            </Modal>\n\n            <Modal isOpen={show.register} onClose={()=>setShow({...show,register:false})} size='full' >\n                <Modal.Content>\n                    <Modal.CloseButton/>\n                    <Modal.Header alignContent='center'>Registrar animal</Modal.Header>\n                    <Modal.Body>\n                        <VStack>\n                            <FormControl isInvalid={'arete' in errors}>\n                                <FormControl.Label>Arete</FormControl.Label>\n                                <Input\n                                    placeholder='Arete - ID'\n                                    onChangeText = {(value) => setForm({...form, arete:value})}\n                                />\n                                {'arete' in errors ?\n                                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.arete}</FormControl.ErrorMessage>:\n                                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                                }\n                            </FormControl>\n                            <FormControl isInvalid={'nombre' in errors}>\n                                <FormControl.Label>Nombre</FormControl.Label>\n                                <Input\n                                    placeholder='Nombre'\n                                    onChangeText = {(value) => setForm({...form, name:value})}\n                                />\n                                {'nombre' in errors ?\n                                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.nombre}</FormControl.ErrorMessage>:\n                                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                                }\n                            </FormControl>\n                            <FormControl isInvalid={'sexo' in errors}>\n                                <FormControl.Label>Sexo</FormControl.Label>\n                                    <Radio.Group\n                                    name=\"sexo\"\n                                    accessibilityLabel=\"sexo\"\n                                    value={form.sex}\n                                    onChange={(nextValue) => {\n                                        setForm({...form, sex:nextValue})\n                                    }}\n                                    >\n                                        <Radio value=\"M\" my={1}>\n                                            Masculino\n                                        </Radio>\n                                        <Radio value=\"F\" my={1}>\n                                            Femenino\n                                        </Radio>\n                                    </Radio.Group>\n                                    <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.sexo}</FormControl.ErrorMessage>\n                            </FormControl>\n                        \n                            <FormControl isInvalid={'fecha' in errors}>\n                                <FormControl.Label>Fecha de nacimiento</FormControl.Label>\n                                <Pressable onPress={()=> setForm({...form,show:true})}>\n                                    <Text>{form.nac}</Text>\n                                </Pressable>\n                                {form.show && (\n                                <DateTimePicker\n                                    value={new Date()}\n                                    mode='date'\n                                    display=\"default\"\n                                    onChange={(event, selectedDate) => {\n                                        const f = selectedDate;\n                                        const currentDate = f.getFullYear() + \"-\"+ (f.getMonth()+1) + \"-\" +f.getDate();\n                                        setForm({...form,nac:currentDate,show:false});\n                                    }}\n                                />\n                            )}\n                                \n                                <FormControl.ErrorMessage>{errors.fecha}</FormControl.ErrorMessage>\n                            </FormControl>\n\n                            <FormControl isInvalid={'raza' in errors}>\n                                <FormControl.Label>Raza</FormControl.Label>\n                                <Input\n                                    placeholder='Raza'\n                                    onChangeText = {(value) => setForm({...form, race:value})}\n                                />\n                                {'raza' in errors ?\n                                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.raza}</FormControl.ErrorMessage>:\n                                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                                }\n                            </FormControl>\n                            <FormControl isInvalid={'color' in errors}>\n                                <FormControl.Label>Color</FormControl.Label>\n                                <Input\n                                    placeholder='Color'\n                                    onChangeText = {(value) => setForm({...form, color:value})}\n                                />\n                                {'color' in errors ?\n                                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.color}</FormControl.ErrorMessage>:\n                                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                                }\n                            </FormControl>\n                            <FormControl isInvalid={'predio' in errors}>\n                                <FormControl.Label>Predio</FormControl.Label>\n                                <Input\n                                    placeholder='Predio'\n                                    onChangeText = {(value) => setForm({...form, predio:value})}\n                                />\n                                {'predio' in errors ?\n                                <FormControl.ErrorMessage _text={{fontSize: 'xs', color: 'error.500', fontWeight: 500}}>{errors.predio}</FormControl.ErrorMessage>:\n                                    <FormControl.HelperText _text={{fontSize: 'xs'}}>Diferenciar MAYUS de MINUS</FormControl.HelperText>\n                                }\n                            </FormControl>\n                        </VStack>\n                    </Modal.Body>\n                    <Modal.Footer>\n                    <Button.Group space={2}>\n                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setShow({...show,register:false})}> \n                                Cancel\n                            </Button>\n                            <Button size='lg' colorScheme='rgb(0, 247, 255)' _text={{color:'white'}}onPress={()=>handleUpdate('name')}>Crear</Button>\n                        </Button.Group>\n                    </Modal.Footer>\n                </Modal.Content>\n            </Modal>\n\n            <Modal isOpen={show.rep} onClose={()=>setShow({...show,rep:false})} size='full' >\n                <Modal.Content>\n                    <Modal.CloseButton/>\n                    <Modal.Header alignContent='center'>Registro reproductivo</Modal.Header>\n                    <Modal.Body>\n                    </Modal.Body>\n                </Modal.Content>\n            </Modal>\n\n            <Modal isOpen={show.vac} onClose={()=>setShow({...show,vac:false})} size='full' >\n                <Modal.Content>\n                    <Modal.CloseButton/>\n                    <Modal.Header alignContent='center'>Vacunas</Modal.Header>\n                    <Modal.Body>\n                    </Modal.Body>\n                </Modal.Content>\n            </Modal>\n\n            <Modal isOpen={show.pesaje} onClose={()=>setShow({...show,pesaje:false})} size='full' >\n                <Modal.Content>\n                    <Modal.CloseButton/>\n                    <Modal.Header alignContent='center'>Pesajes</Modal.Header>\n                    <Modal.Body>\n                    </Modal.Body>\n                </Modal.Content>\n            </Modal>\n            <Modal isOpen={show.san} onClose={()=>setShow({...show,san:false})} size='full' >\n                <Modal.Content>\n                    <Modal.CloseButton/>\n                    <Modal.Header alignContent='center'>Controles sanitarios</Modal.Header>\n                    <Modal.Body>\n                    </Modal.Body>\n                </Modal.Content>\n            </Modal>\n\n        </View>\n    )\n}\n\n\n//Screen Vacunas\n\nexport const Vacunas = ({navigation }) => {\n\n    const [form,setForm] = React.useState({show:false,date:'YYYY-MM-DD'});\n    const [errors, setErrors] = React.useState({});\n    const [show, setShow] = React.useState({vacuna:false,register:false,delete:false,animals:false,add:false,rm:false});\n    const [showPop, setPop] = React.useState({id:false,name:false,date:false});\n    const [search, setSearch] = React.useState('');\n    const [vacuna, setVacuna] = React.useState({id:0,name:'N/A',date:new Date()});\n\n    const mt = useSelector((state) => state.mtr.vacunas);\n    const vacunas = useSelector((state)=> state.vacunas);\n    const bkp = useSelector((state) => state.bkpVacunas);\n\n    const dispatch = useDispatch();\n    \n    const filtrar = (search) => {\n        var resultado = bkp.filter((vacuna)=>{\n            if(vacuna.name.toString().toLowerCase().includes(search.toString().toLowerCase()))\n                return vacuna;\n        });\n        dispatch(action.setVacunas(resultado));\n    }\n    const handleSearch = txt => {\n        setSearch(txt);\n        filtrar(txt);\n    }\n    const handleVacuna = (item) =>{\n        setVacuna(item);\n        setShow({...show,vacuna:true});\n    }\n    const handleUpdate =(type) => {\n        console.log(type);\n    }\n    return (\n        <View>\n            <Box>\n                <HStack space={2}>\n                    <Input onChangeText={handleSearch} value={search}placeholder=\"Buscar\" variant=\"filled\" width=\"80%\" borderRadius=\"10\" borderWidth=\"0\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\n                    <IconButton width='15%' colorScheme='rgb(173, 0, 255)' borderRadius=\"xl\" variant=\"solid\"  size=\"lg\"\n                        icon={<Icon  as={MaterialCommunityIcons} name=\"plus\"/>}\n                        onPress={()=>setShow({...show,register:true})}\n                    />\n                </HStack>\n                <FlatList data={vacunas}  renderItem={({item}) => \n                    <Pressable onPress={() => handleVacuna(item)}>\n                        <HStack borderBottomWidth=\"1\" space='4' >\n                            <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"needle\" width='20%'/>\n                            <VStack width=\"65%\">\n                                <Heading>{item.id}</Heading>\n                                <Text>{item.name}</Text>\n                            </VStack>\n                        </HStack>               \n                    </Pressable>\n                }\n                keyExtractor={item=>item.id}\n                />\n                <Text>{mt}</Text>             \n            </Box>\n\n            <Modal isOpen={show.register} onClose={()=>setShow({...show,register:false})}>\n                <Modal.Content>\n                    <Modal.CloseButton/>\n                    <Modal.Header>Registrar vacuna</Modal.Header>\n                    <Modal.Body>\n                        <VStack>\n                            <FormControl isInvalid={'name' in errors}>\n                                <FormControl.Label>Nombre</FormControl.Label>\n                                <Input\n                                    placeholder='Nombre'\n                                    onChangeText={(value) => setForm({...form,name:value})}\n                                />\n                                {\n                                    'name' in errors ? \n                                        <FormControl.ErrorMessage>{errors.name}</FormControl.ErrorMessage>:\n                                            <FormControl.HelperText></FormControl.HelperText>\n                                }\n                            </FormControl>\n\n                            <FormControl isInvalid={'fecha' in errors}>\n                                <FormControl.Label>Fecha de aplicaci√≥n</FormControl.Label>\n                                <Pressable  onPress={() => setForm({...form,show:true})}>\n                                    <Text fontSize='2xs'>Fecha de aplicacion</Text>\n                                    <Text fontSize='md'>{form.date}</Text>\n                                    <Divider />\n                                </Pressable>        \n                                {form.show && (\n                                    <DateTimePicker\n                                        value={new Date()}\n                                        mode='date'\n                                        display=\"default\"\n                                        onChange={(event, selectedDate) => {\n                                            const f = selectedDate;\n                                            const currentDate = f.getFullYear() + \"-\"+ f.getMonth()+ \"-\" +f.getDate();\n                                            setForm({...form,date:currentDate,show:false});\n                                    \n                                        }}\n                                    />\n                                )}\n                            </FormControl>\n                        </VStack>\n                    </Modal.Body>\n                    <Modal.Footer>\n\n                    </Modal.Footer>\n                \n                    <Modal.Footer>\n                        <Button.Group space={2}>\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\n                                Cancelar\n                            </Button >\n                            <Button size='lg' colorScheme='rgb(0, 247, 255)' _text={{color:'white'}} onPress={() => {setShowDel(true);\n                            }}>\n                                Registrar vacuna\n                            </Button>\n                        </Button.Group>\n                    </Modal.Footer> \n                </Modal.Content> \n            </Modal>\n\n            <Modal isOpen={show.vacuna} onClose={() => setShow({...show,vacuna:false})} size='full'>\n                <Modal.Content >\n                    <Modal.CloseButton />\n                    <Modal.Header alignSelf=\"center\" _text={{fontSize:'xl',Overridden:'bold'}}>{vacuna.id}</Modal.Header>\n                    <Modal.Body >\n                        <VStack >\n                            <Pressable onPress={() => setPop({...showPop,name:true})}>\n                                <Text fontSize='2xs'>Nombre</Text>\n                                <Text fontSize='md'>{vacuna.name}</Text>\n                                <Divider />\n                            </Pressable> \n                            <Modal isOpen={showPop.name} onClose={() => setPop({...showPop,name:false})} size='xl'>\n                                <Modal.Content >\n                                    <Modal.Header alignContent='center'>Actualizar nombre</Modal.Header>\n                                    <Modal.Body>\n                                        <FormControl>\n                                            <Input placeholder='Nuevo nombre' onChangeText={(value)=>{setForm({...form,name:value})}}/>\n                                        </FormControl>\n                                    </Modal.Body>\n                                    <Modal.Footer >\n                                        <Button.Group space={2}>\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setPop({...showPop,name:false})}> \n                                                Cancel\n                                            </Button>\n                                            <Button colorScheme=\"warning\" onPress={()=> {\n                                                handleUpdate('name');\n                                                setPop({...showPop,name:false});\n                                            }}>Actualizar</Button>\n                                        </Button.Group>\n                                    </Modal.Footer>\n                                </Modal.Content>\n                            </Modal>\n\n                            <Pressable  onPress={() => setPop({...showPop,date:true})}>\n                                <Text fontSize='2xs'>Fecha de aplicacion</Text>\n                                <Text fontSize='md'>{vacuna.date}</Text>\n                                <Divider />\n                            </Pressable>        \n                            {showPop.date && (\n                                <DateTimePicker\n                                    value={new Date(vacuna.date)}\n                                    mode='date'\n                                    display=\"default\"\n                                    onChange={(event, selectedDate) => {\n                                        const f = selectedDate;\n                                        const currentDate = f.getFullYear() + \"-\"+ f.getMonth()+ \"-\" +f.getDate();\n                                        setForm({...form,date:currentDate});\n                                        handleUpdate('nac');\n                                        setPop({...showPop,date:false});\n                                    }}\n                                />\n                            )}\n                        </VStack>\n                        \n                        \n                        <Button \n                            colorScheme='rgb(0, 154, 159)' \n                            _text={{color:'white'}} \n                            leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"cow\"/>}\n                            onPress = {() => setShow({...show,animals:true})}\n                        >\n                            Hato vacunado\n                        </Button>\n                            \n                    </Modal.Body>\n                    <Modal.Footer>\n                        \n                        <Button.Group space={2}>\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\n                                Cancelar\n                            </Button >\n                            <Button size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}} onPress={() => {setShowDel(true);\n                            }}>\n                                Borrar\n                            </Button>\n                        </Button.Group>\n                    </Modal.Footer>\n\n                    <AlertDialog  isOpen={show.delete} onClose={()=>setShow({...show,delete:false})}>\n                        <AlertDialog.Content>\n                            <AlertDialog.CloseButton />\n                            <AlertDialog.Header>Borrar animal</AlertDialog.Header>\n                            <AlertDialog.Body>\n                                Esto borrar√° todos los datos relacionados con este animal. \n                                Esta acci√≥n no es reversible. \n                                Los datos borrados no podr√°n ser recuperados.\n                                ¬øEst√° seguro de esta acci√≥n?\n                            </AlertDialog.Body>\n                            <AlertDialog.Footer>\n                                <Button.Group space={2}>\n                                <Button variant=\"unstyled\" colorScheme=\"coolGray\" onPress={()=>setShow({...show,delete:false})}>\n                                    Cancelar\n                                </Button>\n                                <Button  size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}}>\n                                    Confirmar \n                                </Button>\n                                </Button.Group>\n                            </AlertDialog.Footer>\n                        </AlertDialog.Content>\n                    </AlertDialog>\n\n                    <Modal isOpen={show.animals} onClose={() => setShow({...show,animals:false})} size='full'>\n                        <Modal.Content>\n                            <Modal.CloseButton/>\n                            <Modal.Header>Hato vacunado</Modal.Header>\n                            <Modal.Body>\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Button.Group space={2}>\n                                    <Button colorScheme='orange'>Eliminar</Button>\n                                    <Button >Agregar</Button>\n                                </Button.Group>\n                            </Modal.Footer>    \n                        </Modal.Content>\n                    </Modal>\n                </Modal.Content>\n            </Modal>\n        </View>\n    );\n\n}\n\n//Screen Sanitario\nexport const Sanitarios= ({navigation}) =>{\n    const [form,setForm] = React.useState({name:'',date:'YYYY-MM-DD'});\n    const [errors, setErrors] = React.useState({});\n    const [show, setShow] = React.useState({sanitario:false,register:false,delete:false,animals:false,add:false,rm:false});\n    const [showPop, setPop] = React.useState({id:false,name:false,date:false});\n    const [search, setSearch] = React.useState('');\n    const [sanitario, setSanitario] = React.useState({id:0,name:'N/A',date:new Date()});\n\n    const mt = useSelector((state) => state.mtr.sanitarios);\n    const sanitarios = useSelector((state)=> state.sanitarios);\n    const bkp = useSelector((state) => state.bkpSanitarios);\n\n    const dispatch = useDispatch();\n    \n    const filtrar = (search) => {\n        var resultado = bkp.filter((sanitario)=>{\n            if(sanitario.name.toString().toLowerCase().includes(search.toString().toLowerCase()))\n                return sanitario;\n        });\n        dispatch(action.setSanitarios(resultado));\n    }\n    const handleSearch = txt => {\n        setSearch(txt);\n        filtrar(txt);\n    }\n    const handleSanitario = (item) =>{\n        setSanitario(item);\n        setShow({...show,sanitario:true});\n    }\n    const handleUpdate =(type) => {\n        console.log(type);\n    }\n    return (\n        <View>\n            <Box>\n                <HStack space={2}>\n                    <Input onChangeText={handleSearch} value={search}placeholder=\"Buscar\" variant=\"filled\" width=\"80%\" borderRadius=\"10\" borderWidth=\"0\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\n                    <IconButton width='15%' colorScheme='rgb(173, 0, 255)' borderRadius=\"xl\" variant=\"solid\"  size=\"lg\"\n                        icon={<Icon  as={MaterialCommunityIcons} name=\"plus\"/>}\n                        onPress={()=>setShow({...show,register:true})}\n                    />\n                </HStack>\n                <FlatList data={sanitarios}  renderItem={({item}) => \n                    <Pressable onPress={() => handleSanitario(item)}>\n                        <HStack borderBottomWidth=\"1\" space='4' >\n                            <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"virus\" width='20%'/>\n                            <VStack width=\"65%\">\n                                <Heading>{item.id}</Heading>\n                                <Text>{item.name}</Text>\n                            </VStack>\n                        </HStack>               \n                    </Pressable>\n                }\n                keyExtractor={item=>item.id}\n                />\n                <Text>{mt}</Text>             \n            </Box>\n\n            <Modal isOpen={show.register} onClose={()=>setShow({...show,register:false})}>\n                <Modal.Content>\n                    <Modal.CloseButton/>\n                    <Modal.Header>Control sanitario</Modal.Header>\n                    <Modal.Body>\n                        <VStack>\n                            <FormControl isInvalid={'name' in errors}>\n                                <FormControl.Label>Nombre</FormControl.Label>\n                                <Input\n                                    placeholder='Nombre'\n                                    onChangeText={(value) => setForm({...form, name:value})}\n                                />\n                                {\n                                    'name' in errors ? \n                                        <FormControl.ErrorMessage>{errors.name}</FormControl.ErrorMessage>:\n                                            <FormControl.HelperText></FormControl.HelperText>\n                                }\n                            </FormControl>\n\n                            <FormControl isInvalid={'fecha' in errors}>\n                                <FormControl.Label>Fecha de aplicaci√≥n</FormControl.Label>\n                                <Pressable  onPress={() => setForm({...form,show:true})}>\n                                    <Text fontSize='2xs'>Fecha de aplicacion</Text>\n                                    <Text fontSize='md'>{form.date}</Text>\n                                    <Divider />\n                                </Pressable>        \n                                {form.show && (\n                                    <DateTimePicker\n                                        value={new Date()}\n                                        mode='date'\n                                        display=\"default\"\n                                        onChange={(event, selectedDate) => {\n                                            const f = selectedDate;\n                                            const currentDate = f.getFullYear() + \"-\"+ f.getMonth()+ \"-\" +f.getDate();\n                                            setForm({...form,show:false,date:currentDate});\n                                           \n                                        }}\n                                    />\n                                )}\n                            </FormControl>\n                        </VStack>\n                    </Modal.Body>\n        \n                    <Modal.Footer>\n                        <Button.Group space={2}>\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\n                                Cancelar\n                            </Button >\n                            <Button size='lg' colorScheme='rgb(0, 247, 255)' _text={{color:'white'}} onPress={() => {setShowDel(true);\n                            }}>\n                                Crear\n                            </Button>\n                        </Button.Group>\n                    </Modal.Footer> \n                </Modal.Content> \n            </Modal>\n\n            <Modal isOpen={show.sanitario} onClose={() => setShow({...show,sanitario:false})} size='full'>\n                <Modal.Content >\n                    <Modal.CloseButton />\n                    <Modal.Header alignSelf=\"center\" _text={{fontSize:'xl',Overridden:'bold'}}>{sanitario.id}</Modal.Header>\n                    <Modal.Body >\n                        <VStack >\n                            <Pressable onPress={() => setPop({...showPop,name:true})}>\n                                <Text fontSize='2xs'>Nombre</Text>\n                                <Text fontSize='md'>{sanitario.name}</Text>\n                                <Divider />\n                            </Pressable> \n                            <Modal isOpen={showPop.name} onClose={() => setPop({...showPop,name:false})} size='xl'>\n                                <Modal.Content >\n                                    <Modal.Header alignContent='center'>Actualizar nombre</Modal.Header>\n                                    <Modal.Body>\n                                        <FormControl>\n                                            <Input placeholder='Nuevo nombre' onChangeText={(value)=>{setForm({...form,name:value})}}/>\n                                        </FormControl>\n                                    </Modal.Body>\n                                    <Modal.Footer >\n                                        <Button.Group space={2}>\n                                            <Button colorScheme=\"coolGray\" variant=\"ghost\" onPress={()=>setPop({...showPop,name:false})}> \n                                                Cancel\n                                            </Button>\n                                            <Button colorScheme=\"warning\" onPress={()=> {\n                                                handleUpdate('name');\n                                                setPop({...showPop,name:false});\n                                            }}>Actualizar</Button>\n                                        </Button.Group>\n                                    </Modal.Footer>\n                                </Modal.Content>\n                            </Modal>\n\n                            <Pressable  onPress={() => setPop({...showPop,date:true})}>\n                                <Text fontSize='2xs'>Fecha de aplicacion</Text>\n                                <Text fontSize='md'>{sanitario.date}</Text>\n                                <Divider />\n                            </Pressable>        \n                            {showPop.date && (\n                                <DateTimePicker\n                                    value={new Date(sanitario.date)}\n                                    mode='date'\n                                    display=\"default\"\n                                    onChange={(event, selectedDate) => {\n                                        const f = selectedDate;\n                                        const currentDate = f.getFullYear() + \"-\"+ f.getMonth()+ \"-\" +f.getDate();\n                                        setForm({...form,date:currentDate});\n                                        handleUpdate('nac');\n                                        setPop({...showPop,date:false});\n                                    }}\n                                />\n                            )}\n                        </VStack>\n                        \n                        \n                        <Button \n                            colorScheme='rgb(0, 154, 159)' \n                            _text={{color:'white'}} \n                            leftIcon={<Icon size=\"md\" as={MaterialCommunityIcons} name=\"cow\"/>}\n                            onPress = {() => setShow({...show,animals:true})}\n                        >\n                            Hato de control\n                        </Button>\n                            \n                    </Modal.Body>\n                    <Modal.Footer>\n                        \n                        <Button.Group space={2}>\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\n                                Cancelar\n                            </Button >\n                            <Button size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}} onPress={() => {setShowDel(true);\n                            }}>\n                                Borrar\n                            </Button>\n                        </Button.Group>\n                    </Modal.Footer>\n\n                    <AlertDialog  isOpen={show.delete} onClose={()=>setShow({...show,delete:false})}>\n                        <AlertDialog.Content>\n                            <AlertDialog.CloseButton />\n                            <AlertDialog.Header>Borrar animal</AlertDialog.Header>\n                            <AlertDialog.Body>\n                                Esto borrar√° todos los datos relacionados con esta control sanitario. \n                                Esta acci√≥n no es reversible. \n                                Los datos borrados no podr√°n ser recuperados.\n                                ¬øEst√° seguro de esta acci√≥n?\n                            </AlertDialog.Body>\n                            <AlertDialog.Footer>\n                                <Button.Group space={2}>\n                                <Button variant=\"unstyled\" colorScheme=\"coolGray\" onPress={()=>setShow({...show,delete:false})}>\n                                    Cancelar\n                                </Button>\n                                <Button  size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}}>\n                                    Confirmar \n                                </Button>\n                                </Button.Group>\n                            </AlertDialog.Footer>\n                        </AlertDialog.Content>\n                    </AlertDialog>\n\n                    <Modal isOpen={show.animals} onClose={() => setShow({...show,animals:false})} size='full'>\n                        <Modal.Content>\n                            <Modal.CloseButton/>\n                            <Modal.Header>Hato de control sanitario</Modal.Header>\n                            <Modal.Body>\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Button.Group space={2}>\n                                    <Button colorScheme='orange'>Eliminar</Button>\n                                    <Button >Aplicar control</Button>\n                                </Button.Group>\n                            </Modal.Footer>    \n                        </Modal.Content>\n                    </Modal>\n                </Modal.Content>\n            </Modal>\n        </View>\n    );\n}\n\n//Screen Embarazos\n\nexport const Embarazos = ({navigation}) => {\n    const [form,setForm] = React.useState({show:false,date:'YYYY-MM-DD'});\n    const [errors, setErrors] = React.useState({});\n    const [show, setShow] = React.useState({embarazo:false,register:false,delete:false,animals:false});\n    const [showPop, setPop] = React.useState({id:false,name:false,inicio:false,fin:false});\n    const [search, setSearch] = React.useState('');\n    const [embarazo, setEmbarazo] = React.useState({id:0,name:'N/A',inicio:'YYYY-MM-DD', fin:'YYYY-MM-DD'});\n\n    const mt = useSelector((state) => state.mtr.embarazos);\n    const embarazos = useSelector((state)=> state.embarazos);\n    const bkp = useSelector((state) => state.bkpEmbarazos);\n\n    const dispatch = useDispatch();\n    \n    const filtrar = (search) => {\n        var resultado = bkp.filter((embarazo)=>{\n            if(embarazo.date.toString().toLowerCase().includes(search.toString().toLowerCase()))\n                return embarazo;\n        });\n        dispatch(action.setEmbarazos(resultado));\n    }\n    const handleSearch = txt => {\n        setSearch(txt);\n        filtrar(txt);\n    }\n    const handleEmbarazo = (item) =>{\n        setShow({...show,embarazo:true});\n    }\n    const handleUpdate =(type) => {\n        console.log(type);\n    }\n    return (\n        <View>\n            <Box>\n                <HStack space={2}>\n                    <Input onChangeText={handleSearch} value={search}placeholder=\"Buscar\" variant=\"filled\" width=\"80%\" borderRadius=\"10\" borderWidth=\"0\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\n                    <IconButton width='15%' colorScheme='rgb(173, 0, 255)' borderRadius=\"xl\" variant=\"solid\"  size=\"lg\"\n                        icon={<Icon  as={MaterialCommunityIcons} name=\"plus\"/>}\n                        onPress={()=>setShow({...show,register:true})}\n                    />\n                </HStack>\n                <FlatList data={embarazos}  renderItem={({item}) => \n                    <Pressable onPress={() => handleEmbarazo(item)}>\n                        <HStack borderBottomWidth=\"1\" space='4' >\n                            <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"dna\" width='20%'/>\n                            <VStack width=\"65%\">\n                                <Heading>{item.id}</Heading>\n                                \n                            </VStack>\n                        </HStack>               \n                    </Pressable>\n                }\n                keyExtractor={item=>item.id}\n                />\n                <Text>{mt}</Text>             \n            </Box>\n\n            <Modal isOpen={show.register} onClose={()=>setShow({...show,register:false})}>\n                <Modal.Content>\n                    <Modal.CloseButton/>\n                    <Modal.Header>Registrar Embarazo</Modal.Header>\n                    <Modal.Body>\n                        <VStack>\n                            <FormControl isInvalid={'name' in errors}>\n                                <FormControl.Label>Nombre</FormControl.Label>\n                                <Input\n                                    placeholder='Nombre'\n                                    onChangeText={(value) => setData({...data, nombre:value})}\n                                />\n                                {\n                                    'name' in errors ? \n                                        <FormControl.ErrorMessage>{errors.name}</FormControl.ErrorMessage>:\n                                            <FormControl.HelperText></FormControl.HelperText>\n                                }\n                            </FormControl>\n\n                            <FormControl isInvalid={'fecha' in errors}>\n                                <FormControl.Label>Fecha de aplicaci√≥n</FormControl.Label>\n                                <Pressable  onPress={() => setForm({...form,show:true})}>\n                                    <Text fontSize='2xs'>Fecha de aplicacion</Text>\n                                    <Text fontSize='md'>{form.date}</Text>\n                                    <Divider />\n                                </Pressable>        \n                                {form.show && (\n                                    <DateTimePicker\n                                        value={new Date()}\n                                        mode='date'\n                                        display=\"default\"\n                                        onChange={(event, selectedDate) => {\n                                            const f = selectedDate;\n                                            const currentDate = f.getFullYear() + \"-\"+ f.getMonth()+ \"-\" +f.getDate();\n                                            setForm({...form,date:currentDate,show:false});\n                                    \n                                        }}\n                                    />\n                                )}\n                            </FormControl>\n                        </VStack>\n                    </Modal.Body>\n                    <Modal.Footer>\n\n                    </Modal.Footer>\n                \n                    <Modal.Footer>\n                        <Button.Group space={2}>\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\n                                Cancelar\n                            </Button >\n                            <Button size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}} onPress={() => {setShowDel(true);\n                            }}>\n                                Borrar\n                            </Button>\n                        </Button.Group>\n                    </Modal.Footer> \n                </Modal.Content> \n            </Modal>\n        </View>\n    );\n}\n\n//Screen Pesajes\n\nexport const Pesajes = ({navigation}) => {\n    const [form,setForm] = React.useState({});\n    const [errors, setErrors] = React.useState({});\n    const [show, setShow] = React.useState({pesaje:false,register:false,delete:false});\n    const [showPop, setPop] = React.useState({id:false,name:false,date:false});\n    const [search, setSearch] = React.useState('');\n    const [pesaje, setPesaje] = React.useState({id:0,arete:'N/A',kg:0,date:new Date()});\n\n    const mt = useSelector((state) => state.mtr.pesajes);\n    const pesajes = useSelector((state)=> state.pesajes);\n    const bkp = useSelector((state) => state.bkpPesajes);\n\n    const dispatch = useDispatch();\n    \n    const filtrar = (search) => {\n        var resultado = bkp.filter((pesaje)=>{\n            if(pesaje.arete.toString().toLowerCase().includes(search.toString().toLowerCase()))\n                return pesaje;\n        });\n        dispatch(action.setPesajes(resultado));\n    }\n    const handleSearch = txt => {\n        setSearch(txt);\n        filtrar(txt);\n    }\n    const handlePesaje= (item) =>{\n        setShow({...show,pesaje:true});\n    }\n    const handleUpdate =(type) => {\n        console.log(type);\n    }\n    return (\n        <View>\n            <Box>\n                <HStack space={2}>\n                    <Input onChangeText={handleSearch} value={search}placeholder=\"Buscar\" variant=\"filled\" width=\"80%\" borderRadius=\"10\" borderWidth=\"0\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\n                    <IconButton width='15%' colorScheme='rgb(173, 0, 255)' borderRadius=\"xl\" variant=\"solid\"  size=\"lg\"\n                        icon={<Icon  as={MaterialCommunityIcons} name=\"plus\"/>}\n                        onPress={()=>setShowReg(true)}\n                    />\n                </HStack>\n                <FlatList data={pesajes}  renderItem={({item}) => \n                    <Pressable onPress={() => handlePredio(item)}>\n                        <HStack borderBottomWidth=\"1\" space='4' >\n                            <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"weight\" width='20%'/>\n                            <VStack width=\"65%\">\n                                <Heading>{item.arete}</Heading>\n                                <Text>{item.kg}</Text>\n                            </VStack>\n                        </HStack>               \n                    </Pressable>\n                }\n                keyExtractor={item=>item.id}\n                />\n                <Text>{mt}</Text>             \n            </Box>\n\n            <Modal isOpen={show.register} onClose={()=>setShow({...show,register:false})}>\n                <Modal.Content>\n                    <Modal.CloseButton/>\n                    <Modal.Header>Registrar Pesaje</Modal.Header>\n                    <Modal.Body>\n                        <VStack>\n                            <FormControl isInvalid={'name' in errors}>\n                                <FormControl.Label>Nombre</FormControl.Label>\n                                <Input\n                                    placeholder='Nombre'\n                                    onChangeText={(value) => setData({...data, nombre:value})}\n                                />\n                                {\n                                    'name' in errors ? \n                                        <FormControl.ErrorMessage>{errors.name}</FormControl.ErrorMessage>:\n                                            <FormControl.HelperText></FormControl.HelperText>\n                                }\n                            </FormControl>\n\n                            <FormControl isInvalid={'fecha' in errors}>\n                                <FormControl.Label>Fecha de aplicaci√≥n</FormControl.Label>\n\n\n                            </FormControl>\n                        </VStack>\n                    </Modal.Body>\n                    <Modal.Footer>\n\n                    </Modal.Footer>\n                \n                    <Modal.Footer>\n                        <Button.Group space={2}>\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\n                                Cancelar\n                            </Button >\n                            <Button size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}} onPress={() => {setShowDel(true);\n                            }}>\n                                Borrar\n                            </Button>\n                        </Button.Group>\n                    </Modal.Footer> \n                </Modal.Content> \n            </Modal>\n        </View>\n    );\n}\n\n//Screen Predios\n\nexport const Predios = ( {navitagion}) => {\n    const [form,setForm] = React.useState({});\n    const [errors, setErrors] = React.useState({});\n    const [show, setShow] = React.useState({predio:false,register:false,delete:false,animals:false});\n    const [showPop, setPop] = React.useState({id:false,name:false,date:false});\n    const [search, setSearch] = React.useState('');\n    const [predio, setPredio] = React.useState({id:0,name:'N/A',agua:1,pasto:1});\n\n    const mt = useSelector((state) => state.mtr.predios);\n    const predios = useSelector((state)=> state.predios);\n    const bkp = useSelector((state) => state.bkpPredios);\n\n    const dispatch = useDispatch();\n    \n    const filtrar = (search) => {\n        var resultado = bkp.filter((predio)=>{\n            if(predio.name.toString().toLowerCase().includes(search.toString().toLowerCase()))\n                return predio;\n        });\n        dispatch(action.setPredios(resultado));\n    }\n    const handleSearch = txt => {\n        setSearch(txt);\n        filtrar(txt);\n    }\n    const handlePredio = (item) =>{\n        setShow({...show,predio:true});\n    }\n    const handleUpdate =(type) => {\n        console.log(type);\n    }\n    return (\n        <View>\n            <Box>\n                <HStack space={2}>\n                    <Input onChangeText={handleSearch} value={search}placeholder=\"Buscar\" variant=\"filled\" width=\"80%\" borderRadius=\"10\" borderWidth=\"0\" InputLeftElement={<Icon ml=\"2\" size=\"4\" color=\"gray.400\" as={<Ionicons name=\"ios-search\" />} />} />\n                    <IconButton width='15%' colorScheme='rgb(173, 0, 255)' borderRadius=\"xl\" variant=\"solid\"  size=\"lg\"\n                        icon={<Icon  as={MaterialCommunityIcons} name=\"plus\"/>}\n                        onPress={()=>setShowReg(true)}\n                    />\n                </HStack>\n                <FlatList data={predios}  renderItem={({item}) => \n                    <Pressable onPress={() => handlePredio(item)}>\n                        <HStack borderBottomWidth=\"1\" space='4' >\n                            <Icon size=\"xl\" as={MaterialCommunityIcons} name=\"terrain\" width='20%'/>\n                            <VStack width=\"65%\">\n                                <Heading>{item.id}</Heading>\n                                <Text>{item.name}</Text>\n                            </VStack>\n                        </HStack>               \n                    </Pressable>\n                }\n                keyExtractor={item=>item.id}\n                />\n                <Text>{mt}</Text>             \n            </Box>\n\n            <Modal isOpen={show.register} onClose={()=>setShow({...show,register:false})}>\n                <Modal.Content>\n                    <Modal.CloseButton/>\n                    <Modal.Header>Registrar Predio</Modal.Header>\n                    <Modal.Body>\n                        <VStack>\n                            <FormControl isInvalid={'name' in errors}>\n                                <FormControl.Label>Nombre</FormControl.Label>\n                                <Input\n                                    placeholder='Nombre'\n                                    onChangeText={(value) => setData({...data, nombre:value})}\n                                />\n                                {\n                                    'name' in errors ? \n                                        <FormControl.ErrorMessage>{errors.name}</FormControl.ErrorMessage>:\n                                            <FormControl.HelperText></FormControl.HelperText>\n                                }\n                            </FormControl>\n\n                            <FormControl isInvalid={'fecha' in errors}>\n                                <FormControl.Label>Fecha de aplicaci√≥n</FormControl.Label>\n\n\n                            </FormControl>\n                        </VStack>\n                    </Modal.Body>\n                    <Modal.Footer>\n\n                    </Modal.Footer>\n                \n                    <Modal.Footer>\n                        <Button.Group space={2}>\n                            <Button variant=\"ghost\" colorScheme=\"blueGray\" size = 'md' onPress={() => {setShow(false)}}>\n                                Cancelar\n                            </Button >\n                            <Button size='lg' colorScheme='rgb(255, 37, 0)' _text={{color:'white'}} onPress={() => {setShowDel(true);\n                            }}>\n                                Borrar\n                            </Button>\n                        </Button.Group>\n                    </Modal.Footer> \n                </Modal.Content> \n            </Modal>\n        </View>\n    );\n}\n\n//Screens \"Embarques\"\nexport const newEmbarque = ({navigation}) => {\n    const [data,setData] = React.useState({type:'pesos',vehicles:0, units:0});\n    const [getUnits, setUnits] = React.useState(false);\n    const handleCrear = () => {\n        switch(data.type){\n            case 'pesos':\n                navigation.navigate('setEmbarque',{nUnits:data.units,nVehicles:data.vehicles});\n                break;\n            case 'nombre':\n                navigation.navigate('setEmbarque',{nUnits:0,nVehicles:data.vehicles});\n                break;\n            default:\n                break;\n        }\n    }\n    return(\n        <Box bg=\"#DEDDDA\" rounded=\"lg\" borderColor=\"#9A9996\" borderWidth={2}>\n            <FormControl>\n                <FormControl.Label>Tipo de embarque</FormControl.Label>\n                <Select\n                    selectedValue={data.type}\n                    mt={1}\n                    onValueChange={(itemValue) => {\n                        setData({...data, type:itemValue});\n                        if (itemValue=='nombre')\n                            setUnits(true);\n                        else\n                            setUnits(false);\n                    }}\n                >\n                    <Select.Item label=\"Agregar por nombre\" value=\"nombre\" />\n                    <Select.Item label=\"Agregar pesos\" value=\"pesos\" />\n                </Select>\n            </FormControl>\n            <FormControl isDisabled >\n                <FormControl.Label>Tama√±o de embarque</FormControl.Label>\n                <Center>\n                    <Text>{data.units}</Text>\n                    <Slider defaultValue={data.units} size=\"sm\" colorScheme=\"white\" maxValue={500} onChange={(value) => {setData({...data, units:value})}} width=\"85%\">\n                        <Slider.Track bg=\"white\">\n                        <Slider.FilledTrack bg=\"black\" />\n                        </Slider.Track>\n                        <Slider.Thumb borderWidth=\"0\" bg=\"transparent\">\n                        <Icon as={MaterialCommunityIcons} name=\"cow\" color=\"black\" size=\"sm\" />\n                        </Slider.Thumb>\n                    </Slider>\n                </Center>\n            </FormControl>\n\n            <FormControl>\n                <FormControl.Label>N√∫mero de vehiculos</FormControl.Label>\n                <Center>\n                    <Text>{data.vehicles}</Text>\n                    <Slider defaultValue={data.units} size=\"sm\" colorScheme=\"white\" maxValue={50}onChange={(value) => {setData({...data, vehicles:value})}} width=\"85%\">\n                        <Slider.Track bg=\"white\">\n                        <Slider.FilledTrack bg=\"black\" />\n                        </Slider.Track>\n                        <Slider.Thumb borderWidth=\"0\" bg=\"transparent\">\n                        <Icon as={MaterialCommunityIcons} name=\"truck\" color=\"black\" size=\"sm\" />\n                        </Slider.Thumb>\n                    </Slider>\n                </Center>\n            </FormControl>\n            \n            <Divider my={2}/>\n            <Button colorScheme=\"success\" onPress={handleCrear}>Crear Embarque</Button>\n        </Box>\n    );\n}\nexport const setEmbarque = ({route, navigation}) => {\n    const {nUnits, nVehicles} = route.params;\n    const [show, setShow] = React.useState(true)\n    const [vehicles, setVehicles] = React.useState({vehiclesInputs:[]});\n    const [units, setUnits] = React.useState({unitInputs:[]});\n    let  iUnits= [];\n    let iVehicles  = [] ;\n\n    for (var i=0; i<nVehicles; i++){\n        iVehicles.push(i);  \n    }\n\n    if (nUnits > 0){\n        for (var i=0; i<nUnits; i++){\n            iUnits.push(i);\n        }\n    }else{\n        //Cargar hato con su ultimo peso\n        //Seleccionar de lista\n        \n    }\n    const setVehiculsInputs = (value,index) => {\n        let { vehiclesInputs } = vehicles;\n        vehiclesInputs[index] = value;\n        setVehicles({\n            vehiclesInputs,\n        });\n    }\n    const setUnitsInputs = (value,index) => {\n        let { unitInputs } = vehicles;\n        unitInputs[index] = value;\n        setUnits({\n            unitInputs,\n        });\n    }\n    return(\n        <KeyboardAvoidingView keyboardVerticalOffset={100} behavior={Platform.OS === \"ios\" ? \"height\" : \"\"}>\n            <Box> \n                <Collapse isOpen={show}>\n                    <Alert variant='outline'>\n                      \n                        <HStack alignItems=\"center\">\n                        <Text  fontSize=\"md\">Utilizar la misma unidad de medida.</Text>\n\n                        <IconButton\n                            icon={<CloseIcon size='3' color=\"coolGray.600\" />}\n                            onPress={() => setShow(false)}\n                        />\n                        </HStack>\n                    </Alert>\n                </Collapse>\n                <Box maxH=\"92%\">\n                    <Heading>Vehiculos</Heading>\n                    <FlatList\n                        data={iVehicles}\n                        renderItem={({ item, index }) => (\n                            <VStack>\n                                <Text>{index+1}</Text>\n                                <Input placeholder='Capacidad' value={vehicles.vehiclesInputs[index]} onChangeText = {(value)=>{setVehiculsInputs(value,index)}} />\n                            </VStack>\n                        )}\n                        keyExtractor={item => item}\n                    />\n                    <Heading>Unidades embarcadas</Heading>\n                    <FlatList\n                        data={iUnits}\n                        renderItem={({ item, index }) => (\n                            <VStack>\n                                <Text>{index+1}</Text>\n                                <Input placeholder='Peso' value={units.unitInputs[index]} onChangeText = {(value)=>{setUnitsInputs(value,index)}} />\n                            </VStack>\n                        )}\n                        keyExtractor={item => item}\n                    />\n                </Box>\n                <Button colorScheme='success' >Optimizar embarque</Button>\n            </Box>\n        </KeyboardAvoidingView>\n    );\n\n}\n/*\n\n*/\nexport const getEmbarque = ({navigation}) => {\n\n}\n//Screen Configuracion\nexport const setConfig = ({route, navigation}) => {\n    const {type, data} = route.params;\n    const [ndata, setData] = React.useState({})\n    switch(type){\n        case 'Usuario':\n            return(\n                <Box>\n                    <FormControl>\n                        <FormControl.Label>Establecer nuevo</FormControl.Label>\n                        <Input placeholder = {type} value={ndata} onChangeText = {(value) => setData(value)}/>\n                    </FormControl>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                </Box>\n            );\n            break;\n        case 'Nombre':\n            return(\n                <Box>\n                    <FormControl>\n                        <FormControl.Label>Establecer nuevo</FormControl.Label>\n                        <Input placeholder = {type} value={ndata} onChangeText = {(value) => setData(value)}/>\n                    </FormControl>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                </Box>\n            );\n            break;\n        case 'Contrase√±a':\n            const [cpass, setPass] = React.useState('')\n            return(\n                <Box>\n                    <FormControl>\n                        <FormControl.Label>Establecer nueva</FormControl.Label>\n                        <Input placeholder = {type} type='password' value={ndata} onChangeText = {(value) => setData(value)}/>\n                        <Input placeholder = 'Confirmar' type='password' value={cpass} onChangeText = {(value) => setPass(value)}/>\n                    </FormControl>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                </Box>\n            );\n            break;\n        case 'Direcci√≥n':\n            return(\n                <Box>\n                    <FormControl>\n                        <FormControl.Label>Establecer nueva</FormControl.Label>\n                        <Input placeholder = {type} value={ndata} onChangeText = {(value) => setData(value)}/>\n                    </FormControl>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                </Box>\n            );\n            break;\n        case 'Tel√©fono':\n            return(\n                <Box>\n                    <FormControl>\n                        <FormControl.Label>Establecer nuevo</FormControl.Label>\n                        <Input placeholder = {type} keyboardType='numeric' value={ndata} onChangeText = {(value) => setData(value)}/>\n                    </FormControl>\n                    <Button colorScheme='warning'>Actualizar</Button>\n                </Box>\n            );\n            break;\n    }\n}\n\nexport const Configuracion = ({navigation}) => {\n    const tkn = useSelector(state => state.jwt);\n    const perfil = useSelector(state => state.perfil);\n    const dispatch = useDispatch();\n        // user,name,pass,cpass,address, phone.\n\n    const [errors, setError] = React.useState({});\n    const handleParam = (type) =>{\n\n    }\n    return (\n        <Box >\n            <Box bgColor='#DEDDDA' >\n                <Center>\n                    <Heading size='sm'>Actualizar datos</Heading>\n                </Center>\n            </Box>\n            <FlatList\n                data={perfil}\n                renderItem={({item}) => (\n                    <Pressable onPress={() => handleParam(item)}>\n                        <HStack borderBottomWidth=\"1\" space='4' >\n                            <VStack width=\"65%\">\n                                <Heading>{item.value}</Heading>\n                                <Text>{item.id}</Text>\n                            </VStack>\n                        </HStack>               \n                    </Pressable>\n                )}\n                keyExtractor={(item) => item.id}\n            />\n            \n            <Button.Group space={2}>\n                <VStack width='100%'>\n                    <Button  variant='outline' colorScheme='orange'>Cerrar sesi√≥n</Button>\n                    <Button  variant='outline' colorScheme='red'>Eliminar cuenta</Button>\n                </VStack>\n                \n            </Button.Group>\n        </Box>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}